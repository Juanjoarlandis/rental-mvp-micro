{
    "rental-mvp-micro/estructura_directorios.json": "[\n    {\n        \"name\": \"rental-mvp-micro\",\n        \"dirs\": [\n            {\n                \"name\": \"services\",\n                \"dirs\": [\n                    {\n                        \"name\": \"auth\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"migrations\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"versions\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"20250712_init.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"script.py.mako\",\n                                    \"README\",\n                                    \"env.py\"\n                                ]\n                            },\n                            {\n                                \"name\": \"app\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"models\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"models.py\",\n                                            \"__init__.py\",\n                                            \"database.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"schemas\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"token.py\",\n                                            \"__init__.py\",\n                                            \"user.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"crud\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"user.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"core\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"config.py\",\n                                            \"security.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"api\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"auth.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"main.py\",\n                                    \"__init__.py\",\n                                    \"deps.py\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"requirements.txt\",\n                            \".env\",\n                            \"Dockerfile\",\n                            \"alembic.ini\"\n                        ]\n                    },\n                    {\n                        \"name\": \"frontend\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"src\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"assets\",\n                                        \"dirs\": [\n                                            {\n                                                \"name\": \"payments\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"paypal.svg\",\n                                                    \"mastercard.svg\",\n                                                    \"visa.svg\"\n                                                ]\n                                            }\n                                        ],\n                                        \"files\": [\n                                            \"logo.png\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"hooks\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"useAuth.tsx\",\n                                            \"useStripe.ts\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"styles\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"global.css\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"features\",\n                                        \"dirs\": [\n                                            {\n                                                \"name\": \"auth\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"register.ts\",\n                                                    \"login.ts\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"categories\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"useCategories.ts\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"items\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"useItems.ts\",\n                                                    \"AddItemModal.tsx\",\n                                                    \"ItemList.tsx\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"rentals\",\n                                                \"dirs\": [\n                                                    {\n                                                        \"name\": \"payments\",\n                                                        \"dirs\": [],\n                                                        \"files\": [\n                                                            \"createIntent.ts\"\n                                                        ]\n                                                    }\n                                                ],\n                                                \"files\": [\n                                                    \"reserve.ts\",\n                                                    \"RentalList.tsx\",\n                                                    \"createRental.ts\",\n                                                    \"useRentals.ts\"\n                                                ]\n                                            }\n                                        ],\n                                        \"files\": []\n                                    },\n                                    {\n                                        \"name\": \"pages\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"Register.tsx\",\n                                            \"Login.tsx\",\n                                            \"Dashboard.tsx\",\n                                            \"Home.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"components\",\n                                        \"dirs\": [\n                                            {\n                                                \"name\": \"ui\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"PaymentModal.tsx\",\n                                                    \"SkeletonCard.tsx\",\n                                                    \"LazyImage.tsx\",\n                                                    \"ItemCard.tsx\",\n                                                    \"SearchBar.tsx\",\n                                                    \"ItemDetailModal.tsx\",\n                                                    \"SocialButton.tsx\",\n                                                    \"QuickViewModal.tsx\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"shared\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"Section.tsx\",\n                                                    \"Container.tsx\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"layout\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"Footer.tsx\",\n                                                    \"Header.tsx\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"Home\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"FAQ.tsx\",\n                                                    \"Stats.tsx\",\n                                                    \"LogoCloud.tsx\",\n                                                    \"Testimonials.tsx\"\n                                                ]\n                                            },\n                                            {\n                                                \"name\": \"filters\",\n                                                \"dirs\": [],\n                                                \"files\": [\n                                                    \"FiltersSidebar.tsx\"\n                                                ]\n                                            }\n                                        ],\n                                        \"files\": []\n                                    }\n                                ],\n                                \"files\": [\n                                    \"App.tsx\",\n                                    \"api.ts\",\n                                    \"ErrorBoundary.tsx\",\n                                    \"main.tsx\",\n                                    \"utils.ts\",\n                                    \"Protected.tsx\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"index.html\",\n                            \"package.json\",\n                            \"vite.config.ts\",\n                            \".env\",\n                            \"Dockerfile\",\n                            \"nginx.conf\",\n                            \"tsconfig.json\",\n                            \"postcss.config.js\",\n                            \"tailwind.config.js\"\n                        ]\n                    },\n                    {\n                        \"name\": \"rentals\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"migrations\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"versions\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"20250714_0001_initial.py\",\n                                            \".gitkeep\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"script.py.mako\",\n                                    \"README\",\n                                    \"env.py\"\n                                ]\n                            },\n                            {\n                                \"name\": \"app\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"models\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"models.py\",\n                                            \"__init__.py\",\n                                            \"database.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"schemas\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"rental.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"crud\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"rental.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"core\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"config.py\",\n                                            \"security.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"api\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"rentals.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"main.py\",\n                                    \"__init__.py\",\n                                    \"deps.py\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"requirements.txt\",\n                            \".env\",\n                            \"Dockerfile\",\n                            \"alembic.ini\",\n                            \"test_rentals.sh\"\n                        ]\n                    },\n                    {\n                        \"name\": \"upload\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"uploads\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"logo.png\"\n                                ]\n                            },\n                            {\n                                \"name\": \"app\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"core\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"config.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"api\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"upload.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"main.py\",\n                                    \"__init__.py\",\n                                    \"deps.py\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"requirements.txt\",\n                            \".env\",\n                            \"test_upload.sh\",\n                            \"Dockerfile\"\n                        ]\n                    },\n                    {\n                        \"name\": \"payments\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"migrations\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"versions\",\n                                        \"dirs\": [],\n                                        \"files\": []\n                                    }\n                                ],\n                                \"files\": [\n                                    \"script.py.mako\",\n                                    \"env.py\"\n                                ]\n                            },\n                            {\n                                \"name\": \"app\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"models\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"payment.py\",\n                                            \"__init__.py\",\n                                            \"database.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"schemas\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"payment.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"crud\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"payment.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"workers\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"settlement.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"core\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"config.py\",\n                                            \"stripe.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"api\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"payments.py\",\n                                            \"webhooks.py\",\n                                            \"__init__.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"main.py\",\n                                    \"__init__.py\",\n                                    \"deps.py\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"requirements.txt\",\n                            \".env\",\n                            \"Dockerfile\",\n                            \"alembic.ini\"\n                        ]\n                    },\n                    {\n                        \"name\": \"catalog\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"migrations\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"versions\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"20250713_0001_initial.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"script.py.mako\",\n                                    \"README\",\n                                    \"env.py\"\n                                ]\n                            },\n                            {\n                                \"name\": \"app\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"models\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"models.py\",\n                                            \"__init__.py\",\n                                            \"database.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"schemas\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"category.py\",\n                                            \"__init__.py\",\n                                            \"item.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"crud\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"category.py\",\n                                            \"__init__.py\",\n                                            \"item.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"core\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"__init__.py\",\n                                            \"config.py\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"api\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"items.py\",\n                                            \"categories.py\",\n                                            \"__init__.py\",\n                                            \"upload.py\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": [\n                                    \"main.py\",\n                                    \"__init__.py\",\n                                    \"deps.py\"\n                                ]\n                            }\n                        ],\n                        \"files\": [\n                            \"requirements.txt\",\n                            \".env\",\n                            \"Dockerfile\",\n                            \"test_endpoints.sh\",\n                            \"alembic.ini\"\n                        ]\n                    }\n                ],\n                \"files\": []\n            }\n        ],\n        \"files\": [\n            \"estructura_directorios.json\",\n            \"docker-compose.prod.yml\",\n            \".env\"\n        ]\n    }\n]",
    "rental-mvp-micro/docker-compose.prod.yml": "version: \"3.9\"\n\n# ──────────────────────────────── NETWORKS (opcional) ───────────────────────────\n# Si no declaras redes, Compose crea una por defecto que ya es suficiente.\n# networks:\n#   backend:\n\n# ─────────────────────────────────── SERVICES ───────────────────────────────────\nservices:\n\n  # ────────────── AUTH ──────────────────────────────────────────────────────────\n  auth-db:\n    image: postgres:15\n    container_name: auth-db\n    environment:\n      POSTGRES_DB: auth\n      POSTGRES_USER: auth_user\n      POSTGRES_PASSWORD: auth_pass\n    volumes:\n      - auth_db_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U auth_user -d auth\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    # networks:\n    #   - backend\n\n  auth-migrate:\n    build: ./services/auth\n    container_name: auth-migrate\n    env_file: ./services/auth/.env\n    command: alembic upgrade head\n    depends_on:\n      auth-db:\n        condition: service_healthy\n    restart: \"no\"                       # solo se ejecuta una vez\n    # networks:\n    #   - backend\n\n  auth:\n    build: ./services/auth\n    container_name: auth-service\n    env_file: ./services/auth/.env\n    environment:\n      - JWT_SECRET=${JWT_SECRET}\n    ports:\n      - \"8001:8000\"                     # API Auth\n    restart: unless-stopped\n    depends_on:\n      auth-migrate:\n        condition: service_completed_successfully\n    # networks:\n    #   - backend\n\n  # ────────────── CATALOG ───────────────────────────────────────────────────────\n  catalog-db:\n    image: postgres:15\n    container_name: catalog-db\n    environment:\n      POSTGRES_DB: catalog\n      POSTGRES_USER: catalog_user\n      POSTGRES_PASSWORD: catalog_pass\n    volumes:\n      - catalog_db_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U catalog_user -d catalog\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    # networks:\n    #   - backend\n\n  catalog-migrate:\n    build: ./services/catalog\n    container_name: catalog-migrate\n    env_file: ./services/catalog/.env\n    command: alembic upgrade head\n    depends_on:\n      catalog-db:\n        condition: service_healthy\n    restart: \"no\"\n    # networks:\n    #   - backend\n\n  catalog:\n    build: ./services/catalog\n    container_name: catalog-service\n    env_file: ./services/catalog/.env\n    ports:\n      - \"8002:8000\"                     # API Catalog\n    restart: unless-stopped\n    depends_on:\n      catalog-migrate:\n        condition: service_completed_successfully\n    # networks:\n    #   - backend\n\n  # ────────────── RENTALS ───────────────────────────────────────────────────────\n  rentals-db:\n    image: postgres:15\n    container_name: rentals-db\n    environment:\n      POSTGRES_DB: rentals\n      POSTGRES_USER: rentals_user\n      POSTGRES_PASSWORD: rentals_pass\n    volumes:\n      - rentals_db_data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U rentals_user -d rentals\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    # networks:\n    #   - backend\n\n  rentals-migrate:\n    build: ./services/rentals\n    container_name: rentals-migrate\n    env_file: ./services/rentals/.env\n    command: alembic upgrade head\n    depends_on:\n      rentals-db:\n        condition: service_healthy\n    restart: \"no\"\n    # networks:\n    #   - backend\n\n  rentals:\n    build: ./services/rentals\n    container_name: rentals-service\n    env_file: ./services/rentals/.env\n    ports:\n      - \"8003:8000\"                     # API Rentals\n    restart: unless-stopped\n    depends_on:\n      rentals-migrate:\n        condition: service_completed_successfully\n      catalog:\n        condition: service_started\n    # networks:\n    #   - backend\n\n  # ────────────── UPLOAD ────────────────────────────────────────────────────────\n  upload:\n    build: ./services/upload\n    container_name: upload-service\n    env_file: ./services/upload/.env\n    environment:\n      - JWT_SECRET=${JWT_SECRET}        # misma clave que Auth\n    volumes:\n      - uploads_data:/app/uploads       # carpeta de imágenes\n    ports:\n      - \"8004:8000\"                     # API Upload\n    restart: unless-stopped\n    depends_on:\n      auth:\n        condition: service_started\n    # networks:\n    #   - backend\n\n  # ────────────── PAYMENTS (Stripe) ─────────────────────────────────────────────\n  payments:\n    build: ./services/payments\n    container_name: payments-service\n    env_file: ./services/payments/.env\n    ports:\n      - \"8005:8000\"                     # API Payments\n    restart: unless-stopped\n    depends_on:\n      auth:\n        condition: service_started\n    # networks:\n    #   - backend\n\n  # ────────────── FRONTEND SPA ──────────────────────────────────────────────────\n  frontend:\n    build:\n      context: ./services/frontend\n      dockerfile: Dockerfile\n    container_name: frontend-service\n    ports:\n      - \"80:80\"                         # UI pública\n    restart: unless-stopped\n    depends_on:\n      - auth\n      - catalog\n      - rentals\n      - upload\n      - payments\n    # networks:\n    #   - backend\n\n# ─────────────────────────────────── VOLUMES ────────────────────────────────────\nvolumes:\n  auth_db_data:\n  catalog_db_data:\n  rentals_db_data:\n  uploads_data:\n\n# ────────────────────────────────── (opt) NETWORKS ──────────────────────────────\n# networks:\n#   backend:\n#     driver: bridge\n",
    "rental-mvp-micro/.env": "JWT_SECRET=SuperClaveUltraSecreta        \n",
    "rental-mvp-micro/services/auth/requirements.txt": "# services/auth/requirements.txt\n# Copiamos sólo las dependencias necesarias para Auth\nfastapi==0.116.0\nuvicorn==0.35.0\npydantic==2.11.7\npydantic-core==2.33.2\npydantic-settings==2.10.1\nSQLAlchemy==2.0.41\npython-jose[cryptography]==3.5.0\npasslib==1.7.4\nbcrypt==3.2.2\npython-dotenv==1.1.1\n# extras (opcional para rendimiento)\nuvloop==0.21.0\nhttptools==0.6.4\nemail-validator==2.1.1    \npython-multipart\npsycopg2-binary==2.9.6\nalembic==1.16.4",
    "rental-mvp-micro/services/auth/.env": "# services/auth/.env\nDATABASE_URL=postgresql+psycopg2://auth_user:auth_pass@auth-db:5432/auth\nSECRET_KEY=SuperClaveUltraSecreta\n",
    "rental-mvp-micro/services/auth/Dockerfile": "FROM python:3.12-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    build-essential libffi-dev libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nENV PYTHONPATH=/app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# código, migraciones y configuración\nCOPY app/ ./app\nCOPY alembic.ini .\nCOPY migrations/ ./migrations\nCOPY .env .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "rental-mvp-micro/services/auth/alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = migrations\n\n# template used to generate migration files\n# file_template = %%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to migrations/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# alembic.ini\nsqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}\n\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n",
    "rental-mvp-micro/services/auth/migrations/script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n",
    "rental-mvp-micro/services/auth/migrations/README": "Generic single-database configuration.",
    "rental-mvp-micro/services/auth/migrations/env.py": "# migrations/env.py\n\"\"\"Alembic migration environment for the Auth service.\"\"\"\n\nfrom __future__ import annotations\n\nfrom logging.config import fileConfig\n\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\n\n# ────────────────────────────────────────────────────────\n# 1. Configuración y logging\n# ────────────────────────────────────────────────────────\nconfig = context.config\nfileConfig(config.config_file_name)\n\n# ────────────────────────────────────────────────────────\n# 2. Metadata de modelos  → autogenerate\n# ────────────────────────────────────────────────────────\nfrom app.models.models import Base  # importa las tablas\ntarget_metadata = Base.metadata\n\n# (opcional, pero aconsejado: convenciones de nombres)\ntarget_metadata.naming_convention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\n\n# ────────────────────────────────────────────────────────\n# 3. URL de conexión: utiliza la misma que tu servicio\n# ────────────────────────────────────────────────────────\nfrom app.core.config import settings  # noqa: E402\n\nconfig.set_main_option(\"sqlalchemy.url\", settings.DATABASE_URL)\n\n# ────────────────────────────────────────────────────────\n# 4. Hooks offline / online\n# ────────────────────────────────────────────────────────\ndef run_migrations_offline() -> None:\n    \"\"\"Genera SQL sin tocar la BD (alembic upgrade --sql).\"\"\"\n    context.configure(\n        url=config.get_main_option(\"sqlalchemy.url\"),\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n        compare_type=True,\n        compare_server_default=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Aplica las migraciones sobre la BD.\"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True,\n            compare_server_default=True,\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n",
    "rental-mvp-micro/services/auth/migrations/versions/20250712_init.py": "\"\"\"tabla users inicial\n\nRevision ID: 20250712_init\nRevises:\nCreate Date: 2025-07-12 00:00:00\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n# revision identifiers, used by Alembic.\nrevision = \"20250712_init\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade() -> None:\n    op.create_table(\n        \"users\",\n        sa.Column(\"id\", sa.Integer(), primary_key=True, nullable=False),\n        sa.Column(\"username\", sa.String(), nullable=False),\n        sa.Column(\"email\", sa.String(), nullable=False),\n        sa.Column(\"hashed_pw\", sa.String(), nullable=False),\n        sa.UniqueConstraint(\"username\"),\n        sa.UniqueConstraint(\"email\"),\n    )\n    op.create_index(\"ix_users_username\", \"users\", [\"username\"])\n    op.create_index(\"ix_users_email\", \"users\", [\"email\"])\n\n\ndef downgrade() -> None:\n    op.drop_index(\"ix_users_email\", table_name=\"users\")\n    op.drop_index(\"ix_users_username\", table_name=\"users\")\n    op.drop_table(\"users\")\n",
    "rental-mvp-micro/services/auth/app/main.py": "# services/auth/app/main.py\nfrom fastapi import FastAPI\n\nfrom app.api import auth                     # rutas\nfrom app.models.database import Base, engine\nimport app.models.models                     # importa modelos (no eliminar)  noqa: F401\n\napp = FastAPI(\n    title=\"rental-mvp – Auth Service\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    openapi_url=\"/openapi.json\",\n)\n\n# ────────────────────────────────────────────────────────────────\n#  Crea las tablas si aún no existen (solo útil en entornos de\n#  desarrollo o en tests.  En prod usarás `alembic upgrade head`).\n# ────────────────────────────────────────────────────────────────\n@app.on_event(\"startup\")\ndef _init_db() -> None:\n    Base.metadata.create_all(bind=engine)\n\n# rutas REST\napp.include_router(auth.router, prefix=\"/api/auth\", tags=[\"auth\"])\n",
    "rental-mvp-micro/services/auth/app/__init__.py": "",
    "rental-mvp-micro/services/auth/app/deps.py": "# services/auth/app/deps.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom sqlalchemy.orm import Session\n\nfrom app.models.database import SessionLocal\nfrom app.core.config import settings\nfrom app.crud import user as crud\nfrom app.schemas.user import UserOut\n\n# ──────────── DB session ────────────\ndef get_db() -> Session:\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n# ──────────── Auth helper ───────────\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"/api/auth/token\"   # el prefijo '/api/auth' se añade en main.py\n)\n\n\ndef get_current_user(\n    token: str = Depends(oauth2_scheme),\n    db: Session = Depends(get_db),\n) -> UserOut:\n    \"\"\"\n    Valida el JWT y devuelve el usuario asociado.\n    Lanza 401 si es inválido o no existe.\n    \"\"\"\n    cred_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Credenciales no válidas\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        username: str | None = payload.get(\"sub\")\n        if not username:\n            raise cred_exc\n    except JWTError:\n        raise cred_exc\n\n    user = crud.get_user_by_username(db, username)\n    if not user:\n        raise cred_exc\n    return user\n",
    "rental-mvp-micro/services/auth/app/models/models.py": "from sqlalchemy import Column, Integer, String\nfrom app.models.database import Base   # usa SIEMPRE la misma Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id        = Column(Integer, primary_key=True)\n    username  = Column(String, unique=True, index=True, nullable=False)\n    email     = Column(String, unique=True, index=True, nullable=False)\n    hashed_pw = Column(String, nullable=False)\n",
    "rental-mvp-micro/services/auth/app/models/__init__.py": "",
    "rental-mvp-micro/services/auth/app/models/database.py": "# services/auth/app/models/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\nconnect_args = {\"check_same_thread\": False} if settings.DATABASE_URL.startswith(\"sqlite\") else {}\n\nengine = create_engine(\n    settings.DATABASE_URL,\n    connect_args=connect_args,\n    echo=True,\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n",
    "rental-mvp-micro/services/auth/app/schemas/token.py": "# app/schemas/token.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n",
    "rental-mvp-micro/services/auth/app/schemas/__init__.py": "from .user import UserCreate, UserOut  # noqa: F401\n\n__all__ = [\"UserCreate\", \"UserOut\"]\n",
    "rental-mvp-micro/services/auth/app/schemas/user.py": "from pydantic import BaseModel, EmailStr, ConfigDict\n\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n\n    model_config = ConfigDict(from_attributes=True)  # ← en vez del viejo Config\n",
    "rental-mvp-micro/services/auth/app/crud/__init__.py": "# services/auth/app/crud/__init__.py\nfrom .user import (\n    get_user_by_username,\n    get_user_by_email,\n    create_user,\n    verify_password,\n)\n\n__all__ = [\n    \"get_user_by_username\",\n    \"get_user_by_email\",\n    \"create_user\",\n    \"verify_password\",\n]\n",
    "rental-mvp-micro/services/auth/app/crud/user.py": "# app/crud/user.py\nfrom __future__ import annotations\n\nimport bcrypt\nfrom passlib.context import CryptContext\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import User\nfrom app.schemas.user import UserCreate\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# ───────────────────────── helpers privados ──────────────────────────────\n\n\ndef _hash_password(pwd: str) -> str:\n    \"\"\"Devuelve el hash seguro de *pwd* usando passlib/bcrypt.\"\"\"\n    return pwd_context.hash(pwd)\n\n\n# ────────────────────────────── Lectura ───────────────────────────────────\n\n\ndef get_user_by_username(db: Session, username: str) -> User | None:\n    \"\"\"Busca un usuario por *username* (o None si no existe).\"\"\"\n    return db.query(User).filter(User.username == username).first()\n\n\ndef get_user_by_email(db: Session, email: str) -> User | None:\n    \"\"\"Busca un usuario por email (o None si no existe).\"\"\"\n    return db.query(User).filter(User.email == email).first()\n\n\n# ───────────────────────────── Escritura ──────────────────────────────────\n\n\ndef create_user(db: Session, user_in: UserCreate) -> User:\n    \"\"\"\n    Crea un nuevo usuario con contraseña hasheada y lo devuelve.\n    Lanza IntegrityError si el username/email ya existen.\n    \"\"\"\n    db_user = User(\n        username=user_in.username,\n        email=user_in.email,\n        hashed_pw=_hash_password(user_in.password),\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\n# ──────────────────────── Utilidades varias ──────────────────────────────\n\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"\n    Comprueba que *plain_password* coincide con el hash almacenado.\n    Se usa bcrypt directamente para evitar dependencias implícitas.\n    \"\"\"\n    try:\n        return bcrypt.checkpw(plain_password.encode(), hashed_password.encode())\n    except Exception:  # noqa: BLE001\n        # bcrypt lanza ValueError si el hash no es válido\n        return False\n",
    "rental-mvp-micro/services/auth/app/core/__init__.py": "",
    "rental-mvp-micro/services/auth/app/core/config.py": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\nclass Settings(BaseSettings):\n    DATABASE_URL: str\n    SECRET_KEY: str\n    ALGORITHM: str = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60\n\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\nsettings = Settings()        # instancia global\n",
    "rental-mvp-micro/services/auth/app/core/security.py": "# app/core/security.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(subject: str) -> str:\n    to_encode = {\"sub\": subject}\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\n",
    "rental-mvp-micro/services/auth/app/api/auth.py": "# services/auth/app/api/auth.py  (versión corregida y completa)\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.exc import IntegrityError\nfrom sqlalchemy.orm import Session\n\nfrom app.deps import get_db, get_current_user\nfrom app.crud import user as crud\nfrom app.schemas.user import UserCreate, UserOut\nfrom app.schemas.token import Token\nfrom app.core.security import create_access_token\n\nrouter = APIRouter(tags=[\"auth\"])        # ← ¡sin prefix aquí!\n\n\n# ───────────────────────────  SIGN-UP  ────────────────────────────\n@router.post(\n    \"/signup\",\n    response_model=UserOut,\n    status_code=status.HTTP_201_CREATED,\n)\ndef signup(user_in: UserCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Registra un nuevo usuario.\n\n    • 409 si el **username** o el **email** ya existen.\n    \"\"\"\n    try:\n        return crud.create_user(db, user_in)\n    except IntegrityError:\n        db.rollback()\n        # comprobamos cuál de las dos claves únicas falló para un mensaje claro\n        detail = (\n            \"Nombre de usuario en uso\"\n            if crud.get_user_by_username(db, user_in.username)\n            else \"Email ya registrado\"\n        )\n        raise HTTPException(status.HTTP_409_CONFLICT, detail=detail)\n\n\n# ───────────────────────────  LOGIN  ──────────────────────────────\n@router.post(\"/token\", response_model=Token)\ndef login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Intercambia usuario/contraseña por un JWT (password-grant).\n\n    • 401 si las credenciales no son válidas.\n    \"\"\"\n    user = crud.get_user_by_username(db, form_data.username)\n    if not user or not crud.verify_password(form_data.password, user.hashed_pw):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Usuario o contraseña incorrectos\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    access_token = create_access_token(subject=user.username)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n# ───────────────────────────  WHO AM I?  ─────────────────────────\n@router.get(\"/users/me\", response_model=UserOut)\ndef read_users_me(current_user: UserOut = Depends(get_current_user)):\n    \"\"\"Devuelve **id, username y email** asociados al token actual.\"\"\"\n    return current_user\n\n\n# alias corto opcional\nrouter.get(\"/me\", response_model=UserOut)(read_users_me)\n",
    "rental-mvp-micro/services/auth/app/api/__init__.py": "",
    "rental-mvp-micro/services/frontend/index.html": "<!DOCTYPE html>\n<html lang=\"es\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <title>Rental-MVP</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n",
    "rental-mvp-micro/services/frontend/package.json": "{\n  \"name\": \"rental-mvp-frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" --max-warnings=0 --fix\"\n  },\n  \"dependencies\": {\n    \"@headlessui/react\": \"^2.2.4\",\n    \"@heroicons/react\": \"^2.2.0\",\n    \"@hookform/resolvers\": \"^3.3.4\",\n    \"@stripe/stripe-js\": \"^1.53.0\",\n    \"@stripe/react-stripe-js\": \"^2.3.0\",           \n    \"@tanstack/react-query\": \"^5.38.0\",\n    \"axios\": \"^1.6.8\",\n    \"clsx\": \"^2.1.1\",\n    \"focus-trap-react\": \"^10.2.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.60.0\",\n    \"react-hot-toast\": \"^2.5.2\",\n    \"react-icons\": \"^5.5.0\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"zod\": \"^3.23.4\",\n    \"zxcvbn\": \"^4.4.2\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/container-queries\": \"\",\n    \"@tailwindcss/forms\": \"^0.5.10\",\n    \"@tailwindcss/line-clamp\": \"^0.4.4\",\n    \"@tailwindcss/typography\": \"^0.5.16\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.18.0\",\n    \"@typescript-eslint/parser\": \"^7.18.0\",\n    \"@vitejs/plugin-react\": \"^4.2.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"postcss\": \"^8.4.38\",\n    \"tailwindcss\": \"^3.4.4\",\n    \"typescript\": \"^5.5.0\",\n    \"vite\": \"^5.3.1\"\n  }\n}\n",
    "rental-mvp-micro/services/frontend/vite.config.ts": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5173,\n    proxy: {\n      \"/api/auth\":       \"http://localhost:8001\",\n      \"/api/items\":      \"http://localhost:8002\",\n      \"/api/categories\": \"http://localhost:8002\",\n      \"/api/rentals\":    \"http://localhost:8003\",\n      \"/api/upload\":     \"http://localhost:8004\",\n      \"/api/payments\":   \"http://localhost:8005\",\n      \"/uploads\":        \"http://localhost:8004\"\n    }\n  }\n});\n",
    "rental-mvp-micro/services/frontend/.env": "VITE_STRIPE_PK=pk_test_51RkNe1BAdmER2zaJNEdcxq6T7uBwtyGDiHaFRF5I9LjGGbbYxmvPfdffr4HLqZy753gB6ixJRFfu7HXRsntuCGyH00szhzRTcx\nVITE_API_URL=http://localhost\n",
    "rental-mvp-micro/services/frontend/Dockerfile": "# ───────────── Etapa 1: build Vite ─────────────\nFROM node:20 AS builder\nWORKDIR /frontend\n\nCOPY package.json package-lock.json* ./\nRUN npm ci\n\nCOPY . .\nRUN npm run build          # genera /frontend/dist\n\n# ───────────── Etapa 2: Nginx ─────────────\nFROM nginx:1.27-alpine\n\n# Copia estáticos compilados\nCOPY --from=builder /frontend/dist /usr/share/nginx/html\n\n# Proxy /api → backend\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n",
    "rental-mvp-micro/services/frontend/nginx.conf": "server {\n    listen 80;\n    server_name _;\n\n    # --------- estáticos Vite ---------\n    root /usr/share/nginx/html;\n    index index.html;\n    client_max_body_size 100M;\n\n    location / {\n        # Single-Page-App → fallback al index.html\n        try_files $uri $uri/ /index.html;\n    }\n\n    # --------- proxy API (micro-servicios) ---------\n    location /api/auth/       { proxy_pass http://auth:8000; }\n    location /api/items/      { proxy_pass http://catalog:8000; }\n    location /api/categories/ { proxy_pass http://catalog:8000; }\n    location /api/rentals/    { proxy_pass http://rentals:8000; }\n    location /api/upload/     { proxy_pass http://upload:8000; }\n    location /api/payments/   { proxy_pass http://payments:8000; }\n\n    # --------- ficheros subidos ---------\n    location /uploads/        { proxy_pass http://upload:8000; }\n\n    # --------- cabeceras comunes ---------\n    location /api/ {\n        proxy_set_header Host            $host;\n        proxy_set_header X-Real-IP       $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n",
    "rental-mvp-micro/services/frontend/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2022\",\n        \"lib\": [\n            \"DOM\",\n            \"DOM.Iterable\",\n            \"ES2022\"\n        ],\n        \"module\": \"ESNext\",\n        \"moduleResolution\": \"Node\",\n        \"types\": [\n            \"vite/client\"\n        ],\n        \"strict\": true,\n        \"jsx\": \"react-jsx\",\n        \"resolveJsonModule\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true\n    },\n    \"include\": [\n        \"src\"\n    ]\n}",
    "rental-mvp-micro/services/frontend/postcss.config.js": "// rental-mvp/frontend/postcss.config.js\nexport default {\n    plugins: {\n        tailwindcss: {},\n        autoprefixer: {}\n    }\n};\n",
    "rental-mvp-micro/services/frontend/tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./index.html', './src/**/*.{ts,tsx}'],\n    theme: {\n        //   ↓↓↓ breakpoints fluidos\n        screens: {\n            xs: '375px',\n            sm: '640px',\n            md: '768px',\n            lg: '1024px',\n            xl: '1280px',\n            '2xl': '1440px',\n            '3xl': '1920px'\n        },\n        container: { center: true, padding: '1rem' },\n        extend: {\n            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },\n            colors: {\n                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },\n                surface: '#ffffff'\n            },\n            boxShadow: {\n                card: '0 1px 3px rgba(0,0,0,.08)',\n                cardHover: '0 4px 12px rgba(0,0,0,.12)'\n            }\n        }\n    },\n    plugins: [\n        require('@tailwindcss/forms'),\n        require('@tailwindcss/typography'),\n        require('@tailwindcss/line-clamp'),\n        require('@tailwindcss/container-queries') // 🆕\n    ]\n};\n",
    "rental-mvp-micro/services/frontend/src/App.tsx": "// src/App.tsx\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { AuthProvider } from \"./hooks/useAuth\";\n\nimport Header from \"./components/layout/Header\";\nimport Footer from \"./components/layout/Footer\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Protected from \"./Protected\";\n\nimport \"./styles/global.css\";\n\n/* ─── Stripe ─────────────────────────────────────────────────────────── */\nconst stripePromise = loadStripe(\n  import.meta.env.VITE_STRIPE_PK as string /* pk_test_xxx */\n);\n/* ─────────────────────────────────────────────────────────────────────── */\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <Elements stripe={stripePromise}>\n          <BrowserRouter>\n            <ErrorBoundary>\n              <Header />\n\n              <Suspense\n                fallback={\n                  <p className=\"py-32 text-center text-gray-500\">Cargando…</p>\n                }\n              >\n                <Routes>\n                  <Route path=\"/\" element={<Home />} />\n                  <Route path=\"/login\" element={<Login />} />\n                  <Route path=\"/register\" element={<Register />} />\n                  {/* ---------- RUTA PROTEGIDA ---------- */}\n                  <Route\n                    path=\"/dashboard\"\n                    element={\n                      <Protected>\n                        <Dashboard />\n                      </Protected>\n                    }\n                  />\n                </Routes>\n              </Suspense>\n\n              <Footer />\n            </ErrorBoundary>\n          </BrowserRouter>\n        </Elements>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/api.ts": "import axios from \"axios\";\n\n/**\n * Singleton Axios con:\n *  · baseURL \"/api\"\n *  · Authorization automático si hay token en localStorage\n */\nexport const api = axios.create({ baseURL: \"/api\" });\n\napi.interceptors.request.use(cfg => {\n  const token = localStorage.getItem(\"token\");\n  if (token) cfg.headers.Authorization = `Bearer ${token}`;\n  return cfg;\n});\n",
    "rental-mvp-micro/services/frontend/src/ErrorBoundary.tsx": "import React, { ErrorInfo, ReactNode } from \"react\";\n\ntype Props = { children: ReactNode };\ntype State = { hasError: boolean };\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  state: State = { hasError: false };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    // Aquí podrías enviar logs a Sentry, LogRocket, etc.\n    console.error(\"⛔ Unhandled error:\", error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <main className=\"flex min-h-[60vh] items-center justify-center\">\n          <p className=\"rounded-md bg-red-50 p-6 text-center text-lg text-red-600 shadow\">\n            ¡Ups! Algo ha ido mal.<br />\n            Intenta recargar la página.\n          </p>\n        </main>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n",
    "rental-mvp-micro/services/frontend/src/main.tsx": "// src/main.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { Toaster } from 'react-hot-toast';          // 🆕\nimport './styles/global.css';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n    <Toaster                                         // 🆕\n      position=\"top-right\"\n      toastOptions={{\n        style: { fontSize: '0.875rem' },            // 14 px\n        duration: 3000\n      }}\n    />\n  </React.StrictMode>\n);\n",
    "rental-mvp-micro/services/frontend/src/utils.ts": "// utils.ts\n/**\n * URL base de la API.  Ajusta en .env.local si no usas localhost:8000\n *   VITE_API_BASE_URL=https://tu-dominio.com\n */\nexport const API_BASE =\n  import.meta.env.VITE_API_BASE_URL ?? window.location.origin;\n\n/**  \n * Devuelve una URL de imagen válida.\n * - Si ya es absoluta → la deja tal cual.\n * - Si empieza por “/” → la concatena con API_BASE.\n * - Si viene `undefined` → usa el *fallback*.\n */\nexport function resolveImage(url: string | undefined, fallback: string) {\n  if (!url) return fallback;\n  if (/^https?:\\/\\//i.test(url)) return url; // absoluta\n  return `${API_BASE}${url.startsWith(\"/\") ? \"\" : \"/\"}${url}`;\n}\n",
    "rental-mvp-micro/services/frontend/src/Protected.tsx": "import { Navigate, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"./hooks/useAuth\";\n\nexport default function Protected({ children }: { children: JSX.Element }) {\n  const { token } = useAuth();\n  const loc = useLocation();\n  return token ? children : <Navigate to=\"/login\" replace state={{ from: loc }} />;\n}\n",
    "rental-mvp-micro/services/frontend/src/assets/payments/paypal.svg": "<?xml version=\"1.0\" encoding=\"utf-8\"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"24\" cy=\"24\" r=\"20\" fill=\"#0070BA\"/>\n<path d=\"M32.3305 18.0977C32.3082 18.24 32.2828 18.3856 32.2542 18.5351C31.2704 23.5861 27.9046 25.331 23.606 25.331H21.4173C20.8916 25.331 20.4486 25.7127 20.3667 26.2313L19.2461 33.3381L18.9288 35.3527C18.8755 35.693 19.1379 36 19.4815 36H23.3634C23.8231 36 24.2136 35.666 24.286 35.2127L24.3241 35.0154L25.055 30.3772L25.1019 30.1227C25.1735 29.6678 25.5648 29.3338 26.0245 29.3338H26.6051C30.3661 29.3338 33.3103 27.8068 34.1708 23.388C34.5303 21.5421 34.3442 20.0008 33.393 18.9168C33.1051 18.59 32.748 18.3188 32.3305 18.0977Z\" fill=\"white\" fill-opacity=\"0.6\"/>\n<path d=\"M31.3009 17.6871C31.1506 17.6434 30.9955 17.6036 30.8364 17.5678C30.6766 17.5328 30.5127 17.5018 30.3441 17.4748C29.754 17.3793 29.1074 17.334 28.4147 17.334H22.5676C22.4237 17.334 22.2869 17.3666 22.1644 17.4254C21.8948 17.5551 21.6944 17.8104 21.6459 18.1229L20.402 26.0013L20.3662 26.2311C20.4481 25.7126 20.8911 25.3308 21.4168 25.3308H23.6055C27.9041 25.3308 31.2699 23.5851 32.2537 18.5349C32.2831 18.3854 32.3078 18.2398 32.33 18.0975C32.0811 17.9655 31.8115 17.8525 31.5212 17.7563C31.4496 17.7324 31.3757 17.7094 31.3009 17.6871Z\" fill=\"white\" fill-opacity=\"0.8\"/>\n<path d=\"M21.6461 18.1231C21.6946 17.8105 21.895 17.5552 22.1646 17.4264C22.2879 17.3675 22.4239 17.3349 22.5678 17.3349H28.4149C29.1077 17.3349 29.7542 17.3803 30.3444 17.4757C30.513 17.5027 30.6768 17.5338 30.8367 17.5687C30.9957 17.6045 31.1508 17.6443 31.3011 17.688C31.3759 17.7103 31.4498 17.7334 31.5222 17.7564C31.8125 17.8527 32.0821 17.9664 32.331 18.0976C32.6237 16.231 32.3287 14.9601 31.3194 13.8093C30.2068 12.5424 28.1986 12 25.629 12H18.169C17.6441 12 17.1963 12.3817 17.1152 12.9011L14.0079 32.5969C13.9467 32.9866 14.2473 33.3381 14.6402 33.3381H19.2458L20.4022 26.0014L21.6461 18.1231Z\" fill=\"white\"/>\n</svg>",
    "rental-mvp-micro/services/frontend/src/assets/payments/mastercard.svg": "<?xml version=\"1.0\" encoding=\"utf-8\"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 -11 70 70\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"0.5\" y=\"0.5\" width=\"69\" height=\"47\" rx=\"5.5\" fill=\"white\" stroke=\"#D9D9D9\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M35.3945 34.7619C33.0114 36.8184 29.92 38.0599 26.5421 38.0599C19.0047 38.0599 12.8945 31.8788 12.8945 24.254C12.8945 16.6291 19.0047 10.448 26.5421 10.448C29.92 10.448 33.0114 11.6895 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z\" fill=\"#ED0006\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M35.3945 34.7619C38.3289 32.2296 40.1896 28.4616 40.1896 24.254C40.1896 20.0463 38.3289 16.2783 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z\" fill=\"#F9A000\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M35.3946 13.7461C38.329 16.2784 40.1897 20.0463 40.1897 24.254C40.1897 28.4616 38.329 32.2295 35.3946 34.7618C32.4603 32.2295 30.5996 28.4616 30.5996 24.254C30.5996 20.0463 32.4603 16.2784 35.3946 13.7461Z\" fill=\"#FF5E00\"/>\n</svg>",
    "rental-mvp-micro/services/frontend/src/assets/payments/visa.svg": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->\n<svg width=\"800px\" height=\"800px\" viewBox=\"0 -139.5 750 750\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    \n    <desc>Created with Sketch.</desc>\n    <defs>\n\n</defs>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"visa\" fill=\"#393939\" fill-rule=\"nonzero\">\n            <path d=\"M52.8846154,28.2035928 C39.6085397,28.2035928 28.8461538,38.7262417 28.8461538,51.7065868 L28.8461538,419.293413 C28.8461538,432.273758 39.6085397,442.796407 52.8846154,442.796407 L697.115385,442.796407 C710.39146,442.796407 721.153846,432.273758 721.153846,419.293413 L721.153846,51.7065868 C721.153846,38.7262417 710.39146,28.2035928 697.115385,28.2035928 L52.8846154,28.2035928 Z M52.8846154,0 L697.115385,0 C726.322751,-5.0099645e-15 750,23.1498275 750,51.7065868 L750,419.293413 C750,447.850173 726.322751,471 697.115385,471 L52.8846154,471 C23.6772488,471 3.41607085e-15,447.850173 0,419.293413 L0,51.7065868 C-3.41607085e-15,23.1498275 23.6772488,5.0099645e-15 52.8846154,0 Z\" id=\"outline\">\n\n</path>\n            <g id=\"Logo\" transform=\"translate(60.000000, 139.000000)\">\n                <polygon id=\"Shape\" points=\"222.597614 191.12625 254.442205 4.26252273 305.375795 4.26252273 273.50925 191.12625\">\n\n</polygon>\n                <path d=\"M457.520795,8.29261364 C447.429341,4.50688636 431.61825,0.444340909 411.871568,0.444340909 C361.544114,0.444340909 326.092295,25.7884773 325.790659,62.1117955 C325.507159,88.9622045 351.099477,103.940932 370.419477,112.879295 C390.244432,122.038159 396.910023,127.879977 396.815523,136.058523 C396.689523,148.584068 380.983432,154.306568 366.343568,154.306568 C345.957341,154.306568 335.127068,151.474432 318.400568,144.497659 L311.837114,141.527114 L304.688523,183.359114 C316.585023,188.57475 338.583477,193.094523 361.424795,193.328386 C414.964295,193.328386 449.721205,168.274432 450.116386,129.486477 C450.30825,108.229705 436.738432,92.0520682 407.353705,78.7161136 C389.550477,70.07175 378.647659,64.3034318 378.763159,55.55025 C378.763159,47.7831136 387.991705,39.4776136 407.931205,39.4776136 C424.587068,39.2189318 436.651568,42.8509773 446.051932,46.6367045 L450.616568,48.7930227 L457.520795,8.29261364\" id=\"Shape\">\n\n</path>\n                <path d=\"M588.586568,4.26252273 L549.229705,4.26252273 C537.037295,4.26252273 527.91375,7.59006818 522.55875,19.7586136 L446.915795,191.006932 L500.399932,191.006932 C500.399932,191.006932 509.145477,167.981386 511.123295,162.926114 C516.967977,162.926114 568.924841,163.006295 576.353114,163.006295 C577.876568,169.547795 582.550023,191.006932 582.550023,191.006932 L629.811477,191.006932 L588.586568,4.26252273 Z M526.143068,124.92375 C530.355477,114.157432 546.43575,72.6881591 546.43575,72.6881591 C546.135068,73.1854773 550.616659,61.8693409 553.189159,54.8534318 L556.632205,70.96425 C556.632205,70.96425 566.384795,115.569205 568.42275,124.922795 L526.143068,124.922795 L526.143068,124.92375 Z\" id=\"Path\">\n\n</path>\n                <path d=\"M179.361477,4.26252273 L129.496023,131.689568 L124.183023,105.793705 C114.900068,75.94125 85.9773409,43.5993409 53.6430682,27.4073864 L99.2388409,190.828432 L153.127705,190.766386 L233.313341,4.26252273 L179.361477,4.26252273\" id=\"Path\">\n\n</path>\n                <path d=\"M82.9686136,4.26252273 L0.838568182,4.26252273 L0.188522727,8.15038636 C64.0848409,23.6178409 106.364523,60.9968864 123.914795,105.909205 L106.056205,20.0382955 C102.973023,8.20575 94.0308409,4.67488636 82.9686136,4.26252273\" id=\"Shape\">\n\n</path>\n            </g>\n        </g>\n    </g>\n</svg>",
    "rental-mvp-micro/services/frontend/src/hooks/useAuth.tsx": "import React, { createContext, useContext, useState } from \"react\";\n\n/* ------------------------------------------------------------------ */\n/*                       Contexto & proveedor                         */\n/* ------------------------------------------------------------------ */\ntype AuthContextT = {\n  token: string | null;\n  login: (t: string) => void;\n  logout: () => void;\n};\nconst AuthContext = createContext<AuthContextT | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children\n}) => {\n  const [token, setToken] = useState<string | null>(\n    () => localStorage.getItem(\"token\")\n  );\n\n  const login = (t: string) => {\n    localStorage.setItem(\"token\", t);\n    setToken(t);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n/* ------------------------------------------------------------------ */\n/*                           Hooks util                               */\n/* ------------------------------------------------------------------ */\nexport const useAuth = () => {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error(\"useAuth debe usarse dentro de <AuthProvider>\");\n  return ctx;\n};\n\n/** Lee el token directo de localStorage (válido fuera de React). */\nexport const getTokenLS = () => localStorage.getItem(\"token\");\n",
    "rental-mvp-micro/services/frontend/src/hooks/useStripe.ts": "// src/hooks/useStripe.ts\nimport { loadStripe, Stripe } from \"@stripe/stripe-js\";\nimport { useEffect, useState } from \"react\";\n\nexport function useStripe() {\n  const [stripe, setStripe] = useState<Stripe | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      const pk = import.meta.env.VITE_STRIPE_PK;\n      if (pk && !stripe) {\n        const s = await loadStripe(pk);\n        setStripe(s);\n      }\n    })();\n  }, [stripe]);\n\n  return stripe;\n}\n",
    "rental-mvp-micro/services/frontend/src/styles/global.css": "/* frontend/src/styles/global.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ---------- BASE ---------- */\n@layer base {\n  html { @apply scroll-smooth; }\n  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }\n}\n\n/* ---------- COMPONENTS ---------- */\n@layer components {\n  /* Botones */\n  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-brand-hover disabled:opacity-60; }\n  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-colors hover:bg-brand/5; }\n\n  /* Badges */\n  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }\n  .badge--ok     { @apply badge bg-green-100 text-green-800; }\n  .badge--danger { @apply badge bg-red-100 text-red-800; }\n\n  /* Campos select genérico */\n  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand; }\n\n  /* Toast */\n  .toast-success { @apply bg-green-600 text-white; }\n  .toast-error   { @apply bg-red-600 text-white; }\n\n  /* Títulos fluidos (ejemplo h1) */\n  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px → 56 px aprox */\n}\n\n/* ---------- UTILITIES PERSONALIZADAS ---------- */\n@layer utilities {\n  .text-balance { text-wrap: balance; }\n\n  /* Evita re-pintados innecesarios en grandes listas */\n  .content-auto { content-visibility: auto; }\n\n  /* Oculta scrollbar (usarlo con cuidado) */\n  .scrollbar-none::-webkit-scrollbar { display: none; }\n}\n",
    "rental-mvp-micro/services/frontend/src/features/auth/register.ts": "import { api } from \"../../api\";\n\n/** Lanza 400 si el username o el email ya están en uso. */\nexport async function register(\n  username: string,\n  email: string,\n  password: string\n): Promise<void> {\n  await api.post(\"/auth/signup\", { username, email, password });\n}\n",
    "rental-mvp-micro/services/frontend/src/features/auth/login.ts": "import { api } from \"../../api\";\n\nexport async function login(username: string, password: string): Promise<string> {\n  const { data } = await api.post(\n    \"/auth/token\",\n    new URLSearchParams({ username, password }),\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n  );\n  return data.access_token as string;\n}\n",
    "rental-mvp-micro/services/frontend/src/features/categories/useCategories.ts": "import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\n\nexport type Category = { id: number; name: string };\n\nexport default function useCategories() {\n  const { data, isLoading } = useQuery<Category[]>({\n    queryKey: [\"categories\"],\n    queryFn: () => api.get<Category[]>(\"/categories/\").then(r => r.data),\n    staleTime: 5 * 60_000 // 5 min\n  });\n\n  return { data: data ?? [], loading: isLoading };\n}\n",
    "rental-mvp-micro/services/frontend/src/features/items/useItems.ts": "import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\n\nexport type Item = {\n  id: number;\n  name: string;\n  description?: string;\n  price_per_h: number;\n  available: boolean;\n\n  /* ---- imágenes ---- */\n  /** 1 sola (compat.) */\n  image_url?: string;\n  /** varias (nuevo)   */\n  image_urls?: string[];\n\n  categories?: { id: number; name: string }[];\n};\n\nexport function useItems(params?: URLSearchParams) {\n  const queryKey = [\"items\", params?.toString() ?? \"\"];\n\n  const { data, isLoading, refetch } = useQuery<Item[]>({\n    queryKey,\n    queryFn: () =>\n      api.get<Item[]>(\"/items/\", { params }).then(r => r.data),\n    staleTime: 60_000 // 1 min sin refetch\n  });\n\n  return { data: data ?? [], loading: isLoading, refetch };\n}\n",
    "rental-mvp-micro/services/frontend/src/features/items/AddItemModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/features/items/AddItemModal.tsx                                       */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useEffect, useState } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { XMarkIcon, PhotoIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport toast from 'react-hot-toast';\n\nimport useCategories, { Category } from '../categories/useCategories';\nimport { useAuth } from '../../hooks/useAuth';\nimport { api } from '../../api';\n\n/* -------------------------------------------------------------------------- */\n/*                               schema + types                               */\n/* -------------------------------------------------------------------------- */\n\nconst MB = 1024 * 1024;\nconst MAX_IMAGES = 6;\n\nconst priceRegex = /^\\d+([.,]\\d{1,2})?$/; // hasta 2 decimales\n\nconst schema = z.object({\n  name: z.string().min(3, 'Mínimo 3 caracteres'),\n  description: z.string().max(500).optional(),\n  price_per_h: z\n    .string()\n    .regex(priceRegex, 'Precio inválido')\n    .transform(v => Number(v.replace(',', '.'))),\n  categories: z.array(z.number()).min(1, 'Selecciona al menos una categoría'),\n  images: z\n    .array(\n      z\n        .instanceof(File)\n        .refine(f => f.size <= 5 * MB, 'Cada imagen máx. 5 MB')\n    )\n    .min(1, 'Al menos 1 imagen')\n    .max(MAX_IMAGES, `Máx. ${MAX_IMAGES} imágenes`)\n});\n\ntype FormData = z.infer<typeof schema>;\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  onCreated: () => void; // callback para refrescar listado\n};\n\n/* -------------------------------------------------------------------------- */\n/*                           Componente principal                             */\n/* -------------------------------------------------------------------------- */\nexport default function AddItemModal({ open, onClose, onCreated }: Props) {\n  const { data: cats } = useCategories();\n  const { token } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    setValue,\n    formState: { errors, isSubmitting }\n  } = useForm<FormData>({\n    resolver: zodResolver(schema),\n    defaultValues: { categories: [], images: [] }\n  });\n\n  /* --------------------------- previews dinámicos -------------------------- */\n  const files = watch('images'); // File[]\n  const [previews, setPreviews] = useState<string[]>([]);\n\n  useEffect(() => {\n    const urls = files.map(f => URL.createObjectURL(f));\n    setPreviews(urls);\n    return () => urls.forEach(URL.revokeObjectURL); // cleanup\n  }, [files]);\n\n  /* ------------------------------- submit --------------------------------- */\n  async function onSubmit(data: FormData) {\n    if (!token) {\n      toast.error('Debes haber iniciado sesión');\n      return;\n    }\n\n    try {\n      /* 1.- subimos imágenes (paralelo) */\n      let image_urls: string[] = [];\n      if (data.images.length) {\n        const uploads = await Promise.all(\n          data.images.map(async img => {\n            const fd = new FormData();\n            fd.append('file', img);\n            const r = await api.post<{ url: string }>('/upload/', fd, {\n              headers: { 'Content-Type': 'multipart/form-data' }\n            });\n            return r.data.url;\n          })\n        );\n        image_urls = uploads;\n      }\n\n      /* 2.- creamos ítem */\n      await api.post('/items/', {\n        name: data.name,\n        description: data.description,\n        price_per_h: data.price_per_h,\n        categories: data.categories,\n        image_urls           // 🔥 ahora array\n      });\n\n      toast.success('¡Producto publicado!');\n      reset();\n      onCreated();\n      onClose();\n    } catch (err: any) {\n      console.error(err);\n      toast.error(err.response?.data?.detail ?? 'Error al crear producto');\n    }\n  }\n\n  /* ------------------------------------------------------------------------ */\n  /*                                   UI                                     */\n  /* ------------------------------------------------------------------------ */\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog\n        onClose={() => {\n          reset();\n          onClose();\n        }}\n        className=\"relative z-50\"\n      >\n        {/* ---------- Backdrop ---------- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---------- Wrapper ---------- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"flex w-full max-w-2xl max-h-[90vh] flex-col overflow-x-hidden rounded-xl bg-white shadow-xl\">\n              {/* ---------- Header ---------- */}\n              <header className=\"flex items-center justify-between border-b px-6 py-4\">\n                <Dialog.Title className=\"text-lg font-semibold\">\n                  Nuevo producto\n                </Dialog.Title>\n                <button\n                  type=\"button\"\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                  onClick={() => {\n                    reset();\n                    onClose();\n                  }}\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              </header>\n\n              {/* ---------- Form (scrollable) ---------- */}\n              <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid flex-1 grid-cols-1 gap-6 overflow-y-auto px-6 py-8 md:grid-cols-2\"\n              >\n                {/* --------------------------- Columna 1 --------------------------- */}\n                <div className=\"space-y-4\">\n                  {/* Nombre */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">Nombre</label>\n                    <input\n                      {...register('name')}\n                      className=\"form-input mt-1 w-full\"\n                      placeholder=\"Taladro Bosch 800 W\"\n                    />\n                    {errors.name && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.name.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Descripción */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Descripción\n                    </label>\n                    <textarea\n                      {...register('description')}\n                      rows={5}\n                      className=\"form-input mt-1 w-full resize-none\"\n                      placeholder=\"Añade detalles técnicos, estado, accesorios incluidos…\"\n                    />\n                    {errors.description && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.description.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Precio */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Precio / hora (€)\n                    </label>\n                    <input\n                      {...register('price_per_h')}\n                      className=\"form-input mt-1 w-full\"\n                      placeholder=\"3.5\"\n                      inputMode=\"decimal\"\n                    />\n                    {errors.price_per_h && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.price_per_h.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* --------------------------- Columna 2 --------------------------- */}\n                <div className=\"space-y-4\">\n                  {/* Imágenes */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Imágenes ({files.length}/{MAX_IMAGES})\n                    </label>\n\n                    {/* zona de drop / input */}\n                    <label className=\"mt-1 flex min-h-[4rem] w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-dashed border-gray-300 p-4 text-center text-sm text-gray-500 hover:border-brand hover:text-brand\">\n                      <PhotoIcon className=\"h-8 w-8\" />\n                      <span className=\"mt-1\">\n                        PNG, JPG · máx. 5 MB c/u · hasta {MAX_IMAGES}\n                      </span>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        multiple\n                        className=\"sr-only\"\n                        onChange={e =>\n                          setValue(\n                            'images',\n                            [...(e.target.files ?? [])] as File[],\n                            { shouldValidate: true }\n                          )\n                        }\n                      />\n                    </label>\n\n                    {/* previews */}\n                    {previews.length > 0 && (\n                      <div className=\"mt-4 grid grid-cols-3 gap-2\">\n                        {previews.map((src, i) => (\n                          <div key={i} className=\"relative\">\n                            <img\n                              src={src}\n                              alt={`preview ${i + 1}`}\n                              className=\"h-24 w-full rounded object-cover\"\n                            />\n                            <button\n                              type=\"button\"\n                              title=\"Eliminar\"\n                              onClick={() => {\n                                const copy = [...files];\n                                copy.splice(i, 1);\n                                setValue('images', copy, { shouldValidate: true });\n                              }}\n                              className=\"absolute right-0 top-0 rounded-bl bg-black/60 p-0.5 text-white transition-colors hover:bg-black/80\"\n                            >\n                              <TrashIcon className=\"h-4 w-4\" />\n                            </button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {errors.images && (\n                      <p className=\"mt-1 text-xs text-red-600\">\n                        {errors.images.message as string}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Categorías */}\n                  <div>\n                    <p className=\"mb-1 text-sm font-medium\">Categorías</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {cats.map((c: Category) => {\n                        const selected = watch('categories').includes(c.id);\n                        return (\n                          <button\n                            type=\"button\"\n                            key={c.id}\n                            onClick={() => {\n                              const current = new Set(watch('categories'));\n                              selected\n                                ? current.delete(c.id)\n                                : current.add(c.id);\n                              setValue('categories', [...current]);\n                            }}\n                            className={\n                              selected\n                                ? 'rounded-full bg-brand px-3 py-0.5 text-xs text-white'\n                                : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'\n                            }\n                          >\n                            {c.name}\n                          </button>\n                        );\n                      })}\n                    </div>\n                    {errors.categories && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.categories.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* --------------------------- Footer --------------------------- */}\n                <div className=\"md:col-span-2 flex justify-end gap-3\">\n                  <button\n                    type=\"button\"\n                    className=\"btn--ghost\"\n                    onClick={() => {\n                      reset();\n                      onClose();\n                    }}\n                  >\n                    Cancelar\n                  </button>\n                  <button className=\"btn\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Publicando…' : 'Publicar'}\n                  </button>\n                </div>\n              </form>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/features/items/ItemList.tsx": "import { useEffect, useMemo, useRef, useState } from 'react';\nimport axios from 'axios';\nimport Container from '../../components/shared/Container';\nimport ItemCard from '../../components/ui/ItemCard';\nimport SkeletonCard from '../../components/ui/SkeletonCard';\nimport FiltersSidebar from '../../components/filters/FiltersSidebar';\nimport { useItems } from './useItems';\nimport { useAuth } from '../../hooks/useAuth';\nimport AddItemModal from './AddItemModal';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\n\n/* -------------------------------------------------- */\n/*                    Tipado filtros                  */\n/* -------------------------------------------------- */\ntype FiltersT = {\n  name?: string;\n  min_price?: number;\n  max_price?: number;\n  categories?: number[];\n  order?: 'price_asc' | 'price_desc' | 'name';\n};\n\nexport default function ItemList() {\n  /* ------------------------------ filtros ------------------------------ */\n  const [filters, setFilters] = useState<FiltersT>({});\n\n  /* Serializamos filtros → query-string */\n  const params = useMemo(() => {\n    const p = new URLSearchParams();\n\n    Object.entries(filters).forEach(([k, v]) => {\n      if (v === undefined || v === '') return;\n      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));\n      else p.set(k, String(v));\n    });\n\n    /* orden (price_asc | price_desc | name) */\n    if (filters.order) {\n      const [field, dir] = filters.order.split('_');\n      p.set('order_by', field === 'price' ? 'price' : 'name');\n      p.set('order_dir', dir);\n    }\n    return p;\n  }, [filters]);\n\n  const { data: items, loading, refetch } = useItems(params);\n  const { token } = useAuth();\n\n  /* ----------------------- drawer móvil filtros ----------------------- */\n  const [openFilters, setOpenFilters] = useState(false);\n\n  /* ------------------------ infinite-scroll demo ---------------------- */\n  const sentinel = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!sentinel.current) return;\n    const ob = new IntersectionObserver(\n      entries => {\n        if (entries[0].isIntersecting && !loading) {\n          /* Aquí podrías paginar → aumentar offset y refetch() */\n        }\n      },\n      { rootMargin: '600px' }\n    );\n    ob.observe(sentinel.current);\n    return () => ob.disconnect();\n  }, [loading]);\n\n  /* ----------------------- modal “añadir ítem” ------------------------ */\n  const [addOpen, setAddOpen] = useState(false);\n\n  /* -------------------------------------------------------------------- */\n  return (\n    <Container>\n      {/* ---------- botón abrir filtros (solo xs-sm) ---------- */}\n      <button onClick={() => setOpenFilters(true)} className=\"btn mb-4 md:hidden\">\n        <Bars3Icon className=\"mr-2 h-5 w-5\" />\n        Filtros\n      </button>\n\n      <div className=\"flex flex-col gap-10 md:flex-row\">\n        {/* ---------- Filtros (off-canvas en móvil) ---------- */}\n        {/* Backdrop */}\n        <div\n          className={`\n            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden\n            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}\n          `}\n          onClick={() => setOpenFilters(false)}\n        />\n\n        {/* Panel */}\n        <aside\n          className={`\n            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform\n            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none\n            ${openFilters ? 'translate-x-0' : '-translate-x-full'}\n          `}\n        >\n          {/* Cerrar (solo móvil) */}\n          <button onClick={() => setOpenFilters(false)} className=\"mb-4 md:hidden\">\n            <XMarkIcon className=\"h-6 w-6\" />\n          </button>\n\n          <FiltersSidebar\n            value={filters}\n            onChange={setFilters}\n            onReset={() => setFilters({})}\n          />\n        </aside>\n\n        {/* -------------------- listado de tarjetas -------------------- */}\n        <section className=\"flex-1\">\n          {/* CTA añadir producto (solo usuarios logueados) */}\n          {token && (\n            <div className=\"flex justify-end\">\n              <button className=\"btn mb-4\" onClick={() => setAddOpen(true)}>\n                Añadir producto\n              </button>\n            </div>\n          )}\n\n          {/* loader inicial */}\n          {loading && !items.length ? (\n            <GridSkeleton />\n          ) : (\n            <Grid>\n              {items.map(it => (\n                <ItemCard key={it.id} item={it} />\n              ))}\n              {/* sentinel infinite-scroll */}\n              <div ref={sentinel} />\n            </Grid>\n          )}\n\n          {/* vacío */}\n          {!loading && !items.length && (\n            <p className=\"py-6 text-center text-gray-500\">No hay resultados.</p>\n          )}\n        </section>\n      </div>\n\n      {/* modal añadir */}\n      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />\n    </Container>\n  );\n}\n\n/* -------------------------------------------------- */\n/*                       Helpers                      */\n/* -------------------------------------------------- */\n\n/* Grid responsive: min-width 12 rem (≈192 px) y se\n   auto-ajusta con container-queries si el padre pasa\n   a ser un “container” — funciona también sin CQ. */\nconst Grid = ({ children }: { children: React.ReactNode }) => (\n  <div\n    className=\"\n      grid gap-6 py-6 content-auto\n      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]\n      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]\n    \"\n  >\n    {children}\n  </div>\n);\n\nconst GridSkeleton = () => (\n  <Grid>\n    {Array.from({ length: 8 }).map((_, i) => (\n      <SkeletonCard key={i} />\n    ))}\n  </Grid>\n);\n",
    "rental-mvp-micro/services/frontend/src/features/rentals/reserve.ts": "/**\n * Orquesta todo el flujo:\n *   1) crea un alquiler              → /api/rentals/\n *   2) pide PaymentIntent a Stripe   → /api/payments/create-intent\n * Devuelve el `client_secret` para confirmar el pago desde el front.\n */\nimport { api } from \"../../api\";\n\nexport async function reserve(item_id: number) {\n  // demo: 1 h desde ahora\n  const start_at = new Date().toISOString();\n  const end_at   = new Date(Date.now() + 3_600_000).toISOString();\n\n  // 1) crear alquiler\n  const { data: rental } = await api.post(\"/rentals/\", {\n    item_id,\n    start_at,\n    end_at\n  });\n\n  // 2) crear PaymentIntent (fianza = rental.deposit)\n  const { data: intent } = await api.post(\"/payments/create-intent\", {\n    amount: rental.deposit\n  });\n\n  return { clientSecret: intent.client_secret, rental };\n}\n",
    "rental-mvp-micro/services/frontend/src/features/rentals/RentalList.tsx": "// src/features/rentals/RentalList.tsx\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useRentals, RentalStatus } from \"./useRentals\";\nimport clsx from \"clsx\";\n\n/* ------------------------------------------------------------------ */\n/*                         Helper visual                              */\n/* ------------------------------------------------------------------ */\nfunction statusLabel(s: RentalStatus) {\n  switch (s) {\n    case \"pending\":\n      return [\"Pendiente\", \"badge badge--danger\"];\n    case \"confirmed\":\n      return [\"Confirmado\", \"badge badge--ok\"];\n    case \"returned\":\n      return [\"Devuelto\", \"badge\"];\n  }\n}\n\n/* ------------------------------------------------------------------ */\n/*                           Componente                               */\n/* ------------------------------------------------------------------ */\nexport default function RentalList() {\n  const { token } = useAuth();\n  const {\n    data: rentals,\n    loading,\n  } = useRentals(token); // ← hook actualizado\n\n  if (!token)\n    return (\n      <p className=\"text-gray-500\">\n        Debes iniciar sesión para ver tus alquileres.\n      </p>\n    );\n\n  if (loading) return <p className=\"text-gray-500\">Cargando…</p>;\n\n  if (!rentals.length)\n    return <p className=\"text-gray-500\">No tienes alquileres activos.</p>;\n\n  return (\n    <div className=\"space-y-2\">\n      {rentals.map(r => {\n        const [txt, cls] = statusLabel(r.status);\n        return (\n          <div\n            key={r.id}\n            className=\"flex items-center justify-between rounded-md bg-white p-3 shadow\"\n          >\n            <span className=\"font-medium\">{r.item.name}</span>\n            <span className={cls}>{txt}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/features/rentals/createRental.ts": "// src/features/rentals/createRental.ts\nimport { api } from \"../../api\";\n\n/** Crea un alquiler y devuelve su objeto completo (`RentalOut`). */\nexport async function createRental(item_id: number,\n                                   start_at: string,\n                                   end_at: string) {\n  const { data } = await api.post(\"/rentals/\", { item_id, start_at, end_at });\n  return data;                         // ← incluye `deposit`\n}\n",
    "rental-mvp-micro/services/frontend/src/features/rentals/useRentals.ts": "// src/features/rentals/useRentals.ts\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\nimport { Item } from \"../items/useItems\";\n\n/* ------------------------------------------------------------------ */\n/*                              Types                                 */\n/* ------------------------------------------------------------------ */\n\nexport type RentalStatus = \"pending\" | \"confirmed\" | \"returned\";\n\nexport type Rental = {\n  id: number;\n  item: Item;\n  start_at: string;\n  end_at: string;\n  deposit: number;\n  status: RentalStatus;       // ← reemplaza a «returned»\n};\n\n/* ------------------------------------------------------------------ */\n/*                               Hook                                 */\n/* ------------------------------------------------------------------ */\n\n/**\n * Devuelve los alquileres del usuario autenticado.\n * La petición solo se dispara cuando `token` es truthy.\n */\nexport function useRentals(token: string | null) {\n  const enabled = Boolean(token);\n\n  const { data, isLoading, refetch } = useQuery<Rental[]>({\n    queryKey: [\"rentals\"],\n    queryFn: () => api.get<Rental[]>(\"/rentals/me\").then(r => r.data),\n    enabled,\n    staleTime: 60_000,\n    retry: false\n  });\n\n  return { data: data ?? [], loading: isLoading, refetch };\n}\n",
    "rental-mvp-micro/services/frontend/src/features/rentals/payments/createIntent.ts": "// src/features/payments/createIntent.ts\nimport { api } from \"../../../api\";\n\nexport async function createIntent(amount: number) {\n  const { data } = await api.post(\"/payments/create-intent\", { amount });\n  return data as { client_secret: string };\n}\n",
    "rental-mvp-micro/services/frontend/src/pages/Register.tsx": "// src/pages/Register.tsx\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport zxcvbn from \"zxcvbn\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport clsx from \"clsx\";\n\nimport { register as apiRegister } from \"../features/auth/register\";\nimport { login as apiLogin } from \"../features/auth/login\";\nimport { useAuth } from \"../hooks/useAuth\";\n\nimport Container from \"../components/shared/Container\";\nimport SocialButton from \"../components/ui/SocialButton\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { FaGithub } from \"react-icons/fa\";\n\n/* -------- validation schema -------- */\nconst schema = z\n  .object({\n    username: z.string().min(3, \"Mín. 3 caracteres\"),\n    email: z.string().email(\"Email inválido\"),\n    password: z.string().min(8, \"Mín. 8 caracteres\"),\n    confirm: z.string(),\n    terms: z.literal(true, {\n      errorMap: () => ({ message: \"Acepta los términos\" }),\n    }),\n  })\n  .refine(data => data.password === data.confirm, {\n    message: \"Las contraseñas no coinciden\",\n    path: [\"confirm\"],\n  });\n\ntype FormData = z.infer<typeof schema>;\n\nexport default function Register() {\n  const navigate = useNavigate();\n  const { login: saveToken } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<FormData>({ resolver: zodResolver(schema) });\n\n  const pwd = watch(\"password\", \"\");\n\n  /* -------------------------------------------------------------------- */\n  const onSubmit = async (data: FormData) => {\n    try {\n      // 1) signup\n      await apiRegister(data.username, data.email, data.password);\n\n      // 2) auto-login\n      const token = await apiLogin(data.username, data.password);\n      saveToken(token);\n\n      toast.success(\"Cuenta creada, ¡bienvenido!\");\n      navigate(\"/dashboard\");\n    } catch (err: any) {\n      // FastAPI devuelve detail en .response.data.detail\n      const msg =\n        err?.response?.data?.detail ??\n        \"No se pudo crear la cuenta. Inténtalo más tarde.\";\n      toast.error(msg);\n    }\n  };\n\n  /* -------------------------------------------------------------------- */\n  const strength = zxcvbn(pwd).score; // 0-4\n\n  return (\n    <Container>\n      <main className=\"flex min-h-[70vh] items-center justify-center\">\n        <div className=\"w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card\">\n          <h1 className=\"text-center text-2xl font-bold\">Crear cuenta</h1>\n\n          {/* ───── login social ───── */}\n          <div className=\"space-y-3\">\n            <SocialButton provider=\"google\" icon={FcGoogle} label=\"Con Google\" />\n            <SocialButton provider=\"github\" icon={FaGithub} label=\"Con GitHub\" />\n          </div>\n\n          <div className=\"relative text-xs text-gray-400\">\n            <hr />\n            <span className=\"absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2\">\n              o regístrate con email\n            </span>\n          </div>\n\n          {/* ───── formulario ───── */}\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            <input\n              {...register(\"username\")}\n              placeholder=\"Nombre de usuario\"\n              className=\"form-input w-full\"\n            />\n            {errors.username && (\n              <p className=\"text-xs text-red-600\">{errors.username.message}</p>\n            )}\n\n            <input\n              {...register(\"email\")}\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"form-input w-full\"\n            />\n            {errors.email && (\n              <p className=\"text-xs text-red-600\">{errors.email.message}</p>\n            )}\n\n            <input\n              {...register(\"password\")}\n              type=\"password\"\n              placeholder=\"Contraseña\"\n              className=\"form-input w-full\"\n            />\n\n            {/* strength meter */}\n            {pwd && (\n              <div className=\"h-2 w-full overflow-hidden rounded bg-gray-200\">\n                <div\n                  style={{ width: `${(strength + 1) * 20}%` }}\n                  className={clsx(\n                    \"h-full transition-all\",\n                    [\n                      \"bg-red-500\",\n                      \"bg-orange-400\",\n                      \"bg-yellow-400\",\n                      \"bg-lime-500\",\n                      \"bg-green-600\",\n                    ][strength],\n                  )}\n                />\n              </div>\n            )}\n            {errors.password && (\n              <p className=\"text-xs text-red-600\">\n                {errors.password.message}\n              </p>\n            )}\n\n            <input\n              {...register(\"confirm\")}\n              type=\"password\"\n              placeholder=\"Repite contraseña\"\n              className=\"form-input w-full\"\n            />\n            {errors.confirm && (\n              <p className=\"text-xs text-red-600\">{errors.confirm.message}</p>\n            )}\n\n            {/* terms */}\n            <label className=\"flex gap-2 text-xs text-gray-600\">\n              <input type=\"checkbox\" {...register(\"terms\")} />\n              Acepto los&nbsp;\n              <a href=\"/terms\" className=\"text-brand hover:underline\">\n                Términos y la Política de privacidad\n              </a>\n            </label>\n            {errors.terms && (\n              <p className=\"text-xs text-red-600\">{errors.terms.message}</p>\n            )}\n\n            <button className=\"btn w-full\" disabled={isSubmitting}>\n              {isSubmitting ? \"Creando…\" : \"Crear cuenta\"}\n            </button>\n          </form>\n        </div>\n      </main>\n    </Container>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/pages/Login.tsx": "// src/pages/Login.tsx\nimport { FormEvent, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { login as apiLogin } from '../features/auth/login';\n\nimport { FcGoogle } from 'react-icons/fc';\nimport { FaGithub } from 'react-icons/fa';\nimport SocialButton from '../components/ui/SocialButton';\nimport Container from '../components/shared/Container';\nimport toast from 'react-hot-toast';  \n\nexport default function Login() {\n  const [user, setUser] = useState('');\n  const [pwd, setPwd] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const { login: saveToken } = useAuth();\n  const nav = useNavigate();\n\n  async function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n    try {\n  const token = await apiLogin(user, pwd);\n  saveToken(token);\n  nav('/dashboard');\n  toast.success('¡Bienvenido de nuevo!');            // 🆕\n} catch {\n  toast.error('Usuario o contraseña incorrectos');   // 🆕\n}\n  }\n\n  return (\n    <Container>\n      <main className=\"flex min-h-[70vh] items-center justify-center\">\n        <div className=\"w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card\">\n          {/* Título */}\n          <h1 className=\"text-center text-2xl font-bold\">Iniciar sesión</h1>\n\n          {/* Social login */}\n          <div className=\"space-y-3\">\n            <SocialButton\n              provider=\"google\"\n              icon={FcGoogle}\n              label=\"Entrar con Google\"\n            />\n            <SocialButton\n              provider=\"github\"\n              icon={FaGithub}\n              label=\"Entrar con GitHub\"\n            />\n          </div>\n\n          <div className=\"relative\">\n            <hr />\n            <span className=\"absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2 text-xs text-gray-400\">\n              o continúa con tu cuenta\n            </span>\n          </div>\n\n          {/* Form tradicional */}\n          {error && <p className=\"text-center text-sm text-red-600\">{error}</p>}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <input\n              className=\"form-input w-full\"\n              placeholder=\"Usuario\"\n              value={user}\n              onChange={e => setUser(e.target.value)}\n              required\n            />\n            <input\n              className=\"form-input w-full\"\n              type=\"password\"\n              placeholder=\"Contraseña\"\n              value={pwd}\n              onChange={e => setPwd(e.target.value)}\n              required\n            />\n            <button className=\"btn w-full\">Entrar</button>\n          </form>\n\n          <p className=\"text-center text-xs text-gray-500\">\n            ¿No tienes cuenta?{' '}\n            <a href=\"/register\" className=\"font-medium text-brand hover:underline\">\n              Regístrate\n            </a>\n          </p>\n        </div>\n      </main>\n    </Container>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/pages/Dashboard.tsx": "import Container from '../components/shared/Container';\nimport ItemList from '../features/items/ItemList';\nimport RentalList from '../features/rentals/RentalList';\nimport Section from '../components/shared/Section';\n\nexport default function Dashboard() {\n  return (\n    <Container>\n      <Section title=\"Mis alquileres\">\n        <RentalList />\n      </Section>\n\n      <Section title=\"Catálogo público\">\n        <ItemList />\n      </Section>\n    </Container>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/pages/Home.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/pages/Home.tsx                                                        */\n/* -------------------------------------------------------------------------- */\nimport { Link } from 'react-router-dom';\nimport {\n  ArrowRightIcon,\n  PlusIcon,\n  CloudArrowUpIcon,\n  CalendarDaysIcon,\n  BanknotesIcon,\n} from '@heroicons/react/24/solid';\n\nimport Container from '../components/shared/Container';\nimport Section from '../components/shared/Section';\n\nimport Stats from '../components/Home/Stats';\nimport LogoCloud from '../components/Home/LogoCloud';\nimport Testimonials from '../components/Home/Testimonials';\nimport FAQ from '../components/Home/FAQ';\n\nexport default function Home() {\n  /* Pasos del “cómo funciona” con su icono */\n  const STEPS = [\n    {\n      title: 'Publica',\n      desc: 'Sube tu producto, ponle precio y límites de uso.',\n      icon: CloudArrowUpIcon,\n    },\n    {\n      title: 'Reserva',\n      desc: 'Los usuarios pagan la fianza y reservan al instante.',\n      icon: CalendarDaysIcon,\n    },\n    {\n      title: 'Gana',\n      desc: 'Entregas el ítem, recibes el pago y valoraciones ⭐',\n      icon: BanknotesIcon,\n    },\n  ];\n\n  return (\n    <>\n      {/* ---------- HERO ---------- */}\n      <section className=\"relative isolate overflow-hidden bg-brand text-white\">\n        {/* background blur blob */}\n        <span className=\"pointer-events-none absolute -top-16 left-1/2 -z-10 h-[500px] w-[500px] -translate-x-1/2 rounded-full bg-white/10 blur-3xl\" />\n\n        <Container>\n          <div className=\"flex min-h-[70vh] flex-col items-center justify-center gap-6 py-28 text-center\">\n            <h1 className=\"max-w-3xl text-balance text-5xl font-extrabold leading-tight\">\n              Dónde tus cosas <br className=\"hidden sm:inline\" />\n              <span className=\"text-white/80\">cambian de mano</span>\n            </h1>\n\n            <p className=\"max-w-xl text-lg/relaxed text-white/90\">\n              Alquila herramientas, gadgets o equipamiento deportivo y monetiza lo\n              que ya tienes. ¡Conecta con tu barrio y ahorra al planeta!\n            </p>\n\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Link to=\"/dashboard\" className=\"btn inline-flex gap-2\">\n                Explorar catálogo <ArrowRightIcon className=\"h-5 w-5\" />\n              </Link>\n              <Link to=\"/dashboard#add\" className=\"btn--ghost inline-flex gap-2\">\n                <PlusIcon className=\"h-5 w-5\" />\n                Publicar mi primer ítem\n              </Link>\n            </div>\n          </div>\n        </Container>\n\n        {/* wave separator */}\n        <svg\n          aria-hidden\n          viewBox=\"0 0 1440 120\"\n          className=\"block w-full text-brand\"\n          preserveAspectRatio=\"none\"\n        >\n          <path\n            d=\"M0,96L48,106.7C96,117,192,139,288,128C384,117,480,75,576,58.7C672,43,768,53,864,74.7C960,96,1056,128,1152,138.7C1248,149,1344,139,1392,133.3L1440,128L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z\"\n            className=\"fill-white\"\n          />\n        </svg>\n      </section>\n\n      {/* ---------- STATS ---------- */}\n      <Stats />\n\n      {/* ---------- LOGO CLOUD ---------- */}\n      <LogoCloud />\n\n      {/* ---------- CÓMO FUNCIONA ---------- */}\n      <Section title=\"¿Cómo funciona?\">\n        <Container>\n          <div className=\"grid gap-12 md:grid-cols-3\">\n            {STEPS.map(({ title, desc, icon: Icon }) => (\n              <div key={title} className=\"space-y-4 text-center\">\n                <div className=\"mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-brand/10\">\n                  <Icon className=\"h-6 w-6 text-brand\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">{title}</h3>\n                <p className=\"text-gray-600\">{desc}</p>\n              </div>\n            ))}\n          </div>\n        </Container>\n      </Section>\n\n      {/* ---------- TESTIMONIOS ---------- */}\n      <Testimonials />\n\n      {/* ---------- FAQ ---------- */}\n      <FAQ />\n\n      {/* ---------- CTA FINAL ---------- */}\n      <section className=\"bg-brand py-16 text-center text-white\">\n        <Container>\n          <h2 className=\"mb-6 text-3xl font-bold\">\n            ¿Listo para estrenar ingresos extra?\n          </h2>\n          <Link to=\"/register\" className=\"btn\">\n            Crear cuenta gratis\n          </Link>\n        </Container>\n      </section>\n    </>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/PaymentModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/PaymentModal.tsx                                        */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  PaymentElement,\n  useElements,\n  useStripe,\n} from \"@stripe/react-stripe-js\";\nimport { ArrowPathIcon, XMarkIcon } from \"@heroicons/react/24/outline\";\nimport toast from \"react-hot-toast\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\n/* ⚠️  usa tu clave pública de Stripe (env var VITE_STRIPE_PK) */\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PK!);\n\ntype Props = {\n  open: boolean;\n  clientSecret: string;\n  onClose: () => void;\n  onSuccess: () => void;\n};\n\nexport default function PaymentModal(props: Props) {\n  const { open, clientSecret, onClose, onSuccess } = props;\n\n  if (!clientSecret) return null;\n\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog onClose={onClose} className=\"relative z-[60]\">\n        {/* ---- backdrop ---- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---- panel ---- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"w-full max-w-md overflow-hidden rounded-xl bg-white shadow-xl\">\n              <header className=\"flex items-center justify-between border-b px-5 py-4\">\n                <Dialog.Title className=\"text-base font-semibold\">\n                  Pago de fianza\n                </Dialog.Title>\n                <button\n                  onClick={onClose}\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              </header>\n\n              <Elements\n                stripe={stripePromise}\n                options={{ clientSecret, appearance: { theme: \"stripe\" } }}\n              >\n                <CheckoutForm onCancel={onClose} onSuccess={onSuccess} />\n              </Elements>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n\n/* ------------------------ formulario interno ----------------------------- */\nfunction CheckoutForm({\n  onCancel,\n  onSuccess,\n}: {\n  onCancel: () => void;\n  onSuccess: () => void;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [processing, setProcessing] = useState(false);\n  const qc = useQueryClient();  // ← invalidate cache\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n\n    setProcessing(true);\n    const { error } = await stripe.confirmPayment({\n      elements,\n      redirect: \"if_required\",\n    });\n\n    setProcessing(false);\n\n    if (error) {\n      toast.error(error.message ?? \"No se pudo procesar el pago.\");\n    } else {\n      /* 🔄 refrescar lista de alquileres */\n      qc.invalidateQueries({ queryKey: [\"rentals\"] });\n      onSuccess(); // ← callback del padre\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6 p-6\">\n      {/* Tarjeta / Wallets / iDEAL, etc. */}\n      <PaymentElement />\n\n      <div className=\"flex items-center justify-end gap-3\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"btn-secondary px-4 py-2 text-sm\"\n        >\n          Cancelar\n        </button>\n\n        <button\n          disabled={!stripe || !elements || processing}\n          className=\"btn px-6 py-2 text-sm\"\n        >\n          {processing ? (\n            <>\n              <ArrowPathIcon className=\"mr-2 h-5 w-5 animate-spin\" />\n              Procesando…\n            </>\n          ) : (\n            \"Pagar y confirmar\"\n          )}\n        </button>\n      </div>\n    </form>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/SkeletonCard.tsx": "export default function SkeletonCard() {\n  return (\n    <article\n      className=\"\n        flex flex-col overflow-hidden rounded-lg bg-white shadow-card\n        animate-pulse\n      \"\n    >\n      {/* zona de imagen (mantiene proporción 4:3) */}\n      <div className=\"aspect-[4/3] w-full bg-gray-200\" />\n\n      {/* zona de texto */}\n      <div className=\"space-y-2 p-4\">\n        <div className=\"h-4 w-2/3 rounded bg-gray-200\" />\n        <div className=\"h-4 w-1/3 rounded bg-gray-200\" />\n      </div>\n    </article>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/LazyImage.tsx": "import { useState } from 'react';\n\ntype Props = {\n  src: string;\n  alt: string;\n  className?: string;\n  /** ancho estimado para el atributo `sizes` (ej. \"100vw\", \"50vw\") */\n  sizes?: string;\n};\n\nexport default function LazyImage({\n  src,\n  alt,\n  className = '',\n  sizes = '100vw'\n}: Props) {\n  const [loaded, setLoaded] = useState(false);\n\n  /* genera srcset (320-640-960 px) */\n  const srcset = [320, 640, 960]\n    .map(w => `${src.replace(/(\\?.*)?$/, '')}?w=${w} ${w}w`)\n    .join(', ');\n\n  return (\n    <img\n      src={src}\n      srcSet={srcset}\n      sizes={sizes}\n      loading=\"lazy\"\n      decoding=\"async\"                    /* 🆕 */\n      onLoad={() => setLoaded(true)}\n      className={`${className} transition-opacity duration-500 ${\n        loaded ? 'opacity-100' : 'opacity-0'\n      }`}\n      alt={alt}\n    />\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/ItemCard.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/ItemCard.tsx                                            */\n/* -------------------------------------------------------------------------- */\nimport { useState } from \"react\";\nimport { HeartIcon, EyeIcon } from \"@heroicons/react/24/solid\";\nimport clsx from \"clsx\";\n\nimport { Item } from \"../../features/items/useItems\";\nimport { resolveImage } from \"../../utils\";\nimport LazyImage from \"./LazyImage\";\nimport ItemDetailModal from \"./ItemDetailModal\";\n\nexport default function ItemCard({ item }: { item: Item }) {\n  const [open, setOpen] = useState(false);\n\n  /* -------- portada (1ª del array o la legacy) -------- */\n  const cover = item.image_urls?.[0] ?? item.image_url;\n\n  const imgSrc = resolveImage(\n    cover,\n    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`\n  );\n\n  return (\n    <>\n      <article\n        onClick={() => setOpen(true)}\n        className=\"flex cursor-pointer flex-col overflow-hidden rounded-lg bg-surface shadow-card transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover\"\n      >\n        {/* ---------- Foto ---------- */}\n        <div className=\"relative\">\n          <LazyImage\n            src={imgSrc}\n            alt={item.name}\n            className=\"aspect-[4/3] w-full object-contain p-2\"\n          />\n\n          {!item.available && (\n            <span className=\"absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white\">\n              Alquilado\n            </span>\n          )}\n\n          {/* acciones rápidas */}\n          <div className=\"absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100\">\n            <IconBtn title=\"Vista rápida\">\n              <EyeIcon className=\"h-5 w-5\" />\n            </IconBtn>\n            <IconBtn title=\"Favorito\">\n              <HeartIcon className=\"h-5 w-5\" />\n            </IconBtn>\n          </div>\n        </div>\n\n        {/* ---------- Info ---------- */}\n        <div className=\"flex flex-1 flex-col gap-2 px-4 pb-4\">\n          <h3 className=\"line-clamp-1 text-lg font-semibold\">{item.name}</h3>\n\n          {item.description && (\n            <p className=\"line-clamp-2 text-sm text-gray-600\">\n              {item.description}\n            </p>\n          )}\n\n          <div className=\"mt-auto flex items-center justify-between\">\n            <p className=\"text-base font-bold text-brand\">\n              {item.price_per_h.toFixed(2)} €/h\n            </p>\n            <span\n              className={clsx(\n                \"badge\",\n                item.available ? \"badge--ok\" : \"badge--danger\"\n              )}\n            >\n              {item.available ? \"Disponible\" : \"Alquilado\"}\n            </span>\n          </div>\n        </div>\n      </article>\n\n      {/* ---------- Modal de detalle ---------- */}\n      <ItemDetailModal open={open} onClose={() => setOpen(false)} item={item} />\n    </>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Helpers                                    */\n/* -------------------------------------------------------------------------- */\nfunction IconBtn({\n  children,\n  title\n}: {\n  children: React.ReactNode;\n  title: string;\n}) {\n  return (\n    <button\n      type=\"button\"\n      title={title}\n      onClick={e => e.stopPropagation()}\n      className=\"rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white\"\n    >\n      {children}\n    </button>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/SearchBar.tsx": "import { useForm } from 'react-hook-form';\n\ntype Props = { onSubmit: (q: URLSearchParams) => void };\n\nexport default function SearchBar({ onSubmit }: Props) {\n  const { register, handleSubmit, reset } = useForm<{\n    q: string;\n    min: number | undefined;\n    max: number | undefined;\n  }>({ defaultValues: { q: '', min: undefined, max: undefined } });\n\n  return (\n    <form\n      onSubmit={handleSubmit(values => {\n        const params = new URLSearchParams();\n        if (values.q) params.set('name', values.q);\n        if (values.min) params.set('min_price', values.min.toString());\n        if (values.max) params.set('max_price', values.max.toString());\n        onSubmit(params);\n      })}\n      className=\"flex flex-wrap items-end gap-3\"\n    >\n      <input\n        {...register('q')}\n        placeholder=\"Buscar producto…\"\n        className=\"form-input w-52\"\n      />\n      <input\n        {...register('min', { valueAsNumber: true })}\n        type=\"number\"\n        step=\"0.1\"\n        min={0}\n        placeholder=\"€ mínimo\"\n        className=\"form-input w-32\"\n      />\n      <input\n        {...register('max', { valueAsNumber: true })}\n        type=\"number\"\n        step=\"0.1\"\n        min={0}\n        placeholder=\"€ máximo\"\n        className=\"form-input w-32\"\n      />\n      <button className=\"btn\">Filtrar</button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          reset();\n          onSubmit(new URLSearchParams());\n        }}\n        className=\"btn--ghost\"\n      >\n        Limpiar\n      </button>\n    </form>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/ItemDetailModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/ItemDetailModal.tsx                                     */\n/*  – Integra reserva vía micro-servicio **rentals** + Stripe                 */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport {\n  XMarkIcon,\n  StarIcon,\n  ShieldCheckIcon,\n  ClockIcon,\n  MapPinIcon,\n  CheckBadgeIcon,\n  UserCircleIcon,\n  ArrowPathIcon,\n} from \"@heroicons/react/24/outline\";\nimport { FaFacebookF, FaTwitter, FaWhatsapp } from \"react-icons/fa\";\nimport toast from \"react-hot-toast\";\nimport clsx from \"clsx\";\n\nimport { Item } from \"../../features/items/useItems\";\nimport { reserve } from \"../../features/rentals/reserve\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { resolveImage } from \"../../utils\";\n\nimport LazyImage from \"./LazyImage\";\nimport PaymentModal from \"./PaymentModal\";\n\n/* ------------------- helpers (Rating, Feature, Description) --------------- */\n\nconst Rating = ({ value }: { value: number }) => (\n  <div className=\"flex items-center gap-1\">\n    {Array.from({ length: 5 }).map((_, i) => (\n      <StarIcon\n        key={i}\n        className={clsx(\n          \"h-4 w-4\",\n          i < value ? \"fill-amber-400 stroke-amber-400\" : \"stroke-gray-300\"\n        )}\n      />\n    ))}\n    <span className=\"ml-1 text-xs text-gray-500\">({value.toFixed(1)})</span>\n  </div>\n);\n\nconst Feature = ({\n  icon: Icon,\n  text,\n}: {\n  icon: (p: any) => JSX.Element;\n  text: string;\n}) => (\n  <li className=\"flex items-center gap-2\">\n    <Icon className=\"h-4 w-4 shrink-0 text-brand\" />\n    {text}\n  </li>\n);\n\nconst Description = ({ text }: { text: string }) => {\n  const bullets = text\n    .split(/(?:\\u2022|\\n)/) // • o salto de línea\n    .map(t => t.trim())\n    .filter(Boolean);\n\n  if (bullets.length > 1) {\n    return (\n      <ul className=\"list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-700\">\n        {bullets.map((b, i) => (\n          <li key={i}>{b}</li>\n        ))}\n      </ul>\n    );\n  }\n  return (\n    <p className=\"whitespace-pre-line text-sm leading-relaxed text-gray-700\">\n      {text}\n    </p>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\ntype Props = { open: boolean; onClose: () => void; item: Item | null };\n\nexport default function ItemDetailModal({ open, onClose, item }: Props) {\n  if (!item) return null;\n\n  /* ---------- galería ---------- */\n  const gallery =\n    item.image_urls?.length\n      ? item.image_urls\n      : [\n          resolveImage(\n            item.image_url,\n            `https://source.unsplash.com/800x600/?${encodeURIComponent(\n              item.name\n            )}`\n          ),\n        ];\n  const [active, setActive] = useState(0);\n\n  /* ---------- specs demo ---------- */\n  const SPECS: Record<string, string | number> = {\n    Potencia: \"600 W\",\n    Peso: \"1,8 kg\",\n    Velocidad: \"0-2 800 rpm\",\n  };\n\n  /* ---------- reserva ---------- */\n  const { token } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n\n  const handleReserve = async () => {\n    if (!token) return toast.error(\"Debes iniciar sesión primero\");\n    if (!item.available)\n      return toast.error(\"Este ítem no está disponible actualmente\");\n\n    try {\n      setLoading(true);\n      const { clientSecret } = await reserve(item.id); // crea alquiler + PaymentIntent\n      setLoading(false);\n      setClientSecret(clientSecret); // abre modal de pago\n    } catch (err: any) {\n      setLoading(false);\n      const msg =\n        err?.response?.data?.detail ??\n        \"No se pudo reservar, inténtalo más tarde.\";\n      toast.error(msg);\n    }\n  };\n\n  /* ---------------------------------------------------------------------- */\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog onClose={onClose} className=\"relative z-50\">\n        {/* ---- backdrop ---- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---- wrapper ---- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"flex w-full max-w-6xl max-h-[95vh] flex-col overflow-hidden rounded-xl bg-white shadow-xl\">\n              {/* ---------------- Header ---------------- */}\n              <header className=\"flex items-center justify-between border-b px-6 py-4\">\n                <Dialog.Title className=\"text-lg font-semibold\">\n                  {item.name}\n                </Dialog.Title>\n                <button\n                  onClick={onClose}\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                >\n                  <XMarkIcon className=\"h-6 w-6\" />\n                </button>\n              </header>\n\n              {/* ---------------- Body ---------------- */}\n              <section className=\"flex flex-1 flex-col gap-8 overflow-y-auto p-6 lg:flex-row\">\n                {/* ---------- Galería ---------- */}\n                <div className=\"lg:w-1/2\">\n                  <div className=\"aspect-video overflow-hidden rounded-lg border\">\n                    <LazyImage\n                      src={gallery[active]}\n                      alt={item.name}\n                      className=\"h-full w-full object-contain\"\n                      sizes=\"(min-width:1024px) 50vw, 90vw\"\n                    />\n                  </div>\n\n                  {gallery.length > 1 && (\n                    <div className=\"mt-3 flex gap-2 overflow-x-auto\">\n                      {gallery.map((src, i) => (\n                        <button\n                          key={i}\n                          onClick={() => setActive(i)}\n                          className={clsx(\n                            \"shrink-0 overflow-hidden rounded-md border\",\n                            active === i && \"ring-2 ring-brand\"\n                          )}\n                        >\n                          <LazyImage\n                            src={src}\n                            alt=\"\"\n                            className=\"h-16 w-24 object-cover\"\n                            sizes=\"96px\"\n                          />\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* ---------- Ficha ---------- */}\n                <div className=\"flex flex-1 flex-col gap-6\">\n                  <div className=\"flex flex-col gap-1 sm:flex-row sm:items-center sm:justify-between\">\n                    <p className=\"text-3xl font-bold text-brand\">\n                      {item.price_per_h.toFixed(2)} €/h\n                    </p>\n                    <Rating value={4} />\n                  </div>\n\n                  {item.description ? (\n                    <Description text={item.description} />\n                  ) : (\n                    <p className=\"text-sm text-gray-500\">Sin descripción.</p>\n                  )}\n\n                  <table className=\"mt-2 w-full max-w-sm text-sm\">\n                    <tbody>\n                      {Object.entries(SPECS).map(([k, v]) => (\n                        <tr key={k} className=\"border-b last:border-0\">\n                          <td className=\"py-1 pr-4 text-gray-600\">{k}</td>\n                          <td className=\"py-1 font-medium\">{v}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n\n                  {!!item.categories?.length && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {item.categories.map(c => (\n                        <span\n                          key={c.id}\n                          className=\"rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600\"\n                        >\n                          {c.name}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* vendedor (placeholder) */}\n                  <div className=\"flex items-center gap-3 rounded-md bg-gray-50 p-4\">\n                    <UserCircleIcon className=\"h-10 w-10 text-gray-400\" />\n                    <div className=\"flex-1\">\n                      <p className=\"flex items-center gap-1 text-sm font-semibold\">\n                        Juan P.\n                        <CheckBadgeIcon className=\"h-4 w-4 text-emerald-500\" />\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Propietario verificado\n                      </p>\n                    </div>\n                  </div>\n\n                  <p className=\"flex items-center gap-1 text-xs text-gray-500\">\n                    <MapPinIcon className=\"h-4 w-4\" />\n                    Recogida en Madrid 28010\n                  </p>\n\n                  <ul className=\"space-y-1 text-sm\">\n                    <Feature\n                      icon={ShieldCheckIcon}\n                      text=\"Pago seguro con fianza\"\n                    />\n                    <Feature\n                      icon={ClockIcon}\n                      text=\"Cancelación gratis hasta 12 h antes\"\n                    />\n                  </ul>\n\n                  {/* redes */}\n                  <div className=\"mt-3 flex gap-4\">\n                    <Social icon={FaFacebookF} label=\"Facebook\" />\n                    <Social icon={FaTwitter} label=\"Twitter\" />\n                    <Social icon={FaWhatsapp} label=\"WhatsApp\" />\n                  </div>\n\n                  {/* --------- LOGOS de pago --------- */}\n                  <div className=\"mt-6 flex justify-center gap-10 opacity-80\">\n                    <img\n                      src=\"/src/assets/payments/visa.svg\"\n                      alt=\"Visa\"\n                      className=\"h-8 w-auto md:h-10\"\n                    />\n                    <img\n                      src=\"/src/assets/payments/mastercard.svg\"\n                      alt=\"Mastercard\"\n                      className=\"h-8 w-auto md:h-10\"\n                    />\n                    <img\n                      src=\"/src/assets/payments/paypal.svg\"\n                      alt=\"PayPal\"\n                      className=\"h-8 w-auto md:h-10\"\n                    />\n                  </div>\n\n                  {/* CTA – XL */}\n                  <button\n                    onClick={handleReserve}\n                    disabled={loading}\n                    className=\"btn mt-4 w-full py-4 text-lg lg:max-w-xl\"\n                  >\n                    {loading ? (\n                      <>\n                        <ArrowPathIcon className=\"mr-3 h-6 w-6 animate-spin\" />\n                        Reservando…\n                      </>\n                    ) : (\n                      \"Reservar ahora\"\n                    )}\n                  </button>\n                </div>\n              </section>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n\n      {/* ─────────── Modal de pago Stripe ─────────── */}\n      <PaymentModal\n        open={Boolean(clientSecret)}\n        clientSecret={clientSecret ?? \"\"}\n        onClose={() => setClientSecret(null)}\n        onSuccess={() => {\n          toast.success(\"Reserva confirmada y fianza retenida 🎉\");\n          onClose();\n        }}\n      />\n    </Transition>\n  );\n}\n\n/* --------------------------- Social button ------------------------------- */\nfunction Social({\n  icon: Icon,\n  label,\n}: {\n  icon: (p: any) => JSX.Element;\n  label: string;\n}) {\n  return (\n    <a\n      href=\"#share\"\n      aria-label={`Compartir en ${label}`}\n      className=\"rounded-full bg-gray-100 p-2 text-gray-600 transition-colors hover:bg-gray-200\"\n    >\n      <Icon className=\"h-4 w-4\" />\n    </a>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/SocialButton.tsx": "// src/components/ui/SocialButton.tsx\nimport { IconType } from 'react-icons';\nimport clsx from 'clsx';\n\ntype Props = {\n  icon: IconType;\n  label: string;\n  provider: 'google' | 'github';\n};\n\nexport default function SocialButton({ icon: Icon, label, provider }: Props) {\n  return (\n    <a\n      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */\n      className={clsx(\n        'btn flex w-full items-center justify-center gap-2',\n        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',\n        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'\n      )}\n    >\n      <Icon className=\"h-5 w-5\" />\n      {label}\n    </a>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/ui/QuickViewModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/QuickViewModal.tsx                                      */\n/*  – permite reservar el ítem vía micro-servicio **rentals** + Stripe        */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport {\n  XMarkIcon,\n  StarIcon,\n  ArrowPathIcon,\n} from \"@heroicons/react/24/outline\";\nimport toast from \"react-hot-toast\";\nimport clsx from \"clsx\";\n\nimport { Item } from \"../../features/items/useItems\";\nimport { reserve } from \"../../features/rentals/reserve\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport LazyImage from \"./LazyImage\";\nimport { resolveImage } from \"../../utils\";\nimport PaymentModal from \"./PaymentModal\";\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  item: Item | null;\n};\n\nexport default function QuickViewModal({ open, onClose, item }: Props) {\n  /* ─────────── guard clause ─────────── */\n  if (!item) return null;\n\n  /* portada (1ª imagen o fallback) */\n  const cover = item.image_urls?.[0] ?? item.image_url;\n  const imgSrc = resolveImage(\n    cover,\n    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`\n  );\n\n  /* ─────────── auth + reserva ─────────── */\n  const { token } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n\n  /* reserva de **1 h** a partir de “ya” (demo) */\n  const handleReserve = async () => {\n    if (!token) return toast.error(\"Debes iniciar sesión\");\n    if (!item.available)\n      return toast.error(\"Este ítem no está disponible ahora mismo\");\n\n    try {\n      setLoading(true);\n      const { clientSecret } = await reserve(item.id);\n      setLoading(false);\n      setClientSecret(clientSecret); // abre modal Stripe\n    } catch (err: any) {\n      setLoading(false);\n      const msg =\n        err?.response?.data?.detail ??\n        \"No se pudo crear la reserva. Inténtalo más tarde.\";\n      toast.error(msg);\n    }\n  };\n\n  /* ────────────────── UI ────────────────── */\n  return (\n    <>\n      <Transition show={open} as={Fragment}>\n        <Dialog onClose={onClose} className=\"relative z-50\">\n          {/* ---------- Backdrop ---------- */}\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n          </Transition.Child>\n\n          {/* ---------- Panel ---------- */}\n          <div className=\"fixed inset-0 grid place-items-center p-4\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-200\"\n              enterFrom=\"scale-95 opacity-0\"\n              enterTo=\"scale-100 opacity-100\"\n              leave=\"ease-in duration-150\"\n              leaveFrom=\"scale-100 opacity-100\"\n              leaveTo=\"scale-95 opacity-0\"\n            >\n              <Dialog.Panel className=\"flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden rounded-xl bg-white shadow-xl\">\n                {/* ───────── header ───────── */}\n                <header className=\"flex items-center justify-between border-b p-4\">\n                  <Dialog.Title className=\"text-lg font-semibold\">\n                    {item.name}\n                  </Dialog.Title>\n                  <button\n                    onClick={onClose}\n                    className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                  >\n                    <XMarkIcon className=\"h-5 w-5\" />\n                  </button>\n                </header>\n\n                {/* ───────── body ───────── */}\n                <section className=\"grid gap-6 overflow-y-auto p-6 md:grid-cols-2\">\n                  {/* imagen */}\n                  <div className=\"flex items-center justify-center\">\n                    <LazyImage\n                      src={imgSrc}\n                      alt={item.name}\n                      className=\"w-full max-h-[60vh] rounded-lg object-contain\"\n                    />\n                  </div>\n\n                  {/* info */}\n                  <div className=\"flex flex-col gap-4\">\n                    <p className=\"text-2xl font-bold text-brand\">\n                      {item.price_per_h.toFixed(2)} €/h\n                    </p>\n\n                    {/* rating provisional */}\n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <StarIcon\n                          key={i}\n                          className={clsx(\n                            \"h-5 w-5\",\n                            i < 4\n                              ? \"fill-amber-400 stroke-amber-400\"\n                              : \"stroke-gray-300\"\n                          )}\n                        />\n                      ))}\n                      <span className=\"ml-1 text-sm text-gray-500\">(4,0)</span>\n                    </div>\n\n                    {item.description ? (\n                      <p className=\"prose max-w-none text-sm leading-relaxed\">\n                        {item.description}\n                      </p>\n                    ) : (\n                      <p className=\"text-sm text-gray-500\">Sin descripción.</p>\n                    )}\n\n                    {!!item.categories?.length && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {item.categories.map(c => (\n                          <span\n                            key={c.id}\n                            className=\"rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600\"\n                          >\n                            {c.name}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* ───────── CTA ───────── */}\n                    <button\n                      onClick={handleReserve}\n                      disabled={loading}\n                      className=\"btn mt-auto w-full\"\n                    >\n                      {loading ? (\n                        <>\n                          <ArrowPathIcon className=\"mr-2 h-5 w-5 animate-spin\" />\n                          Reservando…\n                        </>\n                      ) : (\n                        \"Reservar ahora\"\n                      )}\n                    </button>\n                  </div>\n                </section>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </Dialog>\n      </Transition>\n\n      {/* ───── modal Stripe para introducir la tarjeta ───── */}\n      <PaymentModal\n        open={Boolean(clientSecret)}\n        clientSecret={clientSecret ?? \"\"}\n        onClose={() => setClientSecret(null)}\n        onSuccess={() => {\n          toast.success(\"Reserva confirmada y fianza retenida 🎉\");\n          onClose();\n        }}\n      />\n    </>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/shared/Section.tsx": "type Props = {\n  title?: string;\n  children: React.ReactNode;\n  id?: string;\n};\n\nexport default function Section({ title, children, id }: Props) {\n  return (\n    <section id={id} className=\"space-y-6 py-16\">\n      {title && (\n        <h2 className=\"text-center text-3xl font-bold tracking-tight\">{title}</h2>\n      )}\n      {children}\n    </section>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/shared/Container.tsx": "export default function Container({ children }: { children: React.ReactNode }) {\n  return <div className=\"container\">{children}</div>;\n}\n",
    "rental-mvp-micro/services/frontend/src/components/layout/Footer.tsx": "export default function Footer() {\n  return (\n    <footer className=\"mt-24 border-t bg-white py-12 text-center text-sm text-gray-500\">\n      Rental‑MVP © {new Date().getFullYear()} · Hecho con ❤ en FastAPI + React\n    </footer>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/layout/Header.tsx": "// src/components/layout/Header.tsx\nimport { Link, NavLink } from 'react-router-dom';\nimport { Disclosure } from '@headlessui/react';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\nimport logo from '../../assets/logo.png';\nimport { useAuth } from '../../hooks/useAuth';\n\nexport default function Header() {\n  const { token, logout } = useAuth();\n\n  const links = token\n    ? [\n        { to: '/dashboard', label: 'Dashboard' },\n        { label: 'Salir', action: logout }\n      ]\n    : [{ to: '/login', label: 'Login' }];\n\n  return (\n    <Disclosure\n      as=\"header\"\n      className=\"\n        sticky top-0 z-40 w-full border-b bg-white/80\n        backdrop-blur shadow-sm supports-backdrop-blur:bg-white/60\n      \"\n    >\n      {({ open }) => (\n        <>\n          {/* ----------------------- Barra principal ----------------------- */}\n          <div className=\"container mx-auto flex items-center justify-between py-4 md:py-5\">\n            {/* ---------- Logo (aún más grande) ---------- */}\n            <Link to=\"/\" aria-label=\"Inicio\" className=\"flex items-center gap-2\">\n              <img\n                src={logo}\n                alt=\"Logo Rental-MVP\"\n                className=\"h-16 w-auto select-none md:h-20 lg:h-26\" /* antes: 12-16-20 */\n                decoding=\"async\"\n              />\n              <span className=\"sr-only\">Rental-MVP</span>\n            </Link>\n\n            {/* ---------- Navegación desktop ---------- */}\n            <nav className=\"hidden gap-10 text-base font-semibold text-gray-700 md:flex\">\n              {links.map(({ to, label, action }) =>\n                action ? (\n                  <button\n                    key={label}\n                    onClick={action}\n                    className=\"transition-colors hover:text-brand\"\n                  >\n                    {label}\n                  </button>\n                ) : (\n                  <NavLink\n                    key={label}\n                    to={to!}\n                    className={({ isActive }) =>\n                      `transition-colors hover:text-brand ${\n                        isActive ? 'text-brand' : ''\n                      }`\n                    }\n                  >\n                    {label}\n                  </NavLink>\n                )\n              )}\n            </nav>\n\n            {/* ---------- Botón hamburguesa (más grande) ---------- */}\n            <Disclosure.Button\n              className=\"rounded-md p-2 text-gray-700 hover:bg-gray-100 focus:outline-none md:hidden\"\n              aria-label=\"Abrir menú\"\n            >\n              {open ? (\n                <XMarkIcon className=\"h-10 w-10\" />   \n              ) : (\n                <Bars3Icon className=\"h-10 w-10\" />  \n              )}\n            </Disclosure.Button>\n          </div>\n\n          {/* ----------------------- Panel móvil ------------------------- */}\n          <Disclosure.Panel className=\"border-t bg-white/95 backdrop-blur md:hidden\">\n            <nav className=\"container mx-auto flex flex-col gap-5 py-5 text-base font-medium text-gray-700\">\n              {links.map(({ to, label, action }) =>\n                action ? (\n                  <button\n                    key={label}\n                    onClick={action}\n                    className=\"text-left transition-colors hover:text-brand\"\n                  >\n                    {label}\n                  </button>\n                ) : (\n                  <NavLink\n                    key={label}\n                    to={to!}\n                    className={({ isActive }) =>\n                      `transition-colors hover:text-brand ${\n                        isActive ? 'text-brand' : ''\n                      }`\n                    }\n                  >\n                    {label}\n                  </NavLink>\n                )\n              )}\n            </nav>\n          </Disclosure.Panel>\n        </>\n      )}\n    </Disclosure>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/Home/FAQ.tsx": "import { Disclosure } from '@headlessui/react';\nimport { ChevronUpIcon } from '@heroicons/react/24/outline';\nimport Container from '../shared/Container';\n\nconst FAQS = [\n  ['¿Cómo se gestionan los pagos?', 'Usamos Stripe Connect para retener la fianza y liberar el pago una vez devuelto el ítem.'],\n  ['¿Qué pasa si mi herramienta se daña?', 'Dispones de un seguro opcional a todo riesgo y sistema de valoraciones para vetar a malos usuarios.'],\n  ['¿Puedo cancelar una reserva?', 'Sí, hasta 12 h antes sin penalización.'],\n  ['¿Hay comisión?', 'Solo cobramos un 8 % al propietario cuando se confirma el alquiler.']\n];\n\nexport default function FAQ() {\n  return (\n    <section className=\"bg-gray-50 py-16\">\n      <Container>\n        <h2 className=\"mb-8 text-center text-3xl font-bold\">Preguntas frecuentes</h2>\n\n        <div className=\"mx-auto max-w-3xl space-y-4\">\n          {FAQS.map(([q, a]) => (\n            <Disclosure key={q}>\n              {({ open }) => (\n                <>\n                  <Disclosure.Button className=\"flex w-full items-center justify-between rounded-md bg-white px-4 py-3 text-left text-sm font-medium shadow\">\n                    {q}\n                    <ChevronUpIcon\n                      className={`h-5 w-5 transition-transform ${open ? 'rotate-180' : ''}`}\n                    />\n                  </Disclosure.Button>\n                  <Disclosure.Panel className=\"px-4 pt-2 text-sm text-gray-600\">\n                    {a}\n                  </Disclosure.Panel>\n                </>\n              )}\n            </Disclosure>\n          ))}\n        </div>\n      </Container>\n    </section>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/Home/Stats.tsx": "import { useEffect, useRef, useState } from 'react';\nimport Container from '../shared/Container';\n\nconst DATA = [\n  { label: 'Ítems publicados', value: 3124 },\n  { label: 'Usuarios registrados', value: 857 },\n  { label: '€ ahorrados', value: 24367 }\n];\n\nexport default function Stats() {\n  /* animate on scroll into view */\n  const ref = useRef<HTMLDivElement>(null);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    const el = ref.current;\n    if (!el) return;\n    const io = new IntersectionObserver(\n      ([e]) => e.isIntersecting && setVisible(true),\n      { threshold: 0.4 }\n    );\n    io.observe(el);\n    return () => io.disconnect();\n  }, []);\n\n  return (\n    <section ref={ref} className=\"bg-white py-12\">\n      <Container>\n        <div className=\"grid gap-8 sm:grid-cols-3\">\n          {DATA.map(({ label, value }) => (\n            <div key={label} className=\"text-center\">\n              <p className=\"text-4xl font-extrabold text-brand\">\n                {visible ? value.toLocaleString() : '0'}\n              </p>\n              <p className=\"mt-2 text-sm font-medium text-gray-600\">{label}</p>\n            </div>\n          ))}\n        </div>\n      </Container>\n    </section>\n  );\n}\n",
    "rental-mvp-micro/services/frontend/src/components/Home/LogoCloud.tsx": "import Container from '../shared/Container';\n\nconst LOGOS = [\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Bosch',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Makita',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Black+%26+Decker',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Dewalt',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=GoPro',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Xiaomi'\n];\n\nexport default function LogoCloud() {\n  return (\n    <SectionWrapper>\n      <Container>\n        <div className=\"grid grid-cols-2 items-center gap-8 opacity-70 sm:grid-cols-3 lg:grid-cols-6\">\n          {LOGOS.map(src => (\n            <img\n              key={src}\n              src={src}\n              alt=\"\"\n              className=\"mx-auto h-12 w-auto object-contain grayscale\"\n              loading=\"lazy\"\n            />\n          ))}\n        </div>\n      </Container>\n    </SectionWrapper>\n  );\n}\n\nfunction SectionWrapper({ children }: { children: React.ReactNode }) {\n  return <section className=\"bg-gray-50 py-12\">{children}</section>;\n}\n",
    "rental-mvp-micro/services/frontend/src/components/Home/Testimonials.tsx": "import Container from '../shared/Container';\n\nconst TESTIMONIALS = [\n  {\n    name: 'Laura P.',\n    text: 'Alquilé mi cámara reflex y pagué las vacaciones. ¡Súper fácil!',\n    avatar: 'https://source.unsplash.com/48x48/?woman,face'\n  },\n  {\n    name: 'Carlos G.',\n    text: 'Encontré un taladro a 5 € y no tuve que comprar uno nuevo.',\n    avatar: 'https://source.unsplash.com/48x48/?man,face'\n  },\n  {\n    name: 'Marta S.',\n    text: 'Me encanta la seguridad del pago con fianza. Repetiré.',\n    avatar: 'https://source.unsplash.com/48x48/?lady,face'\n  }\n];\n\nexport default function Testimonials() {\n  return (\n    <SectionWrapper>\n      <Container>\n        <h2 className=\"mb-10 text-center text-3xl font-bold\">Historias reales</h2>\n\n        {/* slider */}\n        <div className=\"flex snap-x gap-6 overflow-x-auto pb-4 sm:justify-center\">\n          {TESTIMONIALS.map(t => (\n            <article\n              key={t.name}\n              className=\"snap-center shrink-0 rounded-xl bg-white p-6 shadow-card sm:w-80\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img\n                  src={t.avatar}\n                  alt=\"\"\n                  className=\"h-10 w-10 rounded-full object-cover\"\n                  loading=\"lazy\"\n                />\n                <p className=\"font-semibold\">{t.name}</p>\n              </div>\n              <p className=\"mt-4 text-sm text-gray-600\">“{t.text}”</p>\n            </article>\n          ))}\n        </div>\n      </Container>\n    </SectionWrapper>\n  );\n}\n\nfunction SectionWrapper({ children }: { children: React.ReactNode }) {\n  return <section className=\"bg-white py-16\">{children}</section>;\n}\n",
    "rental-mvp-micro/services/frontend/src/components/filters/FiltersSidebar.tsx": "import { Disclosure } from '@headlessui/react';\nimport useCategories, { Category } from '../../features/categories/useCategories';\n\ntype Filters = {\n  name?: string;\n  min_price?: number;\n  max_price?: number;\n  categories?: number[];\n  order?: 'price_asc' | 'price_desc' | 'name';\n};\n\ntype Props = {\n  value: Filters;\n  onChange: (f: Filters) => void;\n  onReset: () => void;\n};\n\nexport default function FiltersSidebar({ value, onChange, onReset }: Props) {\n  const { data: cats } = useCategories();\n\n  const toggleCat = (id: number) => {\n    const list = new Set(value.categories ?? []);\n    list.has(id) ? list.delete(id) : list.add(id);\n    onChange({ ...value, categories: [...list] });\n  };\n\n  return (\n    <div className=\"space-y-6 w-full md:w-60 lg:w-72\">\n      {/* Search */}\n      <input\n        placeholder=\"Buscar…\"\n        className=\"form-input w-full\"\n        value={value.name ?? ''}\n        onChange={e => onChange({ ...value, name: e.target.value || undefined })}\n      />\n\n      {/* Price */}\n      <Disclosure defaultOpen>\n        {({ open }) => (\n          <>\n            <Disclosure.Button className=\"flex w-full justify-between text-sm font-semibold\">\n              Precio {open ? '−' : '+'}\n            </Disclosure.Button>\n            <Disclosure.Panel className=\"mt-3 space-y-2\">\n              <input\n                type=\"number\"\n                min={0}\n                step={0.1}\n                placeholder=\"mín\"\n                className=\"form-input w-full\"\n                value={value.min_price ?? ''}\n                onChange={e =>\n                  onChange({\n                    ...value,\n                    min_price: e.target.value ? Number(e.target.value) : undefined\n                  })\n                }\n              />\n              <input\n                type=\"number\"\n                min={0}\n                step={0.1}\n                placeholder=\"máx\"\n                className=\"form-input w-full\"\n                value={value.max_price ?? ''}\n                onChange={e =>\n                  onChange({\n                    ...value,\n                    max_price: e.target.value ? Number(e.target.value) : undefined\n                  })\n                }\n              />\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      {/* Categories */}\n      <Disclosure defaultOpen>\n        {({ open }) => (\n          <>\n            <Disclosure.Button className=\"flex w-full justify-between text-sm font-semibold\">\n              Categorías {open ? '−' : '+'}\n            </Disclosure.Button>\n            <Disclosure.Panel className=\"mt-3 flex flex-wrap gap-2\">\n              {cats.map((c: Category) => {\n                const active = value.categories?.includes(c.id);\n                return (\n                  <button\n                    key={c.id}\n                    onClick={() => toggleCat(c.id)}\n                    className={\n                      active\n                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'\n                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'\n                    }\n                  >\n                    {c.name}\n                  </button>\n                );\n              })}\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      {/* Order */}\n      <select\n        className=\"form-select w-full\"\n        value={value.order ?? ''}\n        onChange={e =>\n          onChange({\n            ...value,\n            order: e.target.value ? (e.target.value as Filters['order']) : undefined\n          })\n        }\n      >\n        <option value=\"\">Ordenar por…</option>\n        <option value=\"price_asc\">Precio ↑</option>\n        <option value=\"price_desc\">Precio ↓</option>\n        <option value=\"name\">Nombre</option>\n      </select>\n\n      <button onClick={onReset} className=\"btn--ghost w-full\">\n        Limpiar filtros\n      </button>\n    </div>\n  );\n}\n",
    "rental-mvp-micro/services/rentals/requirements.txt": "fastapi==0.116.0\nuvicorn==0.35.0\n\npydantic==2.11.7\npydantic-core==2.33.2\npydantic-settings==2.10.1\n\nSQLAlchemy==2.0.41\npsycopg2-binary==2.9.9          # ← Postgres\n\npython-jose[cryptography]==3.5.0\npython-dotenv==1.1.1\n\nhttpx==0.27.0                   # 🔥 llamadas al micro-servicio Catálogo\n\nalembic==1.16.4\nemail-validator==2.1.1\n\n# rendimiento opc.\nuvloop==0.21.0\nhttptools==0.6.4\n",
    "rental-mvp-micro/services/rentals/.env": "# DB propia del micro-servicio\nDATABASE_URL=postgresql+psycopg2://rentals_user:rentals_pass@rentals-db:5432/rentals\n\n# usamos la misma clave/algoritmo que los otros servicios para validar JWT\nSECRET_KEY=SuperClaveUltraSecreta\nALGORITHM=HS256\n\n# URL interna para hablar con Catalog\nCATALOG_API_BASE=http://catalog:8000/api\n",
    "rental-mvp-micro/services/rentals/Dockerfile": "FROM python:3.12-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends build-essential libpq-dev libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nENV PYTHONPATH=/app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# código + alembic + configuración\nCOPY app/          ./app\nCOPY alembic.ini   .\nCOPY migrations/   ./migrations\nCOPY .env          .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "rental-mvp-micro/services/rentals/alembic.ini": "[alembic]\nscript_location = migrations\nprepend_sys_path = .\nsqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}\nversion_path_separator = os\n\n\n# ────────────── Logging ──────────────\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel    = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel     = WARN\nhandlers  =\nqualname  = sqlalchemy.engine\n\n[logger_alembic]\nlevel     = INFO\nhandlers  =\nqualname  = alembic\n\n[handler_console]\nclass     = StreamHandler\nargs      = (sys.stderr,)\nlevel     = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat   = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt  = %H:%M:%S\n",
    "rental-mvp-micro/services/rentals/test_rentals.sh": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nAUTH=http://localhost:8001/api/auth\nCAT=http://localhost:8002/api\nREN=http://localhost:8003/api/rentals\n\nUSER=alice\nMAIL=alice@example.com\nPASS=secret\n\nj() { jq -C .; }          # pretty-json coloreado\nauth() { curl -s \"$@\" \"${HDR[@]}\"; }\n\necho \"──── 1) signup ────\"\ncurl -s -X POST $AUTH/signup \\\n     -H 'Content-Type: application/json' \\\n     -d \"{\\\"username\\\":\\\"$USER\\\",\\\"email\\\":\\\"$MAIL\\\",\\\"password\\\":\\\"$PASS\\\"}\" \\\n  | j || echo \"(ya existe)\"\n\necho \"──── 2) login ─────\"\nTOKEN=$(curl -s -X POST $AUTH/token \\\n              -H 'Content-Type: application/x-www-form-urlencoded' \\\n              -d \"username=$USER&password=$PASS\" | jq -r .access_token)\nHDR=(-H \"Authorization: Bearer $TOKEN\")\necho \"JWT: $TOKEN\"\n\necho \"──── 3) category & item (en catalog) ─────\"\nCID=$(curl -s $CAT/categories/ | jq '.[] | select(.name==\"Herramientas\") | .id')\nif [[ -z $CID ]]; then\n  CID=$(auth -X POST $CAT/categories/ -H 'Content-Type: application/json' \\\n        -d '{\"name\":\"Herramientas\"}' | jq -r .id)\nfi\nITEM=$(auth -X POST $CAT/items/ -H 'Content-Type: application/json' -d @- <<EOF\n{\n  \"name\":\"Taladro Bosch\",\n  \"description\":\"800 W\",\n  \"price_per_h\":4.5,\n  \"categories\":[$CID],\n  \"image_urls\":[\"https://picsum.photos/seed/taladro/800/600\"]\n}\nEOF\n)\nIID=$(echo \"$ITEM\" | jq -r .id)\necho \"item_id = $IID\"\n\necho \"──── 4) crear alquiler ─────\"\nRENT=$(auth -X POST $REN/ -H 'Content-Type: application/json' -d @- <<EOF\n{\n  \"item_id\": $IID,\n  \"start_at\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\",\n  \"end_at\":   \"$(date -u -d '+2 hour' +\"%Y-%m-%dT%H:%M:%SZ\")\"\n}\nEOF\n) && echo \"$RENT\" | j\nRID=$(echo \"$RENT\" | jq -r .id)\n\necho \"──── 5) mis alquileres ─────\"\nauth $REN/me | j\n\necho \"──── 6) devolución ─────\"\nauth -X POST $REN/$RID/return | j\n",
    "rental-mvp-micro/services/rentals/migrations/script.py.mako": "",
    "rental-mvp-micro/services/rentals/migrations/README": "",
    "rental-mvp-micro/services/rentals/migrations/env.py": "\"\"\"Alembic env – Rentals\"\"\"\nfrom __future__ import annotations\n\nfrom logging.config import fileConfig\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\n\nconfig = context.config\nfileConfig(config.config_file_name)\n\nfrom app.models.models import Base                # noqa: E402\ntarget_metadata = Base.metadata\ntarget_metadata.naming_convention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\n\nfrom app.core.config import settings             # noqa: E402\nconfig.set_main_option(\"sqlalchemy.url\", settings.DATABASE_URL)\n\n\ndef run_offline() -> None:\n    context.configure(\n        url=settings.DATABASE_URL,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n        compare_type=True,\n        compare_server_default=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_online() -> None:\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n    with connectable.connect() as conn:\n        context.configure(\n            connection=conn,\n            target_metadata=target_metadata,\n            compare_type=True,\n            compare_server_default=True,\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_offline()\nelse:\n    run_online()\n",
    "rental-mvp-micro/services/rentals/migrations/versions/20250714_0001_initial.py": "\"\"\"Inicial – tabla rentals\n\nRevision ID: 20250714_0001\nRevises:\nCreate Date: 2025-07-14 00:15:00\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n# ─────────── Meta ───────────\nrevision: str = \"20250714_0001\"\ndown_revision: str | None = None\nbranch_labels: tuple | None = None\ndepends_on: tuple | None = None\n\n\n# ─────────── Upgrade ────────\ndef upgrade() -> None:\n    op.create_table(\n        \"rentals\",\n        sa.Column(\"id\", sa.Integer(), primary_key=True),\n        sa.Column(\"item_id\", sa.Integer(), nullable=False),\n        sa.Column(\"renter_username\", sa.String(), nullable=False),\n        sa.Column(\"start_at\", sa.DateTime(), nullable=False),\n        sa.Column(\"end_at\", sa.DateTime(), nullable=False),\n        sa.Column(\"deposit\", sa.Float(), nullable=False),\n        sa.Column(\"returned\", sa.Boolean(), server_default=sa.false(), nullable=False),\n    )\n    op.create_index(\"ix_rentals_item_id\", \"rentals\", [\"item_id\"])\n    op.create_index(\"ix_rentals_renter_username\", \"rentals\", [\"renter_username\"])\n\n\n# ─────────── Downgrade ──────\ndef downgrade() -> None:\n    op.drop_index(\"ix_rentals_renter_username\", table_name=\"rentals\")\n    op.drop_index(\"ix_rentals_item_id\", table_name=\"rentals\")\n    op.drop_table(\"rentals\")\n",
    "rental-mvp-micro/services/rentals/migrations/versions/.gitkeep": "",
    "rental-mvp-micro/services/rentals/app/main.py": "# services/rentals/app/main.py\nfrom fastapi import FastAPI\n\nfrom app.api import rentals\nfrom app.models.database import Base, engine\nimport app.models.models                         #  noqa: F401\n\napp = FastAPI(\n    title=\"rental-mvp – Rentals Service\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    openapi_url=\"/openapi.json\",\n)\n\n@app.on_event(\"startup\")\ndef _init_db() -> None:\n    Base.metadata.create_all(bind=engine)\n\napp.include_router(rentals.router, prefix=\"/api/rentals\", tags=[\"rentals\"])\n",
    "rental-mvp-micro/services/rentals/app/__init__.py": "",
    "rental-mvp-micro/services/rentals/app/deps.py": "from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom sqlalchemy.orm import Session\n\nfrom app.models.database import SessionLocal\nfrom app.core.config import settings\n\n# ───────── DB\ndef get_db() -> Session:\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n# ───────── JWT – solo extraemos el username\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"dummy\")\n\n\ndef get_current_username(token: str = Depends(oauth2_scheme)) -> str:\n    cred_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Credenciales no válidas\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        sub: str | None = payload.get(\"sub\")\n        if not sub:\n            raise cred_exc\n        return sub\n    except JWTError:\n        raise cred_exc\n",
    "rental-mvp-micro/services/rentals/app/models/models.py": "# services/rentals/app/models/models.py\nfrom __future__ import annotations\n\nimport datetime\nimport enum\nfrom sqlalchemy import (\n    Boolean,\n    Column,\n    DateTime,\n    Enum,\n    Float,\n    Integer,\n    String,\n)\n\nfrom app.models.database import Base\n\n\nclass RentalStatus(str, enum.Enum):\n    pending = \"pending\"      # reserva creada, a la espera de pagar\n    confirmed = \"confirmed\"  # fianza retenida\n    returned = \"returned\"    # ítem devuelto y cargo capturado\n\n\nclass Rental(Base):\n    __tablename__ = \"rentals\"\n\n    id = Column(Integer, primary_key=True)\n    item_id = Column(Integer, nullable=False, index=True)\n    renter_username = Column(String, nullable=False, index=True)\n\n    start_at = Column(DateTime, default=datetime.datetime.utcnow)\n    end_at = Column(DateTime)\n\n    deposit = Column(Float, nullable=False)\n\n    # --- nuevos campos ---\n    status = Column(\n        Enum(RentalStatus, name=\"rental_status\"),\n        default=RentalStatus.pending,\n        nullable=False,\n    )\n    returned = Column(Boolean, default=False)  # compatibilidad legado\n",
    "rental-mvp-micro/services/rentals/app/models/__init__.py": "",
    "rental-mvp-micro/services/rentals/app/models/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.core.config import settings\n\nengine = create_engine(settings.DATABASE_URL, echo=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n",
    "rental-mvp-micro/services/rentals/app/schemas/rental.py": "from __future__ import annotations\n\nfrom datetime import datetime\nfrom pydantic import BaseModel, field_validator, PositiveFloat\nfrom typing import Literal\n\nclass RentalCreate(BaseModel):\n    item_id: int\n    start_at: datetime\n    end_at: datetime\n\n    @field_validator(\"end_at\")\n    @classmethod\n    def end_must_be_after_start(cls, v: datetime, info):\n        start = info.data[\"start_at\"]\n        if v <= start:\n            raise ValueError(\"end_at debe ser posterior a start_at\")\n        return v\n\n\n# 🛈 “ItemSnapshot” es la versión mínima que necesita el front\nclass ItemSnapshot(BaseModel):\n    id: int\n    name: str\n    price_per_h: PositiveFloat\n    image_url: str | None = None\n    image_urls: list[str] | None = None\n    available: bool | None = None\n\n\nclass RentalOut(RentalCreate):\n    id: int\n    deposit: float\n    status: Literal[\"pending\", \"confirmed\", \"returned\"]\n    renter_username: str\n    item: ItemSnapshot\n",
    "rental-mvp-micro/services/rentals/app/schemas/__init__.py": "from .rental import RentalCreate, RentalOut\n__all__ = [\"RentalCreate\", \"RentalOut\"]\n",
    "rental-mvp-micro/services/rentals/app/crud/rental.py": "from __future__ import annotations\n\nimport math\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom typing import List\n\nimport httpx\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import Rental\nfrom app.schemas.rental import RentalCreate\nfrom app.core.config import settings\n\n\n# ───────── helpers internos ───────────────────────────────────────────────\nasync def _fetch_item(item_id: int) -> dict:\n    \"\"\"\n    Llama al micro-servicio **Catalog** para obtener el item\n    (levanta HTTPError si no existe / 404).\n    \"\"\"\n    url = f\"{settings.CATALOG_API_BASE}/items/{item_id}\"\n    async with httpx.AsyncClient() as client:\n        r = await client.get(url, timeout=5.0)\n        r.raise_for_status()\n        return r.json()\n\n\ndef _calc_deposit(hours: float, price: float) -> float:\n    \"\"\"\n    Depósito = 120 % del coste estimado (redondeado a 2 decimales).\n    \"\"\"\n    raw = Decimal(hours * price * 1.2)\n    return float(raw.quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP))\n\n\n# ───────── CRUD público ───────────────────────────────────────────────────\nasync def create_rental(\n    db: Session,\n    renter_username: str,\n    rent_in: RentalCreate,\n) -> Rental:\n    item = await _fetch_item(rent_in.item_id)            # -- HTTP → Catalog\n\n    if not item[\"available\"]:\n        raise ValueError(\"Item no disponible\")\n\n    hours = (rent_in.end_at - rent_in.start_at).total_seconds() / 3600\n    deposit = _calc_deposit(hours, item[\"price_per_h\"])\n\n    db_rental = Rental(\n        renter_username=renter_username,\n        deposit=deposit,\n        returned=False,\n        **rent_in.model_dump(),\n    )\n    db.add(db_rental)\n    db.commit()\n    db.refresh(db_rental)\n    return db_rental\n\n\ndef get_rental(db: Session, rental_id: int) -> Rental | None:\n    return db.query(Rental).filter(Rental.id == rental_id).first()\n\n\ndef get_rentals_by_user(db: Session, username: str) -> List[Rental]:\n    return db.query(Rental).filter(Rental.renter_username == username).all()\n\n\ndef mark_returned(db: Session, rental: Rental) -> Rental:\n    rental.returned = True\n    db.commit()\n    db.refresh(rental)\n    return rental\n",
    "rental-mvp-micro/services/rentals/app/crud/__init__.py": "from .rental import (\n    create_rental,\n    get_rental,\n    get_rentals_by_user,\n    mark_returned,\n)\n__all__ = [\n    \"create_rental\",\n    \"get_rental\",\n    \"get_rentals_by_user\",\n    \"mark_returned\",\n]\n",
    "rental-mvp-micro/services/rentals/app/core/__init__.py": "",
    "rental-mvp-micro/services/rentals/app/core/config.py": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    DATABASE_URL: str\n    SECRET_KEY: str\n    CATALOG_API_BASE: str           # p. ej. http://catalog:8000/api\n    ALGORITHM: str = \"HS256\"\n\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n\nsettings = Settings()\n",
    "rental-mvp-micro/services/rentals/app/core/security.py": "",
    "rental-mvp-micro/services/rentals/app/api/rentals.py": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db, get_current_username\n\nrouter = APIRouter()\n\n\n# ────────────── crear alquiler ────────────────────────────────────────────\n@router.post(\n    \"/\",\n    response_model=schemas.RentalOut,\n    status_code=status.HTTP_201_CREATED,\n)\nasync def rent_item(\n    rent_in: schemas.RentalCreate,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    try:\n        rental = await crud.create_rental(db, username, rent_in)\n    except ValueError as exc:\n        raise HTTPException(400, str(exc))\n    return await _with_item(rental)\n\n\n# ────────────── lista del usuario ─────────────────────────────────────────\n@router.get(\"/me\", response_model=List[schemas.RentalOut])\nasync def my_rentals(\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    rentals = crud.get_rentals_by_user(db, username)\n    return [await _with_item(r) for r in rentals]\n\n\n# ────────────── devolución ────────────────────────────────────────────────\n@router.post(\"/{rental_id}/return\", response_model=schemas.RentalOut)\nasync def return_item(\n    rental_id: int,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    rental = crud.get_rental(db, rental_id)\n    if not rental or rental.renter_username != username:\n        raise HTTPException(404, \"Alquiler no encontrado\")\n    rental = crud.mark_returned(db, rental)\n    return await _with_item(rental)\n\n\n# ────────────── helper común ──────────────────────────────────────────────\nimport httpx\nfrom app.core.config import settings\nfrom app.schemas.rental import ItemSnapshot\n\n\nasync def _with_item(rental) -> schemas.RentalOut:\n    \"\"\"\n    Añade el snapshot del item a la salida para que el front no\n    necesite hacer otra llamada.\n    \"\"\"\n    url = f\"{settings.CATALOG_API_BASE}/items/{rental.item_id}\"\n    async with httpx.AsyncClient() as client:\n        item_json = {}\n        try:\n            r = await client.get(url, timeout=5.0)\n            if r.status_code == 200:\n                item_json = r.json()\n        except httpx.HTTPError:\n            pass\n\n    return schemas.RentalOut(\n        **rental.__dict__,\n        item=ItemSnapshot(**item_json) if item_json else ItemSnapshot(\n            id=rental.item_id,\n            name=\"Desconocido\",\n            price_per_h=0,\n        ),\n    )\n",
    "rental-mvp-micro/services/rentals/app/api/__init__.py": "",
    "rental-mvp-micro/services/upload/requirements.txt": "fastapi==0.116.0\nuvicorn==0.35.0\npython-multipart==0.0.6\npython-jose[cryptography]==3.5.0\npydantic-settings==2.10.1\n",
    "rental-mvp-micro/services/upload/.env": "SECRET_KEY=SuperClaveUltraSecreta\nALGORITHM=HS256",
    "rental-mvp-micro/services/upload/test_upload.sh": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\n# ───────── Endpoints ────────────────────────────────────────────────────\nAUTH=http://localhost:8001/api/auth\nUPLD=http://localhost:8004/api/upload\n\nUSER=alice\nMAIL=alice@example.com\nPASS=secret\n\n# ───────── Imagen a subir ───────────────────────────────────────────────\n# 1º argumento o, si no, intenta localizar una cualquiera en el repo\nif [[ $# -ge 1 ]]; then\n  IMG_PATH=$1\nelse\n  # busca la primera .png|.jpg dentro de backend/uploads/ (dummy data del monolito)\n  IMG_PATH=$(find ../../backend/uploads -type f -regex '.*\\.\\(png\\|jpe?g\\)$' | head -n 1 || true)\n  [[ -z $IMG_PATH ]] && { echo \"❌ No se encontró ninguna imagen de ejemplo. Pasa la ruta como argumento.\"; exit 1; }\nfi\necho \"Usando imagen: $IMG_PATH\"\n\nj() { jq -C .; }                      # pretty-json helper\nauth() { curl -s \"$@\" \"${HDR[@]}\"; }  # wrapper con token\n\n# ───── 1) signup (ignora error si existe) ───────────────────────────────\necho \"──── 1) signup ────\"\ncurl -s -X POST $AUTH/signup \\\n     -H 'Content-Type: application/json' \\\n     -d \"{\\\"username\\\":\\\"$USER\\\",\\\"email\\\":\\\"$MAIL\\\",\\\"password\\\":\\\"$PASS\\\"}\" \\\n  | j || echo \"(ya existe)\"\n\n# ───── 2) login ────────────────────────────────────────────────────────\necho \"──── 2) login ─────\"\nTOKEN=$(curl -s -X POST $AUTH/token \\\n              -H 'Content-Type: application/x-www-form-urlencoded' \\\n              -d \"username=$USER&password=$PASS\" | jq -r .access_token)\nHDR=(-H \"Authorization: Bearer $TOKEN\")\necho \"JWT: $TOKEN\"\n\n# ───── 3) upload ───────────────────────────────────────────────────────\necho \"──── 3) subir imagen ─────\"\nRESP=$(curl -s \"${HDR[@]}\" -F \"file=@${IMG_PATH}\" \"$UPLD/\")\necho \"$RESP\" | j\nURL=$(echo \"$RESP\" | jq -r .url)\n\n# ───── 4) HEAD de la URL pública ───────────────────────────────────────\necho \"──── 4) HEAD $URL ─────\"\ncurl -I \"$URL\" | sed 's/^/   /'\necho -e \"\\n✔️  Debe ser 200 OK y content-type image/*\"\n",
    "rental-mvp-micro/services/upload/Dockerfile": "FROM python:3.12-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends build-essential libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nENV PYTHONPATH=/app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# código\nCOPY app/          ./app\nCOPY .env          .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "rental-mvp-micro/services/upload/app/main.py": "from fastapi import FastAPI\nfrom app.api import router as api_router\nfrom app.api.upload import mount_static     # reutilizamos la helper\n\napp = FastAPI(title=\"Upload-Service\")\n\n# Rutas de API (quedarán bajo /api)\napp.include_router(api_router, prefix=\"/api\")\n\n# Ficheros estáticos (imágenes subidas)\nmount_static(app)\n",
    "rental-mvp-micro/services/upload/app/__init__.py": "",
    "rental-mvp-micro/services/upload/app/deps.py": "from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\n\nfrom app.core.config import settings\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"dummy\")   # solo validamos\n\ndef get_current_username(token: str = Depends(oauth2_scheme)) -> str:\n    cred_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Credenciales no válidas\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        sub: str | None = payload.get(\"sub\")\n        if not sub:\n            raise cred_exc\n        return sub\n    except JWTError:\n        raise cred_exc\n",
    "rental-mvp-micro/services/upload/app/core/__init__.py": "",
    "rental-mvp-micro/services/upload/app/core/config.py": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\nclass Settings(BaseSettings):\n    SECRET_KEY: str\n    ALGORITHM: str = \"HS256\"\n\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\nsettings = Settings()\n",
    "rental-mvp-micro/services/upload/app/api/__init__.py": "from fastapi import APIRouter\nfrom .upload import router as upload_router\n\nrouter = APIRouter()\nrouter.include_router(upload_router)          # ⇒ /api/upload/…\n",
    "rental-mvp-micro/services/upload/app/api/upload.py": "# services/upload/app/api/upload.py\n\"\"\"\nEndpoint privado para subir imágenes y exponerlas luego en /uploads/…\nDevuelve **SIEMPRE** la ruta relativa “/uploads/<uuid>.<ext>” para que el\nfrontend la combine con su propio dominio (evitamos el host interno “upload”).\n\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport shutil\nimport uuid\nfrom pathlib import Path\nfrom typing import Annotated\n\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    File,\n    HTTPException,\n    Request,\n    UploadFile,\n    status,\n)\nfrom fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\nfrom fastapi.staticfiles import StaticFiles\nfrom jose import JWTError, jwt\n\n# ────────────────────────────────────────────────────────────────────────────\n# Configuración global\n# ────────────────────────────────────────────────────────────────────────────\nBASE_DIR = Path(__file__).resolve().parent.parent\nUPLOAD_DIR = BASE_DIR / \"uploads\"\nUPLOAD_DIR.mkdir(exist_ok=True)\n\n# La clave/algoritmo deben ser los mismos que usa el auth-service\nJWT_SECRET = os.getenv(\"SECRET_KEY\", \"SuperClaveUltraSecreta\")\nJWT_ALGORITHM = os.getenv(\"ALGORITHM\", \"HS256\")\n\n# ────────────────────────────────────────────────────────────────────────────\n# Seguridad (Bearer JWT)\n# ────────────────────────────────────────────────────────────────────────────\nsecurity = HTTPBearer()\n\n\ndef get_current_username(\n    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n) -> str:\n    token = credentials.credentials\n    try:\n        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])\n        username: str | None = payload.get(\"sub\")\n        if not username:\n            raise ValueError\n        return username\n    except (JWTError, ValueError):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Token JWT inválido\",\n        )\n\n\n# ────────────────────────────────────────────────────────────────────────────\n# Router\n# ────────────────────────────────────────────────────────────────────────────\nrouter = APIRouter(prefix=\"/upload\", tags=[\"upload\"])\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def upload_image(\n    request: Request,\n    file: UploadFile = File(...),\n    _user: str = Depends(get_current_username),  # protegido con JWT\n):\n    # 1) validar tipo mime\n    if not file.content_type.startswith(\"image/\"):\n        raise HTTPException(400, \"Solo se permiten imágenes\")\n\n    # 2) generar nombre único y guardar\n    ext = Path(file.filename).suffix\n    filename = f\"{uuid.uuid4()}{ext}\"\n    filepath = UPLOAD_DIR / filename\n    try:\n        with filepath.open(\"wb\") as buffer:\n            shutil.copyfileobj(file.file, buffer)\n    finally:\n        file.file.close()\n\n    # 3) ruta pública **relativa**\n    return {\"filename\": filename, \"url\": f\"/uploads/{filename}\"}\n\n\n# ────────────────────────────────────────────────────────────────────────────\n# Montaje estático (/uploads)  →  se llama desde app.main\n# ────────────────────────────────────────────────────────────────────────────\ndef mount_static(app):\n    app.mount(\"/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\n",
    "rental-mvp-micro/services/payments/requirements.txt": "fastapi==0.116.0\nuvicorn==0.35.0\nstripe==9.5.0               # SDK oficial\npython-multipart==0.0.6\npydantic-settings==2.10.1\n",
    "rental-mvp-micro/services/payments/.env": "# payments/.env  (test mode)\nSTRIPE_SECRET_KEY=sk_test_51RkNe1BAdmER2zaJGyKPFTWV3a3mJ5MtgUhLsyoH4NIYDRDGm8thv6dnOYyUNIqgngTMSk34IY6QkfhTu6wY8Hv300yTE5xy67\nSTRIPE_PUBLISHABLE_KEY=pk_test_51RkNe1BAdmER2zaJNEdcxq6T7uBwtyGDiHaFRF5I9LjGGbbYxmvPfdffr4HLqZy753gB6ixJRFfu7HXRsntuCGyH00szhzRTcx\nSTRIPE_WEBHOOK_SECRET=whsec_d42657ee524a1103317e68c4b982a8706ba436ffc37124d5ea797eb08535b52e\n\nFRONTEND_URL=http://localhost\nALLOWED_ORIGINS=http://localhost:5173,http://localhost\n",
    "rental-mvp-micro/services/payments/Dockerfile": "FROM python:3.12-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends build-essential libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nENV PYTHONPATH=/app          \n\n# dependencias\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# ----------  ¡aquí estaba el problema!  ----------\n# copia el *directorio*  app/  ⇒  /app/app/   ✅\nCOPY app/ ./app\n# -----------------------------------------------\n\nCOPY .env .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "rental-mvp-micro/services/payments/alembic.ini": "[alembic]\nscript_location = %(here)s/migrations\nsqlalchemy.url = %(DATABASE_URL)s\nprepend_sys_path = .\n\n[loggers]\nkeys = root,alembic,sqlalchemy\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARNING\nhandlers = console\n\n[logger_alembic]\nlevel = INFO\nhandlers = console\nqualname = alembic\n\n[logger_sqlalchemy]\nlevel = WARNING\nhandlers = console\nqualname = sqlalchemy.engine\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-7s %(name)s: %(message)s\n",
    "rental-mvp-micro/services/payments/migrations/script.py.mako": "",
    "rental-mvp-micro/services/payments/migrations/env.py": "",
    "rental-mvp-micro/services/payments/app/main.py": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom app.core.config import settings\nfrom app.api import router as api_router\n\napp = FastAPI(title=\"Payments-Service\")\n\n# CORS (frontend local)\norigins = (settings.ALLOWED_ORIGINS or \"\").split(\",\")\nif origins:\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=origins,\n        allow_methods=[\"POST\"],\n        allow_headers=[\"*\"],\n    )\n\napp.include_router(api_router, prefix=\"/api\")\n",
    "rental-mvp-micro/services/payments/app/__init__.py": "",
    "rental-mvp-micro/services/payments/app/deps.py": "import stripe\nfrom fastapi import Header, HTTPException\n\nfrom app.core.config import settings\n\nstripe.api_key = settings.secret_key\n\n\ndef get_stripe():\n    \"\"\"Devuelve el cliente Stripe configurado (inyección de dependencias).\"\"\"\n    return stripe\n\n\ndef verify_webhook(\n    stripe_signature: str | None = Header(None, alias=\"Stripe-Signature\"),\n    payload: bytes | None = None,\n):\n    \"\"\"\n    Verifica la firma del webhook usando la secret generada con\n    `stripe listen`.  Lanza 400 si la firma es inválida.\n    \"\"\"\n    if payload is None:\n        raise HTTPException(status_code=400, detail=\"body empty\")\n\n    try:\n        event = stripe.Webhook.construct_event(\n            payload=payload,\n            sig_header=stripe_signature,\n            secret=settings.STRIPE_WEBHOOK_SECRET,\n        )\n        return event\n    except stripe.error.SignatureVerificationError:\n        raise HTTPException(status_code=400, detail=\"invalid signature\")\n",
    "rental-mvp-micro/services/payments/app/models/payment.py": "from sqlalchemy import Column, Integer, Float, String, Boolean, DateTime, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom datetime import datetime\nfrom app.models.database import Base\n\nclass Payment(Base):\n    __tablename__ = \"payments\"\n\n    id = Column(Integer, primary_key=True)\n    rental_id = Column(Integer, nullable=False)            # id proveniente del microservicio rentals\n    user_id   = Column(Integer, nullable=False)            # quién paga (renter)\n    owner_id  = Column(Integer, nullable=False)            # propietario del ítem (cobra)\n    amount    = Column(Float, nullable=False)              # € totales\n    currency  = Column(String(3), default=\"eur\")\n    stripe_pi = Column(String, nullable=False, unique=True)  # PaymentIntent id\n    refunded  = Column(Boolean, default=False)\n    captured  = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n",
    "rental-mvp-micro/services/payments/app/models/__init__.py": "from .payment import Payment  # noqa: F401\n",
    "rental-mvp-micro/services/payments/app/models/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, declarative_base\nfrom app.core.config import settings\n\nengine = create_engine(settings.DATABASE_URL, pool_pre_ping=True)\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\n",
    "rental-mvp-micro/services/payments/app/schemas/payment.py": "# services/payments/app/schemas/payment.py\nfrom datetime import datetime\nfrom pydantic import BaseModel, PositiveFloat, ConfigDict\n\n\nclass PaymentCreate(BaseModel):\n    rental_id: int\n    owner_id: int            # propietario (Stripe Connect)\n    amount: PositiveFloat\n    currency: str = \"eur\"\n\n\nclass PaymentOut(BaseModel):\n    id: int\n    rental_id: int\n    amount: float\n    currency: str\n    captured: bool\n    refunded: bool\n    stripe_pi: str\n    created_at: datetime\n\n    # Pydantic v2\n    model_config = ConfigDict(from_attributes=True)\n",
    "rental-mvp-micro/services/payments/app/schemas/__init__.py": "from .payment import PaymentCreate, PaymentOut\n\n__all__ = [\"PaymentCreate\", \"PaymentOut\"]\n",
    "rental-mvp-micro/services/payments/app/crud/payment.py": "from sqlalchemy.orm import Session\nfrom app.models.payment import Payment\nfrom app.schemas.payment import PaymentCreate\n\ndef create(db: Session, payment_in: PaymentCreate, stripe_pi: str) -> Payment:\n    p = Payment(**payment_in.model_dump(), stripe_pi=stripe_pi)\n    db.add(p)\n    db.commit()\n    db.refresh(p)\n    return p\n\ndef get_by_pi(db: Session, stripe_pi: str) -> Payment | None:\n    return db.query(Payment).filter(Payment.stripe_pi == stripe_pi).first()\n\ndef capture(db: Session, payment: Payment) -> Payment:\n    payment.captured = True\n    db.commit()\n    db.refresh(payment)\n    return payment\n\ndef refund(db: Session, payment: Payment) -> Payment:\n    payment.refunded = True\n    db.commit()\n    db.refresh(payment)\n    return payment\n",
    "rental-mvp-micro/services/payments/app/crud/__init__.py": "from .payment import create as create_payment, get_by_pi, capture, refund  # noqa: F401\n\n__all__ = [\"create_payment\", \"get_by_pi\", \"capture\", \"refund\"]\n",
    "rental-mvp-micro/services/payments/app/workers/settlement.py": "\"\"\"\nEjemplo de *cron worker* (Celery, RQ, etc.) que captura pagos\nuna vez confirmado que el ítem se ha devuelto.\n\"\"\"\nfrom sqlalchemy.orm import Session\nimport stripe, time\nfrom app.models.database import SessionLocal\nfrom app import crud\nfrom app.core.config import settings\n\ndef run_forever():\n    while True:\n        with SessionLocal() as db:          # type: Session\n            pending = db.query(crud.get_by_pi.__annotations__[\"return\"]).filter_by(\n                captured=False, refunded=False\n            )\n            for p in pending:\n                # Aquí llamarías al API del microservicio rentals para ver si returned = true\n                # demo: asumimos que sí tras 2 h\n                try:\n                    stripe.PaymentIntent.capture(p.stripe_pi)\n                    crud.capture(db, p)\n                except Exception as e:  # noqa: BLE001\n                    print(\"No se pudo capturar:\", e)\n\n        time.sleep(600)  # cada 10 min\n\nif __name__ == \"__main__\":\n    run_forever()\n",
    "rental-mvp-micro/services/payments/app/workers/__init__.py": "",
    "rental-mvp-micro/services/payments/app/core/__init__.py": "import stripe\nfrom app.core.config import settings\n\nstripe.api_key = settings.secret_key\n",
    "rental-mvp-micro/services/payments/app/core/config.py": "from functools import cached_property\nfrom pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    # ───── Stripe ──────────────────────────────────────────────────────────\n    STRIPE_SECRET_KEY: str | None = None       # nombre habitual\n    STRIPE_API_KEY:    str | None = None       # alias heredado\n    STRIPE_PUBLISHABLE_KEY: str\n    STRIPE_WEBHOOK_SECRET:  str\n\n    # ───── Servicio ───────────────────────────────────────────────────────\n    PLATFORM_FEE_PERCENT: int = 8              # comisión % de la plataforma\n    DOMAIN: str = \"http://localhost:8005\"\n\n    # ───── CORS ───────────────────────────────────────────────────────────\n    ALLOWED_ORIGINS: str = \"\"                  # lista separada por comas\n\n    # ───── BD (opcional) ─────────────────────────────────────────────────\n    DATABASE_URL: str | None = None\n\n    # lee .env y omite claves extra\n    model_config = {\"env_file\": \".env\", \"extra\": \"ignore\"}\n\n    # ──────────────────────────────────────────────────────────────────────\n    #  Acceso unificado a la clave secreta\n    # ──────────────────────────────────────────────────────────────────────\n    @cached_property\n    def secret_key(self) -> str:\n        \"\"\"\n        Devuelve la clave secreta de Stripe sin importar el nombre de la\n        variable.  STRIPE_SECRET_KEY tiene prioridad sobre STRIPE_API_KEY.\n        \"\"\"\n        key = self.STRIPE_SECRET_KEY or self.STRIPE_API_KEY\n        if not key:\n            raise RuntimeError(\n                \"Debes definir STRIPE_SECRET_KEY o STRIPE_API_KEY en el entorno\"\n            )\n        return key\n\n\nsettings = Settings()\n",
    "rental-mvp-micro/services/payments/app/core/stripe.py": "\"\"\"\nPequeña capa de ayuda sobre el SDK oficial de Stripe.\n\"\"\"\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom typing import Literal\n\nimport stripe\n\nfrom app.core.config import settings\n\nstripe.api_key = settings.secret_key\n\nCurrency = Literal[\"eur\", \"usd\"]\n\n\ndef _percentage(amount: int, pct: int) -> int:\n    \"\"\"\n    Devuelve `pct` % de `amount` redondeado al céntimo.\n    Ambos valores en céntimos (enteros).\n    \"\"\"\n    return int(\n        (Decimal(amount) * Decimal(pct) / Decimal(100)).quantize(\n            Decimal(\"1\"), rounding=ROUND_HALF_UP\n        )\n    )\n\n\ndef calc_app_fee(amount_cents: int) -> int:\n    \"\"\"Comisión de la plataforma en **céntimos**.\"\"\"\n    return _percentage(amount_cents, settings.PLATFORM_FEE_PERCENT)\n\n\ndef create_payment_intent(\n    amount_cents: int,\n    currency: Currency,\n    customer_id: str | None,\n    connected_account: str,\n) -> stripe.PaymentIntent:\n    \"\"\"\n    Crea un PaymentIntent *manual-capture* para un vendedor de Stripe Connect,\n    reteniendo la comisión de la plataforma.\n    \"\"\"\n    return stripe.PaymentIntent.create(\n        amount=amount_cents,\n        currency=currency,\n        payment_method_types=[\"card\"],\n        customer=customer_id,\n        capture_method=\"manual\",\n        application_fee_amount=calc_app_fee(amount_cents),\n        on_behalf_of=connected_account,\n        transfer_data={\"destination\": connected_account},\n    )\n",
    "rental-mvp-micro/services/payments/app/api/payments.py": "\"\"\"\nEndpoints\n---------\n• POST /api/payments/create-intent   -> Frontend\n• POST /api/stripe/webhook           -> Stripe\n\"\"\"\nfrom typing import Literal\n\nimport stripe\nfrom fastapi import APIRouter, Header, HTTPException, Request\nfrom pydantic import BaseModel, PositiveFloat\n\nfrom app.core.config import settings\n\nstripe.api_key = settings.secret_key\n\nrouter = APIRouter()\n\n# ───── Schemas ────────────────────────────────────────────────────────────\nclass CreateIntentIn(BaseModel):\n    amount: PositiveFloat             # € que cobra el propietario\n\n\nclass CreateIntentOut(BaseModel):\n    client_secret: str\n\n\nEUR_FACTOR: Literal[100] = 100        # euros → céntimos\n\n# ───── Endpoints ──────────────────────────────────────────────────────────\n@router.post(\"/create-intent\", response_model=CreateIntentOut)\ndef create_payment_intent(data: CreateIntentIn):\n    \"\"\"Devuelve el *client_secret* para que el Front confirme el pago.\"\"\"\n    intent = stripe.PaymentIntent.create(\n        amount=int(data.amount * EUR_FACTOR),\n        currency=\"eur\",\n        automatic_payment_methods={\"enabled\": True},\n    )\n    return {\"client_secret\": intent.client_secret}\n\n\n@router.post(\"/stripe/webhook\", status_code=200)\nasync def stripe_webhook(\n    request: Request,\n    stripe_signature: str = Header(None, alias=\"Stripe-Signature\"),\n):\n    \"\"\"\n    Recibe eventos de Stripe, verifica la firma y despacha los handlers\n    necesarios.  Siempre respondemos 2xx para que Stripe marque correcta\n    la entrega.\n    \"\"\"\n    payload = await request.body()\n\n    try:\n        event = stripe.Webhook.construct_event(\n            payload=payload,\n            sig_header=stripe_signature,\n            secret=settings.STRIPE_WEBHOOK_SECRET,\n        )\n    except stripe.error.SignatureVerificationError:\n        raise HTTPException(status_code=400, detail=\"invalid signature\")\n\n    if event[\"type\"] == \"payment_intent.succeeded\":\n        _handle_success(event[\"data\"][\"object\"])\n    elif event[\"type\"] == \"payment_intent.payment_failed\":\n        _handle_failure(event[\"data\"][\"object\"])\n\n    return {\"received\": True}\n\n\n# ───── Internal handlers ─────────────────────────────────────────────────\ndef _handle_success(pi: dict):\n    # Aquí actualizarías tu BD, enviaría emails, etc.\n    print(\"✅ PaymentIntent succeeded:\", pi[\"id\"])\n\n\ndef _handle_failure(pi: dict):\n    print(\"❌ PaymentIntent failed:\", pi[\"id\"])\n",
    "rental-mvp-micro/services/payments/app/api/webhooks.py": "\"\"\"\nRecibe eventos de Stripe (webhook) y sincroniza estado interno.\n\"\"\"\nimport stripe\nfrom fastapi import APIRouter, Header, HTTPException, Request, Depends, status\nfrom sqlalchemy.orm import Session\n\nfrom app.core.config import settings\nfrom app import crud\nfrom app.deps import get_db\n\nrouter = APIRouter()\n\n@router.post(\"/stripe\")\nasync def stripe_webhook(\n    request: Request,\n    stripe_signature: str = Header(None, alias=\"Stripe-Signature\"),\n    db: Session = Depends(get_db),\n):\n    payload = await request.body()\n    try:\n        event = stripe.Webhook.construct_event(\n            payload, stripe_signature, settings.STRIPE_WEBHOOK_SECRET\n        )\n    except stripe.error.SignatureVerificationError:\n        raise HTTPException(status.HTTP_400_BAD_REQUEST, \"Firma inválida\")\n\n    if event.type == \"payment_intent.succeeded\":\n        pi = event.data.object\n        p = crud.get_by_pi(db, pi[\"id\"])\n        if p and not p.captured:\n            crud.capture(db, p)\n\n    elif event.type == \"charge.refunded\":\n        ch = event.data.object\n        pi_id = ch[\"payment_intent\"]\n        p = crud.get_by_pi(db, pi_id)\n        if p and not p.refunded:\n            crud.refund(db, p)\n\n    return {\"received\": True}\n",
    "rental-mvp-micro/services/payments/app/api/__init__.py": "from fastapi import APIRouter\nfrom .payments import router as payments_router\n\nrouter = APIRouter()\nrouter.include_router(payments_router, prefix=\"/payments\", tags=[\"payments\"])\n\n# NOTA: el webhook *no* lleva prefix /api, se monta tal cual en payments.py\n",
    "rental-mvp-micro/services/catalog/requirements.txt": "\nfastapi==0.116.0\nuvicorn==0.35.0\npydantic==2.11.7\npydantic-core==2.33.2\npydantic-settings==2.10.1\nSQLAlchemy==2.0.41\npython-jose[cryptography]==3.5.0\npython-multipart==0.0.6\npython-dotenv==1.1.1\nalembic==1.16.4\nemail-validator==2.1.1     # (pydantic extra)\nuvloop==0.21.0\nhttptools==0.6.4\npsycopg2-binary==2.9.9 ",
    "rental-mvp-micro/services/catalog/.env": "\nDATABASE_URL=postgresql+psycopg2://catalog_user:catalog_pass@catalog-db:5432/catalog\nSECRET_KEY=SuperClaveUltraSecreta\n",
    "rental-mvp-micro/services/catalog/Dockerfile": "FROM python:3.12-slim\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends libffi-dev build-essential libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nENV PYTHONPATH=/app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# código + alembic + env\nCOPY app/         ./app\nCOPY alembic.ini  .\nCOPY migrations/  ./migrations\nCOPY .env         .\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n",
    "rental-mvp-micro/services/catalog/test_endpoints.sh": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nAUTH=http://localhost:8001/api/auth\nCAT=http://localhost:8002/api\nUSERNAME=demo; EMAIL=demo@example.com; PASSWORD=demo\n\nj() { jq -C .; }            # pretty-json coloreado\nauth() { curl -s \"$@\" \"${AUTHZ[@]}\"; }\n\necho \"────────── 1) SIGN-UP ──────────\"\ncurl -s -X POST \"$AUTH/signup\" \\\n     -H 'Content-Type: application/json' \\\n     -d \"{\\\"username\\\":\\\"$USERNAME\\\",\\\"email\\\":\\\"$EMAIL\\\",\\\"password\\\":\\\"$PASSWORD\\\"}\" \\\n  | j || echo \"(usuario ya existe)\"\n\necho \"────────── 2) LOGIN ────────────\"\nTOKEN=$(curl -s -X POST \"$AUTH/token\" \\\n              -H 'Content-Type: application/x-www-form-urlencoded' \\\n              -d \"username=$USERNAME&password=$PASSWORD\" \\\n        | jq -r .access_token)\nAUTHZ=(-H \"Authorization: Bearer $TOKEN\")\necho \"JWT => $TOKEN\"\n\necho \"────────── 3) /me ──────────────\"\n# Detecta cuál de los dos paths expone el servicio\nfor ME in \"$AUTH/me\" \"$AUTH/users/me\"; do\n  CODE=$(curl -s -o /dev/null -w '%{http_code}' \"$ME\" \"${AUTHZ[@]}\")\n  [[ $CODE == 200 ]] && { curl -s \"$ME\" \"${AUTHZ[@]}\" | j; break; }\ndone\n\necho \"────────── 4) CATEGORIES ───────\"\ndeclare -A CIDs\nfor NAME in \"Herramientas\" \"Decoración\"; do\n  # ¿existe ya?\n  CID=$(curl -s \"$CAT/categories/\" | jq \".[] | select(.name==\\\"$NAME\\\") | .id\")\n  if [[ -z $CID ]]; then\n     CID=$(curl -s -X POST \"$CAT/categories/\" \"${AUTHZ[@]}\" \\\n                 -H 'Content-Type: application/json' \\\n                 -d \"{\\\"name\\\":\\\"$NAME\\\"}\" | jq -r .id)\n  fi\n  CIDs[$NAME]=$CID\n  echo \"• $NAME id=${CID}\"\ndone\n\necho \"────────── 5) ITEMS CRUD ───────\"\nDATA='{\n  \"name\":\"Taladro Bosch\",\n  \"description\":\"800 W\",\n  \"price_per_h\":4.5,\n  \"image_urls\":[\"https://picsum.photos/seed/taladro/800/600\"]\n}'\n# Sólo enviamos categories si tenemos IDs válidos\n[[ -n ${CIDs[Herramientas]} ]] && \\\n  DATA=$(jq --argjson cid ${CIDs[Herramientas]} '. + {categories:[$cid]}' <<<\"$DATA\")\n\nITEM=$(curl -s -X POST \"$CAT/items/\" \"${AUTHZ[@]}\" \\\n            -H 'Content-Type: application/json' \\\n            -d \"$DATA\")\necho \"$ITEM\" | j\nIID=$(echo \"$ITEM\" | jq -r .id)\n\necho \"── GET públicos /items?available=true\"\ncurl -s \"$CAT/items?available=true\" | j\n\necho \"── GET privados  /items/me\"\nauth \"$CAT/items/me\" | j\n\necho \"── PATCH /items/$IID (añade Decoración, cambia precio)\"\nPATCH=$(jq --argjson cid ${CIDs[Decoración]} '{price_per_h:5.0,categories:[$cid]}' <<<\"{}\")\nauth -X PATCH \"$CAT/items/$IID\" \\\n     -H 'Content-Type: application/json' \\\n     -d \"$PATCH\" | j\n\necho \"── DELETE /items/$IID\"\nauth -X DELETE \"$CAT/items/$IID\" -w '\\n(status %{http_code})\\n'\n\necho \"── /items/me debería estar vacío\"\nauth \"$CAT/items/me\" | j\n\necho \"────────── 6) UPLOAD ───────────\"\nif [[ -f sample.jpg ]]; then\n  auth -X POST \"$CAT/upload/\" -F \"file=@sample.jpg\" | j\nelse\n  echo \"(sin sample.jpg; omitiendo)\"\nfi\n\necho -e \"\\n✅  tests completados\"\n",
    "rental-mvp-micro/services/catalog/alembic.ini": "[alembic]\nscript_location = migrations\nprepend_sys_path = .\nsqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}\n\nversion_path_separator = os\n\n\n# ────────────── Logging ──────────────\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n\n[logger_root]\nlevel    = WARN\nhandlers = console\n\n\n[logger_sqlalchemy]\nlevel     = WARN\nqualname  = sqlalchemy.engine\nhandlers  = console\n\n\n[logger_alembic]\nlevel     = INFO\nqualname  = alembic\nhandlers  = console\n\n\n[handler_console]\nclass     = StreamHandler\nargs      = (sys.stderr,)\nformatter = generic\n\n\n[formatter_generic]\nformat   = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt  = %H:%M:%S\n",
    "rental-mvp-micro/services/catalog/migrations/script.py.mako": "\n\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade():\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade():\n    ${downgrades if downgrades else \"pass\"}\n",
    "rental-mvp-micro/services/catalog/migrations/README": "",
    "rental-mvp-micro/services/catalog/migrations/env.py": "\n\"\"\"Alembic environment for Catalog service.\"\"\"\nfrom __future__ import annotations\n\nfrom logging.config import fileConfig\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\n\n# ─── configuración ────────────────────────────────────────────────────────\nconfig = context.config\nfileConfig(config.config_file_name)\n\n# Metadata\nfrom app.models.models import Base                                   # noqa: E402\ntarget_metadata = Base.metadata\ntarget_metadata.naming_convention = {\n    \"ix\": \"ix_%(column_0_label)s\",\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\",\n}\n\n# URL de la BD → .env\nfrom app.core.config import settings                                # noqa: E402\nconfig.set_main_option(\"sqlalchemy.url\", settings.DATABASE_URL)\n\n\ndef run_migrations_offline() -> None:\n    context.configure(\n        url=config.get_main_option(\"sqlalchemy.url\"),\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n        compare_type=True,\n        compare_server_default=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True,\n            compare_server_default=True,\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n",
    "rental-mvp-micro/services/catalog/migrations/versions/20250713_0001_initial.py": "\"\"\"Initial schema\n\nRevision ID: 20250713_0001\nRevises: \nCreate Date: 2025-07-13 10:15:00\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# ────────────── Identificación ──────────────\nrevision: str = \"20250713_0001\"\ndown_revision: str | None = None\nbranch_labels: tuple | None = None\ndepends_on: tuple | None = None\n\n\n# ────────────── Upgrade ──────────────\ndef upgrade() -> None:\n    # categories\n    op.create_table(\n        \"categories\",\n        sa.Column(\"id\", sa.Integer(), primary_key=True),\n        sa.Column(\"name\", sa.String(length=50), nullable=False, unique=True, index=True),\n    )\n\n    # items\n    op.create_table(\n        \"items\",\n        sa.Column(\"id\", sa.Integer(), primary_key=True, index=True),\n        sa.Column(\"name\", sa.String(length=80), nullable=False, index=True),\n        sa.Column(\"description\", sa.Text(), nullable=True),\n        sa.Column(\"price_per_h\", sa.Float(), nullable=False),\n        sa.Column(\"image_url\", sa.String(), nullable=True),\n        sa.Column(\"owner_username\", sa.String(), nullable=False, index=True),\n        sa.Column(\"available\", sa.Boolean(), server_default=sa.true(), nullable=False),\n    )\n\n    # item_images\n    op.create_table(\n        \"item_images\",\n        sa.Column(\"id\", sa.Integer(), primary_key=True),\n        sa.Column(\"item_id\", sa.Integer(), sa.ForeignKey(\"items.id\", ondelete=\"CASCADE\"), nullable=False),\n        sa.Column(\"url\", sa.String(), nullable=False),\n    )\n\n    # asociación N:M items ↔ categories\n    op.create_table(\n        \"item_categories\",\n        sa.Column(\"item_id\", sa.Integer(), sa.ForeignKey(\"items.id\", ondelete=\"CASCADE\"), primary_key=True),\n        sa.Column(\"category_id\", sa.Integer(), sa.ForeignKey(\"categories.id\", ondelete=\"CASCADE\"), primary_key=True),\n    )\n\n\n# ────────────── Downgrade ──────────────\ndef downgrade() -> None:\n    op.drop_table(\"item_categories\")\n    op.drop_table(\"item_images\")\n    op.drop_table(\"items\")\n    op.drop_table(\"categories\")\n",
    "rental-mvp-micro/services/catalog/app/main.py": "# services/catalog/app/main.py\nfrom fastapi import FastAPI\n\nfrom app.api import categories, items\nfrom app.models.database import Base, engine\nimport app.models.models                         #  noqa: F401\n\napp = FastAPI(\n    title=\"rental-mvp – Catalog Service\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    openapi_url=\"/openapi.json\",\n)\n\n@app.on_event(\"startup\")\ndef _init_db() -> None:\n    Base.metadata.create_all(bind=engine)\n\napp.include_router(categories.router, prefix=\"/api/categories\", tags=[\"categories\"])\napp.include_router(items.router,      prefix=\"/api/items\",      tags=[\"items\"])\n",
    "rental-mvp-micro/services/catalog/app/__init__.py": "",
    "rental-mvp-micro/services/catalog/app/deps.py": "from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom sqlalchemy.orm import Session\n\nfrom app.models.database import SessionLocal\nfrom app.core.config import settings\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"dummy\")  # no lo usamos, solo valida header\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndef get_current_username(token: str = Depends(oauth2_scheme)) -> str:\n    \"\"\"Devuelve `sub` del JWT emitido por Auth.\"\"\"\n    cred_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Credenciales no válidas\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        username: str | None = payload.get(\"sub\")\n        if not username:\n            raise cred_exc\n        return username\n    except JWTError:\n        raise cred_exc",
    "rental-mvp-micro/services/catalog/app/models/models.py": "from __future__ import annotations\n\nfrom typing import List\nfrom sqlalchemy import (\n    Boolean,\n    Column,\n    Float,\n    ForeignKey,\n    Integer,\n    String,\n    Table,\n)\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n# relación N:M items–categories\nitem_categories = Table(\n    \"item_categories\",\n    Base.metadata,\n    Column(\"item_id\", Integer, ForeignKey(\"items.id\", ondelete=\"CASCADE\"), primary_key=True),\n    Column(\"category_id\", Integer, ForeignKey(\"categories.id\", ondelete=\"CASCADE\"), primary_key=True),\n)\n\nclass ItemImage(Base):\n    __tablename__ = \"item_images\"\n\n    id = Column(Integer, primary_key=True)\n    item_id = Column(Integer, ForeignKey(\"items.id\", ondelete=\"CASCADE\"), nullable=False)\n    url = Column(String, nullable=False)\n\n    item = relationship(\"Item\", back_populates=\"images\")\n\n\nclass Category(Base):\n    __tablename__ = \"categories\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True, index=True, nullable=False)\n\n    items = relationship(\"Item\", secondary=item_categories, back_populates=\"categories\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True, nullable=False)\n    description = Column(String)\n    price_per_h = Column(Float, nullable=False)\n\n    # destacado (legacy)\n    image_url = Column(String)\n\n    # ← vínculo al propietario (micro-servicio auth)\n    owner_username = Column(String, index=True, nullable=False)\n\n    available = Column(Boolean, default=True)\n\n    # relaciones\n    categories = relationship(\"Category\", secondary=item_categories, back_populates=\"items\")\n    images = relationship(\n        \"ItemImage\",\n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n        order_by=\"ItemImage.id\",\n    )\n\n    # helper\n    @property\n    def image_urls(self) -> List[str]:\n        return [img.url for img in self.images]",
    "rental-mvp-micro/services/catalog/app/models/__init__.py": "# importa modelos para que Alembic los detecte\nfrom .models import Category, Item, ItemImage  # noqa: F401",
    "rental-mvp-micro/services/catalog/app/models/database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.core.config import settings\n\nconnect_args = {\"check_same_thread\": False} if settings.DATABASE_URL.startswith(\"sqlite\") else {}\nengine = create_engine(settings.DATABASE_URL, connect_args=connect_args, echo=True)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()",
    "rental-mvp-micro/services/catalog/app/schemas/category.py": "from pydantic import BaseModel, Field\n\n\nclass CategoryBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=50)\n\n\nclass CategoryCreate(CategoryBase):\n    pass\n\n\nclass CategoryOut(CategoryBase):\n    id: int\n\n    class Config:\n        from_attributes = True",
    "rental-mvp-micro/services/catalog/app/schemas/__init__.py": "from .category import CategoryCreate, CategoryOut\nfrom .item import ItemCreate, ItemUpdate, ItemOut\n\n__all__ = [\n    \"CategoryCreate\",\n    \"CategoryOut\",\n    \"ItemCreate\",\n    \"ItemUpdate\",\n    \"ItemOut\",\n]",
    "rental-mvp-micro/services/catalog/app/schemas/item.py": "# services/catalog/app/schemas/item.py\nfrom __future__ import annotations\n\nfrom typing import List, Optional\n\nfrom pydantic import (\n    BaseModel,\n    Field,\n    PositiveFloat,\n    AfterValidator,      # 🆕 validador ligero en v2\n)\nfrom typing_extensions import Annotated   # Annotated en 3.12\n\nfrom .category import CategoryOut\n\n\n# ────────────────────────────────────────────────────────────────────\n#  Tipo URL “relajado” → admite http(s)://…  o  rutas relativas “/…”\n# ────────────────────────────────────────────────────────────────────\ndef _check_url(v: str) -> str:\n    if v.startswith((\"http://\", \"https://\", \"/\")):\n        return v\n    raise ValueError(\"url debe ser http(s)://… o empezar por /uploads/…\")\n\n\nUrlStr = Annotated[str, AfterValidator(_check_url)]\n\n\n# ─────────────────────────── SCHEMAS ────────────────────────────────\nclass ItemBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=80)\n    description: Optional[str] = None\n    price_per_h: PositiveFloat\n\n\nclass ItemCreate(ItemBase):\n    image_urls: List[UrlStr] = Field(..., min_length=1, max_length=6)\n    categories: Optional[List[int]] = Field(\n        default=None, description=\"IDs de categorías asociadas\"\n    )\n\n\nclass ItemUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=1, max_length=80)\n    description: Optional[str] = None\n    price_per_h: Optional[PositiveFloat] = None\n    image_urls: Optional[List[UrlStr]] = Field(None, min_length=1, max_length=6)\n    categories: Optional[List[int]] = None\n\n    model_config = {\"extra\": \"forbid\"}\n\n\nclass ItemOut(ItemBase):\n    id: int\n    available: bool\n    owner_username: str\n    categories: List[CategoryOut]\n    image_urls: List[UrlStr]\n    image_url: Optional[UrlStr] = None  # compat con versiones antiguas\n\n    model_config = {\"from_attributes\": True}\n",
    "rental-mvp-micro/services/catalog/app/crud/category.py": "from typing import List, Optional\n\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import Category\nfrom app.schemas.category import CategoryCreate\n\n\ndef get_category(db: Session, cat_id: int) -> Optional[Category]:\n    return db.query(Category).filter(Category.id == cat_id).first()\n\n\ndef get_categories(db: Session) -> List[Category]:\n    return db.query(Category).order_by(Category.name).all()\n\n\ndef create_category(db: Session, cat_in: CategoryCreate) -> Category:\n    db_cat = Category(**cat_in.model_dump())\n    db.add(db_cat)\n    db.commit()\n    db.refresh(db_cat)\n    return db_cat",
    "rental-mvp-micro/services/catalog/app/crud/__init__.py": "from .category import get_category, get_categories, create_category           # noqa: F401\nfrom .item import (                                                           # noqa: F401\n    get_item,\n    get_items,\n    get_items_by_owner,\n    create_item,\n    update_item,\n    delete_item,\n)\n\n__all__ = [\n    \"get_category\",\n    \"get_categories\",\n    \"create_category\",\n    \"get_item\",\n    \"get_items\",\n    \"get_items_by_owner\",\n    \"create_item\",\n    \"update_item\",\n    \"delete_item\",\n]",
    "rental-mvp-micro/services/catalog/app/crud/item.py": "from __future__ import annotations\n\nfrom typing import List, Optional, Tuple\n\nfrom sqlalchemy import asc, desc, or_\nfrom sqlalchemy.orm import Session, joinedload\n\nfrom app.models.models import Category, Item, ItemImage\nfrom app.schemas.item import ItemCreate, ItemUpdate\n\n# ───────── helpers internos ───────────────────────────────────────────────\ndef _get_categories_or_400(db: Session, ids: list[int]) -> list[Category]:\n    cats = db.query(Category).filter(Category.id.in_(ids)).all()\n    if len(cats) != len(ids):\n        missing = set(ids) - {c.id for c in cats}\n        raise ValueError(f\"Categorías inexistentes: {', '.join(map(str, missing))}\")\n    return cats\n\n\ndef _apply_order(q, order_by: str | None, order_dir: str | None):\n    mapping = {\"price\": Item.price_per_h, \"name\": Item.name, \"id\": Item.id}\n    if not order_by:\n        return q.order_by(Item.id)\n    col = mapping.get(order_by, Item.id)\n    return q.order_by(asc(col) if order_dir == \"asc\" else desc(col))\n\n\n# ───────── lectura ────────────────────────────────────────────────────────\ndef get_item(db: Session, item_id: int) -> Optional[Item]:\n    return (\n        db.query(Item)\n        .options(joinedload(Item.categories), joinedload(Item.images))\n        .filter(Item.id == item_id)\n        .first()\n    )\n\n\ndef _build_query(\n    db: Session,\n    *,\n    name: Optional[str],\n    min_price: Optional[float],\n    max_price: Optional[float],\n    available: Optional[bool],\n    categories: Optional[List[int]],\n    order_by: Optional[str],\n    order_dir: Optional[str],\n):\n    q = db.query(Item).options(joinedload(Item.categories), joinedload(Item.images))\n\n    if name:\n        pattern = f\"%{name}%\"\n        q = q.filter(or_(Item.name.ilike(pattern), Item.description.ilike(pattern)))\n    if min_price is not None:\n        q = q.filter(Item.price_per_h >= min_price)\n    if max_price is not None:\n        q = q.filter(Item.price_per_h <= max_price)\n    if available is not None:\n        q = q.filter(Item.available == available)\n    if categories:\n        q = q.filter(Item.categories.any(Category.id.in_(categories)))\n\n    return _apply_order(q, order_by, order_dir)\n\n\ndef get_items(\n    db: Session,\n    skip: int,\n    limit: int,\n    *,\n    name: Optional[str],\n    min_price: Optional[float],\n    max_price: Optional[float],\n    available: Optional[bool],\n    categories: Optional[List[int]],\n    order_by: Optional[str],\n    order_dir: Optional[str],\n) -> Tuple[List[Item], int]:\n    q = _build_query(\n        db,\n        name=name,\n        min_price=min_price,\n        max_price=max_price,\n        available=available,\n        categories=categories,\n        order_by=order_by,\n        order_dir=order_dir,\n    )\n    total = q.count()\n    items = q.offset(skip).limit(limit).all()\n    return items, total\n\n\ndef get_items_by_owner(db: Session, owner: str) -> List[Item]:\n    return (\n        db.query(Item)\n        .options(joinedload(Item.categories), joinedload(Item.images))\n        .filter(Item.owner_username == owner)\n        .all()\n    )\n\n\n# ───────── escritura ──────────────────────────────────────────────────────\ndef create_item(db: Session, item_in: ItemCreate, owner_username: str) -> Item:\n    main = str(item_in.image_urls[0])\n\n    db_item = Item(\n        name=item_in.name,\n        description=item_in.description,\n        price_per_h=item_in.price_per_h,\n        image_url=main,\n        owner_username=owner_username,\n    )\n\n    if item_in.categories:\n        db_item.categories = _get_categories_or_400(db, item_in.categories)\n\n    db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]\n\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\n\ndef update_item(db: Session, db_item: Item, item_in: ItemUpdate) -> Item:\n    data = item_in.model_dump(exclude_unset=True, exclude={\"categories\", \"image_urls\"})\n    for k, v in data.items():\n        setattr(db_item, k, v)\n\n    if item_in.categories is not None:\n        db_item.categories = _get_categories_or_400(db, item_in.categories)\n\n    if item_in.image_urls is not None:\n        db_item.image_url = str(item_in.image_urls[0])\n        db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]\n\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\n\ndef delete_item(db: Session, db_item: Item) -> None:\n    db.delete(db_item)\n    db.commit()",
    "rental-mvp-micro/services/catalog/app/core/__init__.py": "",
    "rental-mvp-micro/services/catalog/app/core/config.py": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    DATABASE_URL: str\n    SECRET_KEY: str\n    ALGORITHM: str = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60\n\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n\nsettings = Settings()",
    "rental-mvp-micro/services/catalog/app/api/items.py": "from typing import List, Optional\nfrom urllib.parse import urlencode\n\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    HTTPException,\n    Query,\n    Request,\n    Response,\n    status,\n)\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db, get_current_username\n\nrouter = APIRouter()\n\n# ───────── helpers paginación RFC-5988 ────────────────────────────────────\ndef _pagination_links(request: Request, skip: int, limit: int, total: int, **flt):\n    links: list[str] = []\n    base = request.url.remove_query_params(\"skip\").remove_query_params(\"limit\")\n\n    def _url(new_skip: int):\n        params = {k: v for k, v in flt.items() if v is not None}\n        params.update({\"skip\": new_skip, \"limit\": limit})\n        return f\"<{base}?{urlencode(params, doseq=True)}>\"\n\n    if skip + limit < total:\n        links.append(f'{_url(skip + limit)}; rel=\"next\"')\n    if skip > 0:\n        links.append(f'{_url(max(skip - limit,0))}; rel=\"prev\"')\n    return \", \".join(links)\n\n\n# ───────────── crear ─────────────────────────────────────────────────────\n@router.post(\"/\", response_model=schemas.ItemOut, status_code=status.HTTP_201_CREATED)\ndef create_item(\n    item_in: schemas.ItemCreate,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    return crud.create_item(db, item_in, owner_username=username)\n\n\n# ───────────── listar público ────────────────────────────────────────────\n@router.get(\"/\", response_model=List[schemas.ItemOut])\ndef list_items(\n    request: Request,\n    response: Response,\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    name: Optional[str] = None,\n    min_price: Optional[float] = Query(None, ge=0),\n    max_price: Optional[float] = Query(None, ge=0),\n    available: Optional[bool] = None,\n    categories: Optional[List[int]] = Query(None),\n    order_by: Optional[str] = Query(None, pattern=\"^(price|name|id)$\"),\n    order_dir: Optional[str] = Query(None, pattern=\"^(asc|desc)$\"),\n    db: Session = Depends(get_db),\n):\n    items, total = crud.get_items(\n        db,\n        skip,\n        limit,\n        name=name,\n        min_price=min_price,\n        max_price=max_price,\n        available=available,\n        categories=categories,\n        order_by=order_by,\n        order_dir=order_dir,\n    )\n    response.headers[\"X-Total-Count\"] = str(total)\n    if total:\n        link = _pagination_links(\n            request,\n            skip,\n            limit,\n            total,\n            name=name,\n            min_price=min_price,\n            max_price=max_price,\n            available=available,\n            categories=categories,\n            order_by=order_by,\n            order_dir=order_dir,\n        )\n        if link:\n            response.headers[\"Link\"] = link\n    return items\n\n\n# ───────────── mis ítems ────────────────────────────────────────────────\n@router.get(\"/me\", response_model=List[schemas.ItemOut])\ndef my_items(\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    return crud.get_items_by_owner(db, username)\n\n\n# ───────────── actualizar ───────────────────────────────────────────────\n@router.patch(\"/{item_id}\", response_model=schemas.ItemOut)\ndef patch_item(\n    item_id: int,\n    item_in: schemas.ItemUpdate,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_username != username:\n        raise HTTPException(404, \"Item no encontrado\")\n    return crud.update_item(db, db_item, item_in)\n\n\n@router.put(\"/{item_id}\", response_model=schemas.ItemOut)\ndef put_item(\n    item_id: int,\n    item_in: schemas.ItemCreate,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_username != username:\n        raise HTTPException(404, \"Item no encontrado\")\n    return crud.update_item(db, db_item, schemas.ItemUpdate(**item_in.model_dump()))\n\n# ───────────── obtener 1 ítem ────────────────────────────────────────────\n@router.get(\"/{item_id}\", response_model=schemas.ItemOut)\ndef get_item(\n    item_id: int,\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Devuelve un único ítem por *ID*.\n\n    404 si no existe.\n    \"\"\"\n    db_item = crud.get_item(db, item_id)\n    if not db_item:\n        raise HTTPException(404, \"Item no encontrado\")\n    return db_item\n\n\n\n# ───────────── eliminar ────────────────────────────────────────────────\n@router.delete(\"/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_item(\n    item_id: int,\n    db: Session = Depends(get_db),\n    username: str = Depends(get_current_username),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_username != username:\n        raise HTTPException(404, \"Item no encontrado\")\n    crud.delete_item(db, db_item)",
    "rental-mvp-micro/services/catalog/app/api/categories.py": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db, get_current_username\n\nrouter = APIRouter()\n\n\n@router.get(\"/\", response_model=List[schemas.CategoryOut])\ndef list_categories(db: Session = Depends(get_db)):\n    return crud.get_categories(db)\n\n\n@router.post(\n    \"/\", response_model=schemas.CategoryOut, status_code=status.HTTP_201_CREATED\n)\ndef create_category(\n    cat_in: schemas.CategoryCreate,\n    db: Session = Depends(get_db),\n    _user=Depends(get_current_username),        # solo autenticados\n):\n    return crud.create_category(db, cat_in)\n\n\n@router.get(\"/{cat_id}\", response_model=schemas.CategoryOut)\ndef get_category(cat_id: int, db: Session = Depends(get_db)):\n    cat = crud.get_category(db, cat_id)\n    if not cat:\n        raise HTTPException(404, \"Categoría no encontrada\")\n    return cat",
    "rental-mvp-micro/services/catalog/app/api/__init__.py": "",
    "rental-mvp-micro/services/catalog/app/api/upload.py": "# services/catalog/app/api/upload.py\n\"\"\"\nEndpoint para subir imágenes desde el catálogo.\nTambién devuelve la **ruta relativa** /uploads/…  para evitar problemas de host.\n\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport shutil\nimport uuid\nfrom pathlib import Path\n\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    HTTPException,\n    Request,\n    UploadFile,\n    status,\n)\n\nfrom app.deps import get_current_username\n\nUPLOAD_DIR = Path(__file__).resolve().parent.parent / \"uploads\"\nUPLOAD_DIR.mkdir(exist_ok=True)\n\nrouter = APIRouter()\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def upload_image(\n    file: UploadFile,\n    request: Request,\n    _user=Depends(get_current_username),\n):\n    if not file.content_type.startswith(\"image/\"):\n        raise HTTPException(400, \"Solo imágenes\")\n\n    ext = Path(file.filename).suffix\n    name = f\"{uuid.uuid4()}{ext}\"\n    path = UPLOAD_DIR / name\n\n    with path.open(\"wb\") as buf:\n        shutil.copyfileobj(file.file, buf)\n\n    # ← ruta relativa\n    return {\"url\": f\"/uploads/{name}\"}\n"
}
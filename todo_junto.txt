--- rental-mvp-micro/estructura_directorios.json ---
[
    {
        "name": "frontend",
        "dirs": [
            {
                "name": "src",
                "dirs": [
                    {
                        "name": "assets",
                        "dirs": [
                            {
                                "name": "payments",
                                "dirs": [],
                                "files": [
                                    "paypal.svg",
                                    "mastercard.svg",
                                    "visa.svg"
                                ]
                            }
                        ],
                        "files": [
                            "logo.png"
                        ]
                    },
                    {
                        "name": "hooks",
                        "dirs": [],
                        "files": [
                            "useAuth.tsx",
                            "useStripe.ts"
                        ]
                    },
                    {
                        "name": "styles",
                        "dirs": [],
                        "files": [
                            "global.css"
                        ]
                    },
                    {
                        "name": "features",
                        "dirs": [
                            {
                                "name": "auth",
                                "dirs": [],
                                "files": [
                                    "register.ts",
                                    "login.ts"
                                ]
                            },
                            {
                                "name": "categories",
                                "dirs": [],
                                "files": [
                                    "useCategories.ts"
                                ]
                            },
                            {
                                "name": "items",
                                "dirs": [],
                                "files": [
                                    "useItems.ts",
                                    "AddItemModal.tsx",
                                    "ItemList.tsx"
                                ]
                            },
                            {
                                "name": "rentals",
                                "dirs": [
                                    {
                                        "name": "payments",
                                        "dirs": [],
                                        "files": [
                                            "createIntent.ts"
                                        ]
                                    }
                                ],
                                "files": [
                                    "reserve.ts",
                                    "RentalList.tsx",
                                    "createRental.ts",
                                    "useRentals.ts"
                                ]
                            }
                        ],
                        "files": []
                    },
                    {
                        "name": "pages",
                        "dirs": [],
                        "files": [
                            "Register.tsx",
                            "Login.tsx",
                            "Dashboard.tsx",
                            "Home.tsx"
                        ]
                    },
                    {
                        "name": "components",
                        "dirs": [
                            {
                                "name": "ui",
                                "dirs": [],
                                "files": [
                                    "PaymentModal.tsx",
                                    "SkeletonCard.tsx",
                                    "LazyImage.tsx",
                                    "ItemCard.tsx",
                                    "SearchBar.tsx",
                                    "ItemDetailModal.tsx",
                                    "SocialButton.tsx",
                                    "QuickViewModal.tsx"
                                ]
                            },
                            {
                                "name": "shared",
                                "dirs": [],
                                "files": [
                                    "Section.tsx",
                                    "Container.tsx"
                                ]
                            },
                            {
                                "name": "layout",
                                "dirs": [],
                                "files": [
                                    "Footer.tsx",
                                    "Header.tsx"
                                ]
                            },
                            {
                                "name": "Home",
                                "dirs": [],
                                "files": [
                                    "FAQ.tsx",
                                    "Stats.tsx",
                                    "LogoCloud.tsx",
                                    "Testimonials.tsx"
                                ]
                            },
                            {
                                "name": "filters",
                                "dirs": [],
                                "files": [
                                    "FiltersSidebar.tsx"
                                ]
                            }
                        ],
                        "files": []
                    }
                ],
                "files": [
                    "App.tsx",
                    "api.ts",
                    "ErrorBoundary.tsx",
                    "main.tsx",
                    "utils.ts",
                    "Protected.tsx"
                ]
            }
        ],
        "files": [
            "index.html",
            "package.json",
            "vite.config.ts",
            ".env",
            "Dockerfile",
            "nginx.conf",
            "tsconfig.json",
            "postcss.config.js",
            "tailwind.config.js"
        ]
    }
]

--- rental-mvp-micro/docker-compose.prod.yml ---
version: "3.9"

# ──────────────────────────────── NETWORKS (opcional) ───────────────────────────
# Si no declaras redes, Compose crea una por defecto que ya es suficiente.
# networks:
#   backend:

# ─────────────────────────────────── SERVICES ───────────────────────────────────
services:

  # ────────────── AUTH ──────────────────────────────────────────────────────────
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  auth-migrate:
    build: ./services/auth
    container_name: auth-migrate
    env_file: ./services/auth/.env
    command: alembic upgrade head
    depends_on:
      auth-db:
        condition: service_healthy
    restart: "no"                       # solo se ejecuta una vez
    # networks:
    #   - backend

  auth:
    build: ./services/auth
    container_name: auth-service
    env_file: ./services/auth/.env
    environment:
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8001:8000"                     # API Auth
    restart: unless-stopped
    depends_on:
      auth-migrate:
        condition: service_completed_successfully
    # networks:
    #   - backend

  # ────────────── CATALOG ───────────────────────────────────────────────────────
  catalog-db:
    image: postgres:15
    container_name: catalog-db
    environment:
      POSTGRES_DB: catalog
      POSTGRES_USER: catalog_user
      POSTGRES_PASSWORD: catalog_pass
    volumes:
      - catalog_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalog_user -d catalog"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  catalog-migrate:
    build: ./services/catalog
    container_name: catalog-migrate
    env_file: ./services/catalog/.env
    command: alembic upgrade head
    depends_on:
      catalog-db:
        condition: service_healthy
    restart: "no"
    # networks:
    #   - backend

  catalog:
    build: ./services/catalog
    container_name: catalog-service
    env_file: ./services/catalog/.env
    ports:
      - "8002:8000"                     # API Catalog
    restart: unless-stopped
    depends_on:
      catalog-migrate:
        condition: service_completed_successfully
    # networks:
    #   - backend

  # ────────────── RENTALS ───────────────────────────────────────────────────────
  rentals-db:
    image: postgres:15
    container_name: rentals-db
    environment:
      POSTGRES_DB: rentals
      POSTGRES_USER: rentals_user
      POSTGRES_PASSWORD: rentals_pass
    volumes:
      - rentals_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rentals_user -d rentals"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  rentals-migrate:
    build: ./services/rentals
    container_name: rentals-migrate
    env_file: ./services/rentals/.env
    command: alembic upgrade head
    depends_on:
      rentals-db:
        condition: service_healthy
    restart: "no"
    # networks:
    #   - backend

  rentals:
    build: ./services/rentals
    container_name: rentals-service
    env_file: ./services/rentals/.env
    ports:
      - "8003:8000"                     # API Rentals
    restart: unless-stopped
    depends_on:
      rentals-migrate:
        condition: service_completed_successfully
      catalog:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── UPLOAD ────────────────────────────────────────────────────────
  upload:
    build: ./services/upload
    container_name: upload-service
    env_file: ./services/upload/.env
    environment:
      - JWT_SECRET=${JWT_SECRET}        # misma clave que Auth
    volumes:
      - uploads_data:/app/uploads       # carpeta de imágenes
    ports:
      - "8004:8000"                     # API Upload
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── PAYMENTS (Stripe) ─────────────────────────────────────────────
  payments:
    build: ./services/payments
    container_name: payments-service
    env_file: ./services/payments/.env
    ports:
      - "8005:8000"                     # API Payments
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── FRONTEND SPA ──────────────────────────────────────────────────
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - "80:80"                         # UI pública
    restart: unless-stopped
    depends_on:
      - auth
      - catalog
      - rentals
      - upload
      - payments
    # networks:
    #   - backend

# ─────────────────────────────────── VOLUMES ────────────────────────────────────
volumes:
  auth_db_data:
  catalog_db_data:
  rentals_db_data:
  uploads_data:

# ────────────────────────────────── (opt) NETWORKS ──────────────────────────────
# networks:
#   backend:
#     driver: bridge


--- rental-mvp-micro/.env ---
JWT_SECRET=SuperClaveUltraSecreta        


--- rental-mvp-micro/services/auth/requirements.txt ---
# services/auth/requirements.txt
# Copiamos sólo las dependencias necesarias para Auth
fastapi==0.116.0
uvicorn==0.35.0
pydantic==2.11.7
pydantic-core==2.33.2
pydantic-settings==2.10.1
SQLAlchemy==2.0.41
python-jose[cryptography]==3.5.0
passlib==1.7.4
bcrypt==3.2.2
python-dotenv==1.1.1
# extras (opcional para rendimiento)
uvloop==0.21.0
httptools==0.6.4
email-validator==2.1.1    
python-multipart
psycopg2-binary==2.9.6
alembic==1.16.4

--- rental-mvp-micro/services/auth/.env ---
# services/auth/.env
DATABASE_URL=postgresql+psycopg2://auth_user:auth_pass@auth-db:5432/auth
SECRET_KEY=SuperClaveUltraSecreta


--- rental-mvp-micro/services/auth/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    build-essential libffi-dev libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# código, migraciones y configuración
COPY app/ ./app
COPY alembic.ini .
COPY migrations/ ./migrations
COPY .env .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- rental-mvp-micro/services/auth/alembic.ini ---
# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to migrations/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "version_path_separator" below.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# version path separator; As mentioned above, this is the character used to split
# version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
# Valid values for version_path_separator are:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # Use os.pathsep. Default configuration used for new projects.

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# alembic.ini
sqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}



[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


--- rental-mvp-micro/services/auth/migrations/script.py.mako ---
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}


--- rental-mvp-micro/services/auth/migrations/README ---
Generic single-database configuration.

--- rental-mvp-micro/services/auth/migrations/env.py ---
# migrations/env.py
"""Alembic migration environment for the Auth service."""

from __future__ import annotations

from logging.config import fileConfig

from alembic import context
from sqlalchemy import engine_from_config, pool

# ────────────────────────────────────────────────────────
# 1. Configuración y logging
# ────────────────────────────────────────────────────────
config = context.config
fileConfig(config.config_file_name)

# ────────────────────────────────────────────────────────
# 2. Metadata de modelos  → autogenerate
# ────────────────────────────────────────────────────────
from app.models.models import Base  # importa las tablas
target_metadata = Base.metadata

# (opcional, pero aconsejado: convenciones de nombres)
target_metadata.naming_convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

# ────────────────────────────────────────────────────────
# 3. URL de conexión: utiliza la misma que tu servicio
# ────────────────────────────────────────────────────────
from app.core.config import settings  # noqa: E402

config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)

# ────────────────────────────────────────────────────────
# 4. Hooks offline / online
# ────────────────────────────────────────────────────────
def run_migrations_offline() -> None:
    """Genera SQL sin tocar la BD (alembic upgrade --sql)."""
    context.configure(
        url=config.get_main_option("sqlalchemy.url"),
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Aplica las migraciones sobre la BD."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


--- rental-mvp-micro/services/auth/migrations/versions/20250712_init.py ---
"""tabla users inicial

Revision ID: 20250712_init
Revises:
Create Date: 2025-07-12 00:00:00
"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "20250712_init"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), primary_key=True, nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_pw", sa.String(), nullable=False),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("email"),
    )
    op.create_index("ix_users_username", "users", ["username"])
    op.create_index("ix_users_email", "users", ["email"])


def downgrade() -> None:
    op.drop_index("ix_users_email", table_name="users")
    op.drop_index("ix_users_username", table_name="users")
    op.drop_table("users")


--- rental-mvp-micro/services/auth/app/main.py ---
# services/auth/app/main.py
from fastapi import FastAPI

from app.api import auth                     # rutas
from app.models.database import Base, engine
import app.models.models                     # importa modelos (no eliminar)  noqa: F401

app = FastAPI(
    title="rental-mvp – Auth Service",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

# ────────────────────────────────────────────────────────────────
#  Crea las tablas si aún no existen (solo útil en entornos de
#  desarrollo o en tests.  En prod usarás `alembic upgrade head`).
# ────────────────────────────────────────────────────────────────
@app.on_event("startup")
def _init_db() -> None:
    Base.metadata.create_all(bind=engine)

# rutas REST
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])


--- rental-mvp-micro/services/auth/app/__init__.py ---


--- rental-mvp-micro/services/auth/app/deps.py ---
# services/auth/app/deps.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from sqlalchemy.orm import Session

from app.models.database import SessionLocal
from app.core.config import settings
from app.crud import user as crud
from app.schemas.user import UserOut

# ──────────── DB session ────────────
def get_db() -> Session:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# ──────────── Auth helper ───────────
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="/api/auth/token"   # el prefijo '/api/auth' se añade en main.py
)


def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db),
) -> UserOut:
    """
    Valida el JWT y devuelve el usuario asociado.
    Lanza 401 si es inválido o no existe.
    """
    cred_exc = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciales no válidas",
        headers={"WWW-Authenticate": "Bearer"},
    )

    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str | None = payload.get("sub")
        if not username:
            raise cred_exc
    except JWTError:
        raise cred_exc

    user = crud.get_user_by_username(db, username)
    if not user:
        raise cred_exc
    return user


--- rental-mvp-micro/services/auth/app/models/models.py ---
from sqlalchemy import Column, Integer, String
from app.models.database import Base   # usa SIEMPRE la misma Base

class User(Base):
    __tablename__ = "users"
    id        = Column(Integer, primary_key=True)
    username  = Column(String, unique=True, index=True, nullable=False)
    email     = Column(String, unique=True, index=True, nullable=False)
    hashed_pw = Column(String, nullable=False)


--- rental-mvp-micro/services/auth/app/models/__init__.py ---


--- rental-mvp-micro/services/auth/app/models/database.py ---
# services/auth/app/models/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

connect_args = {"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}

engine = create_engine(
    settings.DATABASE_URL,
    connect_args=connect_args,
    echo=True,
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


--- rental-mvp-micro/services/auth/app/schemas/token.py ---
# app/schemas/token.py
from pydantic import BaseModel

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"


--- rental-mvp-micro/services/auth/app/schemas/__init__.py ---
from .user import UserCreate, UserOut  # noqa: F401

__all__ = ["UserCreate", "UserOut"]


--- rental-mvp-micro/services/auth/app/schemas/user.py ---
from pydantic import BaseModel, EmailStr, ConfigDict

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str


class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr

    model_config = ConfigDict(from_attributes=True)  # ← en vez del viejo Config


--- rental-mvp-micro/services/auth/app/crud/__init__.py ---
# services/auth/app/crud/__init__.py
from .user import (
    get_user_by_username,
    get_user_by_email,
    create_user,
    verify_password,
)

__all__ = [
    "get_user_by_username",
    "get_user_by_email",
    "create_user",
    "verify_password",
]


--- rental-mvp-micro/services/auth/app/crud/user.py ---
# app/crud/user.py
from __future__ import annotations

import bcrypt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from app.models.models import User
from app.schemas.user import UserCreate

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ───────────────────────── helpers privados ──────────────────────────────


def _hash_password(pwd: str) -> str:
    """Devuelve el hash seguro de *pwd* usando passlib/bcrypt."""
    return pwd_context.hash(pwd)


# ────────────────────────────── Lectura ───────────────────────────────────


def get_user_by_username(db: Session, username: str) -> User | None:
    """Busca un usuario por *username* (o None si no existe)."""
    return db.query(User).filter(User.username == username).first()


def get_user_by_email(db: Session, email: str) -> User | None:
    """Busca un usuario por email (o None si no existe)."""
    return db.query(User).filter(User.email == email).first()


# ───────────────────────────── Escritura ──────────────────────────────────


def create_user(db: Session, user_in: UserCreate) -> User:
    """
    Crea un nuevo usuario con contraseña hasheada y lo devuelve.
    Lanza IntegrityError si el username/email ya existen.
    """
    db_user = User(
        username=user_in.username,
        email=user_in.email,
        hashed_pw=_hash_password(user_in.password),
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


# ──────────────────────── Utilidades varias ──────────────────────────────


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    Comprueba que *plain_password* coincide con el hash almacenado.
    Se usa bcrypt directamente para evitar dependencias implícitas.
    """
    try:
        return bcrypt.checkpw(plain_password.encode(), hashed_password.encode())
    except Exception:  # noqa: BLE001
        # bcrypt lanza ValueError si el hash no es válido
        return False


--- rental-mvp-micro/services/auth/app/core/__init__.py ---


--- rental-mvp-micro/services/auth/app/core/config.py ---
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")

settings = Settings()        # instancia global


--- rental-mvp-micro/services/auth/app/core/security.py ---
# app/core/security.py
from datetime import datetime, timedelta
from jose import jwt
from app.core.config import settings

def create_access_token(subject: str) -> str:
    to_encode = {"sub": subject}
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)


--- rental-mvp-micro/services/auth/app/api/auth.py ---
# services/auth/app/api/auth.py  (versión corregida y completa)
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session

from app.deps import get_db, get_current_user
from app.crud import user as crud
from app.schemas.user import UserCreate, UserOut
from app.schemas.token import Token
from app.core.security import create_access_token

router = APIRouter(tags=["auth"])        # ← ¡sin prefix aquí!


# ───────────────────────────  SIGN-UP  ────────────────────────────
@router.post(
    "/signup",
    response_model=UserOut,
    status_code=status.HTTP_201_CREATED,
)
def signup(user_in: UserCreate, db: Session = Depends(get_db)):
    """
    Registra un nuevo usuario.

    • 409 si el **username** o el **email** ya existen.
    """
    try:
        return crud.create_user(db, user_in)
    except IntegrityError:
        db.rollback()
        # comprobamos cuál de las dos claves únicas falló para un mensaje claro
        detail = (
            "Nombre de usuario en uso"
            if crud.get_user_by_username(db, user_in.username)
            else "Email ya registrado"
        )
        raise HTTPException(status.HTTP_409_CONFLICT, detail=detail)


# ───────────────────────────  LOGIN  ──────────────────────────────
@router.post("/token", response_model=Token)
def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db),
):
    """
    Intercambia usuario/contraseña por un JWT (password-grant).

    • 401 si las credenciales no son válidas.
    """
    user = crud.get_user_by_username(db, form_data.username)
    if not user or not crud.verify_password(form_data.password, user.hashed_pw):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Usuario o contraseña incorrectos",
            headers={"WWW-Authenticate": "Bearer"},
        )

    access_token = create_access_token(subject=user.username)
    return {"access_token": access_token, "token_type": "bearer"}


# ───────────────────────────  WHO AM I?  ─────────────────────────
@router.get("/users/me", response_model=UserOut)
def read_users_me(current_user: UserOut = Depends(get_current_user)):
    """Devuelve **id, username y email** asociados al token actual."""
    return current_user


# alias corto opcional
router.get("/me", response_model=UserOut)(read_users_me)


--- rental-mvp-micro/services/auth/app/api/__init__.py ---


--- rental-mvp-micro/services/frontend/index.html ---
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Rental-MVP</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- rental-mvp-micro/services/frontend/package.json ---
{
  "name": "rental-mvp-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --max-warnings=0 --fix"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.3.4",
    "@stripe/stripe-js": "^1.53.0",
    "@stripe/react-stripe-js": "^2.3.0",           
    "@tanstack/react-query": "^5.38.0",
    "axios": "^1.6.8",
    "clsx": "^2.1.1",
    "focus-trap-react": "^10.2.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.23.1",
    "zod": "^3.23.4",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@tailwindcss/container-queries": "",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.2",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.0",
    "vite": "^5.3.1"
  }
}


--- rental-mvp-micro/services/frontend/vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      "/api/auth":       "http://localhost:8001",
      "/api/items":      "http://localhost:8002",
      "/api/categories": "http://localhost:8002",
      "/api/rentals":    "http://localhost:8003",
      "/api/upload":     "http://localhost:8004",
      "/api/payments":   "http://localhost:8005",
      "/uploads":        "http://localhost:8004"
    }
  }
});


--- rental-mvp-micro/services/frontend/.env ---
VITE_STRIPE_PK=pk_test_51RkNe1BAdmER2zaJNEdcxq6T7uBwtyGDiHaFRF5I9LjGGbbYxmvPfdffr4HLqZy753gB6ixJRFfu7HXRsntuCGyH00szhzRTcx
VITE_API_URL=http://localhost


--- rental-mvp-micro/services/frontend/Dockerfile ---
# ───────────── Etapa 1: build Vite ─────────────
FROM node:20 AS builder
WORKDIR /frontend

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .
RUN npm run build          # genera /frontend/dist

# ───────────── Etapa 2: Nginx ─────────────
FROM nginx:1.27-alpine

# Copia estáticos compilados
COPY --from=builder /frontend/dist /usr/share/nginx/html

# Proxy /api → backend
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


--- rental-mvp-micro/services/frontend/nginx.conf ---
server {
    listen 80;
    server_name _;

    # --------- estáticos Vite ---------
    root /usr/share/nginx/html;
    index index.html;
    client_max_body_size 100M;

    location / {
        # Single-Page-App → fallback al index.html
        try_files $uri $uri/ /index.html;
    }

    # --------- proxy API (micro-servicios) ---------
    location /api/auth/       { proxy_pass http://auth:8000; }
    location /api/items/      { proxy_pass http://catalog:8000; }
    location /api/categories/ { proxy_pass http://catalog:8000; }
    location /api/rentals/    { proxy_pass http://rentals:8000; }
    location /api/upload/     { proxy_pass http://upload:8000; }
    location /api/payments/   { proxy_pass http://payments:8000; }

    # --------- ficheros subidos ---------
    location /uploads/        { proxy_pass http://upload:8000; }

    # --------- cabeceras comunes ---------
    location /api/ {
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}


--- rental-mvp-micro/services/frontend/tsconfig.json ---
{
    "compilerOptions": {
        "target": "ES2022",
        "lib": [
            "DOM",
            "DOM.Iterable",
            "ES2022"
        ],
        "module": "ESNext",
        "moduleResolution": "Node",
        "types": [
            "vite/client"
        ],
        "strict": true,
        "jsx": "react-jsx",
        "resolveJsonModule": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": [
        "src"
    ]
}

--- rental-mvp-micro/services/frontend/postcss.config.js ---
// rental-mvp/frontend/postcss.config.js
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {}
    }
};


--- rental-mvp-micro/services/frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./index.html', './src/**/*.{ts,tsx}'],
    theme: {
        //   ↓↓↓ breakpoints fluidos
        screens: {
            xs: '375px',
            sm: '640px',
            md: '768px',
            lg: '1024px',
            xl: '1280px',
            '2xl': '1440px',
            '3xl': '1920px'
        },
        container: { center: true, padding: '1rem' },
        extend: {
            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },
            colors: {
                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },
                surface: '#ffffff'
            },
            boxShadow: {
                card: '0 1px 3px rgba(0,0,0,.08)',
                cardHover: '0 4px 12px rgba(0,0,0,.12)'
            }
        }
    },
    plugins: [
        require('@tailwindcss/forms'),
        require('@tailwindcss/typography'),
        require('@tailwindcss/line-clamp'),
        require('@tailwindcss/container-queries') // 🆕
    ]
};


--- rental-mvp-micro/services/frontend/src/App.tsx ---
// src/App.tsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { Suspense } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Elements } from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

import ErrorBoundary from "./ErrorBoundary";
import { AuthProvider } from "./hooks/useAuth";

import Header from "./components/layout/Header";
import Footer from "./components/layout/Footer";

import Home from "./pages/Home";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import Protected from "./Protected";

import "./styles/global.css";

/* ─── Stripe ─────────────────────────────────────────────────────────── */
const stripePromise = loadStripe(
  import.meta.env.VITE_STRIPE_PK as string /* pk_test_xxx */
);
/* ─────────────────────────────────────────────────────────────────────── */

const queryClient = new QueryClient();

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Elements stripe={stripePromise}>
          <BrowserRouter>
            <ErrorBoundary>
              <Header />

              <Suspense
                fallback={
                  <p className="py-32 text-center text-gray-500">Cargando…</p>
                }
              >
                <Routes>
                  <Route path="/" element={<Home />} />
                  <Route path="/login" element={<Login />} />
                  <Route path="/register" element={<Register />} />
                  {/* ---------- RUTA PROTEGIDA ---------- */}
                  <Route
                    path="/dashboard"
                    element={
                      <Protected>
                        <Dashboard />
                      </Protected>
                    }
                  />
                </Routes>
              </Suspense>

              <Footer />
            </ErrorBoundary>
          </BrowserRouter>
        </Elements>
      </AuthProvider>
    </QueryClientProvider>
  );
}


--- rental-mvp-micro/services/frontend/src/api.ts ---
import axios from "axios";

/**
 * Singleton Axios con:
 *  · baseURL "/api"
 *  · Authorization automático si hay token en localStorage
 */
export const api = axios.create({ baseURL: "/api" });

api.interceptors.request.use(cfg => {
  const token = localStorage.getItem("token");
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  return cfg;
});


--- rental-mvp-micro/services/frontend/src/ErrorBoundary.tsx ---
import React, { ErrorInfo, ReactNode } from "react";

type Props = { children: ReactNode };
type State = { hasError: boolean };

class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: ErrorInfo) {
    // Aquí podrías enviar logs a Sentry, LogRocket, etc.
    console.error("⛔ Unhandled error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <main className="flex min-h-[60vh] items-center justify-center">
          <p className="rounded-md bg-red-50 p-6 text-center text-lg text-red-600 shadow">
            ¡Ups! Algo ha ido mal.<br />
            Intenta recargar la página.
          </p>
        </main>
      );
    }
    return this.props.children;
  }
}

export default ErrorBoundary;


--- rental-mvp-micro/services/frontend/src/main.tsx ---
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';          // 🆕
import './styles/global.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
    <Toaster                                         // 🆕
      position="top-right"
      toastOptions={{
        style: { fontSize: '0.875rem' },            // 14 px
        duration: 3000
      }}
    />
  </React.StrictMode>
);


--- rental-mvp-micro/services/frontend/src/utils.ts ---
// utils.ts
/**
 * URL base de la API.  Ajusta en .env.local si no usas localhost:8000
 *   VITE_API_BASE_URL=https://tu-dominio.com
 */
export const API_BASE =
  import.meta.env.VITE_API_BASE_URL ?? window.location.origin;

/**  
 * Devuelve una URL de imagen válida.
 * - Si ya es absoluta → la deja tal cual.
 * - Si empieza por “/” → la concatena con API_BASE.
 * - Si viene `undefined` → usa el *fallback*.
 */
export function resolveImage(url: string | undefined, fallback: string) {
  if (!url) return fallback;
  if (/^https?:\/\//i.test(url)) return url; // absoluta
  return `${API_BASE}${url.startsWith("/") ? "" : "/"}${url}`;
}


--- rental-mvp-micro/services/frontend/src/Protected.tsx ---
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "./hooks/useAuth";

export default function Protected({ children }: { children: JSX.Element }) {
  const { token } = useAuth();
  const loc = useLocation();
  return token ? children : <Navigate to="/login" replace state={{ from: loc }} />;
}


--- rental-mvp-micro/services/frontend/src/assets/payments/paypal.svg ---
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="24" cy="24" r="20" fill="#0070BA"/>
<path d="M32.3305 18.0977C32.3082 18.24 32.2828 18.3856 32.2542 18.5351C31.2704 23.5861 27.9046 25.331 23.606 25.331H21.4173C20.8916 25.331 20.4486 25.7127 20.3667 26.2313L19.2461 33.3381L18.9288 35.3527C18.8755 35.693 19.1379 36 19.4815 36H23.3634C23.8231 36 24.2136 35.666 24.286 35.2127L24.3241 35.0154L25.055 30.3772L25.1019 30.1227C25.1735 29.6678 25.5648 29.3338 26.0245 29.3338H26.6051C30.3661 29.3338 33.3103 27.8068 34.1708 23.388C34.5303 21.5421 34.3442 20.0008 33.393 18.9168C33.1051 18.59 32.748 18.3188 32.3305 18.0977Z" fill="white" fill-opacity="0.6"/>
<path d="M31.3009 17.6871C31.1506 17.6434 30.9955 17.6036 30.8364 17.5678C30.6766 17.5328 30.5127 17.5018 30.3441 17.4748C29.754 17.3793 29.1074 17.334 28.4147 17.334H22.5676C22.4237 17.334 22.2869 17.3666 22.1644 17.4254C21.8948 17.5551 21.6944 17.8104 21.6459 18.1229L20.402 26.0013L20.3662 26.2311C20.4481 25.7126 20.8911 25.3308 21.4168 25.3308H23.6055C27.9041 25.3308 31.2699 23.5851 32.2537 18.5349C32.2831 18.3854 32.3078 18.2398 32.33 18.0975C32.0811 17.9655 31.8115 17.8525 31.5212 17.7563C31.4496 17.7324 31.3757 17.7094 31.3009 17.6871Z" fill="white" fill-opacity="0.8"/>
<path d="M21.6461 18.1231C21.6946 17.8105 21.895 17.5552 22.1646 17.4264C22.2879 17.3675 22.4239 17.3349 22.5678 17.3349H28.4149C29.1077 17.3349 29.7542 17.3803 30.3444 17.4757C30.513 17.5027 30.6768 17.5338 30.8367 17.5687C30.9957 17.6045 31.1508 17.6443 31.3011 17.688C31.3759 17.7103 31.4498 17.7334 31.5222 17.7564C31.8125 17.8527 32.0821 17.9664 32.331 18.0976C32.6237 16.231 32.3287 14.9601 31.3194 13.8093C30.2068 12.5424 28.1986 12 25.629 12H18.169C17.6441 12 17.1963 12.3817 17.1152 12.9011L14.0079 32.5969C13.9467 32.9866 14.2473 33.3381 14.6402 33.3381H19.2458L20.4022 26.0014L21.6461 18.1231Z" fill="white"/>
</svg>

--- rental-mvp-micro/services/frontend/src/assets/payments/mastercard.svg ---
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 -11 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.5" y="0.5" width="69" height="47" rx="5.5" fill="white" stroke="#D9D9D9"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3945 34.7619C33.0114 36.8184 29.92 38.0599 26.5421 38.0599C19.0047 38.0599 12.8945 31.8788 12.8945 24.254C12.8945 16.6291 19.0047 10.448 26.5421 10.448C29.92 10.448 33.0114 11.6895 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z" fill="#ED0006"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3945 34.7619C38.3289 32.2296 40.1896 28.4616 40.1896 24.254C40.1896 20.0463 38.3289 16.2783 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z" fill="#F9A000"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3946 13.7461C38.329 16.2784 40.1897 20.0463 40.1897 24.254C40.1897 28.4616 38.329 32.2295 35.3946 34.7618C32.4603 32.2295 30.5996 28.4616 30.5996 24.254C30.5996 20.0463 32.4603 16.2784 35.3946 13.7461Z" fill="#FF5E00"/>
</svg>

--- rental-mvp-micro/services/frontend/src/assets/payments/visa.svg ---
<?xml version="1.0" encoding="utf-8"?>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 -139.5 750 750" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <desc>Created with Sketch.</desc>
    <defs>

</defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="visa" fill="#393939" fill-rule="nonzero">
            <path d="M52.8846154,28.2035928 C39.6085397,28.2035928 28.8461538,38.7262417 28.8461538,51.7065868 L28.8461538,419.293413 C28.8461538,432.273758 39.6085397,442.796407 52.8846154,442.796407 L697.115385,442.796407 C710.39146,442.796407 721.153846,432.273758 721.153846,419.293413 L721.153846,51.7065868 C721.153846,38.7262417 710.39146,28.2035928 697.115385,28.2035928 L52.8846154,28.2035928 Z M52.8846154,0 L697.115385,0 C726.322751,-5.0099645e-15 750,23.1498275 750,51.7065868 L750,419.293413 C750,447.850173 726.322751,471 697.115385,471 L52.8846154,471 C23.6772488,471 3.41607085e-15,447.850173 0,419.293413 L0,51.7065868 C-3.41607085e-15,23.1498275 23.6772488,5.0099645e-15 52.8846154,0 Z" id="outline">

</path>
            <g id="Logo" transform="translate(60.000000, 139.000000)">
                <polygon id="Shape" points="222.597614 191.12625 254.442205 4.26252273 305.375795 4.26252273 273.50925 191.12625">

</polygon>
                <path d="M457.520795,8.29261364 C447.429341,4.50688636 431.61825,0.444340909 411.871568,0.444340909 C361.544114,0.444340909 326.092295,25.7884773 325.790659,62.1117955 C325.507159,88.9622045 351.099477,103.940932 370.419477,112.879295 C390.244432,122.038159 396.910023,127.879977 396.815523,136.058523 C396.689523,148.584068 380.983432,154.306568 366.343568,154.306568 C345.957341,154.306568 335.127068,151.474432 318.400568,144.497659 L311.837114,141.527114 L304.688523,183.359114 C316.585023,188.57475 338.583477,193.094523 361.424795,193.328386 C414.964295,193.328386 449.721205,168.274432 450.116386,129.486477 C450.30825,108.229705 436.738432,92.0520682 407.353705,78.7161136 C389.550477,70.07175 378.647659,64.3034318 378.763159,55.55025 C378.763159,47.7831136 387.991705,39.4776136 407.931205,39.4776136 C424.587068,39.2189318 436.651568,42.8509773 446.051932,46.6367045 L450.616568,48.7930227 L457.520795,8.29261364" id="Shape">

</path>
                <path d="M588.586568,4.26252273 L549.229705,4.26252273 C537.037295,4.26252273 527.91375,7.59006818 522.55875,19.7586136 L446.915795,191.006932 L500.399932,191.006932 C500.399932,191.006932 509.145477,167.981386 511.123295,162.926114 C516.967977,162.926114 568.924841,163.006295 576.353114,163.006295 C577.876568,169.547795 582.550023,191.006932 582.550023,191.006932 L629.811477,191.006932 L588.586568,4.26252273 Z M526.143068,124.92375 C530.355477,114.157432 546.43575,72.6881591 546.43575,72.6881591 C546.135068,73.1854773 550.616659,61.8693409 553.189159,54.8534318 L556.632205,70.96425 C556.632205,70.96425 566.384795,115.569205 568.42275,124.922795 L526.143068,124.922795 L526.143068,124.92375 Z" id="Path">

</path>
                <path d="M179.361477,4.26252273 L129.496023,131.689568 L124.183023,105.793705 C114.900068,75.94125 85.9773409,43.5993409 53.6430682,27.4073864 L99.2388409,190.828432 L153.127705,190.766386 L233.313341,4.26252273 L179.361477,4.26252273" id="Path">

</path>
                <path d="M82.9686136,4.26252273 L0.838568182,4.26252273 L0.188522727,8.15038636 C64.0848409,23.6178409 106.364523,60.9968864 123.914795,105.909205 L106.056205,20.0382955 C102.973023,8.20575 94.0308409,4.67488636 82.9686136,4.26252273" id="Shape">

</path>
            </g>
        </g>
    </g>
</svg>

--- rental-mvp-micro/services/frontend/src/hooks/useAuth.tsx ---
import React, { createContext, useContext, useState } from "react";

/* ------------------------------------------------------------------ */
/*                       Contexto & proveedor                         */
/* ------------------------------------------------------------------ */
type AuthContextT = {
  token: string | null;
  login: (t: string) => void;
  logout: () => void;
};
const AuthContext = createContext<AuthContextT | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children
}) => {
  const [token, setToken] = useState<string | null>(
    () => localStorage.getItem("token")
  );

  const login = (t: string) => {
    localStorage.setItem("token", t);
    setToken(t);
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken(null);
  };

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

/* ------------------------------------------------------------------ */
/*                           Hooks util                               */
/* ------------------------------------------------------------------ */
export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth debe usarse dentro de <AuthProvider>");
  return ctx;
};

/** Lee el token directo de localStorage (válido fuera de React). */
export const getTokenLS = () => localStorage.getItem("token");


--- rental-mvp-micro/services/frontend/src/hooks/useStripe.ts ---
// src/hooks/useStripe.ts
import { loadStripe, Stripe } from "@stripe/stripe-js";
import { useEffect, useState } from "react";

export function useStripe() {
  const [stripe, setStripe] = useState<Stripe | null>(null);

  useEffect(() => {
    (async () => {
      const pk = import.meta.env.VITE_STRIPE_PK;
      if (pk && !stripe) {
        const s = await loadStripe(pk);
        setStripe(s);
      }
    })();
  }, [stripe]);

  return stripe;
}


--- rental-mvp-micro/services/frontend/src/styles/global.css ---
/* frontend/src/styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ---------- BASE ---------- */
@layer base {
  html { @apply scroll-smooth; }
  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }
}

/* ---------- COMPONENTS ---------- */
@layer components {
  /* Botones */
  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-brand-hover disabled:opacity-60; }
  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-colors hover:bg-brand/5; }

  /* Badges */
  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }
  .badge--ok     { @apply badge bg-green-100 text-green-800; }
  .badge--danger { @apply badge bg-red-100 text-red-800; }

  /* Campos select genérico */
  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand; }

  /* Toast */
  .toast-success { @apply bg-green-600 text-white; }
  .toast-error   { @apply bg-red-600 text-white; }

  /* Títulos fluidos (ejemplo h1) */
  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px → 56 px aprox */
}

/* ---------- UTILITIES PERSONALIZADAS ---------- */
@layer utilities {
  .text-balance { text-wrap: balance; }

  /* Evita re-pintados innecesarios en grandes listas */
  .content-auto { content-visibility: auto; }

  /* Oculta scrollbar (usarlo con cuidado) */
  .scrollbar-none::-webkit-scrollbar { display: none; }
}


--- rental-mvp-micro/services/frontend/src/features/auth/register.ts ---
import { api } from "../../api";

/** Lanza 400 si el username o el email ya están en uso. */
export async function register(
  username: string,
  email: string,
  password: string
): Promise<void> {
  await api.post("/auth/signup", { username, email, password });
}


--- rental-mvp-micro/services/frontend/src/features/auth/login.ts ---
import { api } from "../../api";

export async function login(username: string, password: string): Promise<string> {
  const { data } = await api.post(
    "/auth/token",
    new URLSearchParams({ username, password }),
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );
  return data.access_token as string;
}


--- rental-mvp-micro/services/frontend/src/features/categories/useCategories.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Category = { id: number; name: string };

export default function useCategories() {
  const { data, isLoading } = useQuery<Category[]>({
    queryKey: ["categories"],
    queryFn: () => api.get<Category[]>("/categories/").then(r => r.data),
    staleTime: 5 * 60_000 // 5 min
  });

  return { data: data ?? [], loading: isLoading };
}


--- rental-mvp-micro/services/frontend/src/features/items/useItems.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Item = {
  id: number;
  name: string;
  description?: string;
  price_per_h: number;
  available: boolean;

  /* ---- imágenes ---- */
  /** 1 sola (compat.) */
  image_url?: string;
  /** varias (nuevo)   */
  image_urls?: string[];

  categories?: { id: number; name: string }[];
};

export function useItems(params?: URLSearchParams) {
  const queryKey = ["items", params?.toString() ?? ""];

  const { data, isLoading, refetch } = useQuery<Item[]>({
    queryKey,
    queryFn: () =>
      api.get<Item[]>("/items/", { params }).then(r => r.data),
    staleTime: 60_000 // 1 min sin refetch
  });

  return { data: data ?? [], loading: isLoading, refetch };
}


--- rental-mvp-micro/services/frontend/src/features/items/AddItemModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/features/items/AddItemModal.tsx                                       */
/* -------------------------------------------------------------------------- */
import { Fragment, useEffect, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon, PhotoIcon, TrashIcon } from '@heroicons/react/24/outline';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';

import useCategories, { Category } from '../categories/useCategories';
import { useAuth } from '../../hooks/useAuth';
import { api } from '../../api';

/* -------------------------------------------------------------------------- */
/*                               schema + types                               */
/* -------------------------------------------------------------------------- */

const MB = 1024 * 1024;
const MAX_IMAGES = 6;

const priceRegex = /^\d+([.,]\d{1,2})?$/; // hasta 2 decimales

const schema = z.object({
  name: z.string().min(3, 'Mínimo 3 caracteres'),
  description: z.string().max(500).optional(),
  price_per_h: z
    .string()
    .regex(priceRegex, 'Precio inválido')
    .transform(v => Number(v.replace(',', '.'))),
  categories: z.array(z.number()).min(1, 'Selecciona al menos una categoría'),
  images: z
    .array(
      z
        .instanceof(File)
        .refine(f => f.size <= 5 * MB, 'Cada imagen máx. 5 MB')
    )
    .min(1, 'Al menos 1 imagen')
    .max(MAX_IMAGES, `Máx. ${MAX_IMAGES} imágenes`)
});

type FormData = z.infer<typeof schema>;

type Props = {
  open: boolean;
  onClose: () => void;
  onCreated: () => void; // callback para refrescar listado
};

/* -------------------------------------------------------------------------- */
/*                           Componente principal                             */
/* -------------------------------------------------------------------------- */
export default function AddItemModal({ open, onClose, onCreated }: Props) {
  const { data: cats } = useCategories();
  const { token } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: { categories: [], images: [] }
  });

  /* --------------------------- previews dinámicos -------------------------- */
  const files = watch('images'); // File[]
  const [previews, setPreviews] = useState<string[]>([]);

  useEffect(() => {
    const urls = files.map(f => URL.createObjectURL(f));
    setPreviews(urls);
    return () => urls.forEach(URL.revokeObjectURL); // cleanup
  }, [files]);

  /* ------------------------------- submit --------------------------------- */
  async function onSubmit(data: FormData) {
    if (!token) {
      toast.error('Debes haber iniciado sesión');
      return;
    }

    try {
      /* 1.- subimos imágenes (paralelo) */
      let image_urls: string[] = [];
      if (data.images.length) {
        const uploads = await Promise.all(
          data.images.map(async img => {
            const fd = new FormData();
            fd.append('file', img);
            const r = await api.post<{ url: string }>('/upload/', fd, {
              headers: { 'Content-Type': 'multipart/form-data' }
            });
            return r.data.url;
          })
        );
        image_urls = uploads;
      }

      /* 2.- creamos ítem */
      await api.post('/items/', {
        name: data.name,
        description: data.description,
        price_per_h: data.price_per_h,
        categories: data.categories,
        image_urls           // 🔥 ahora array
      });

      toast.success('¡Producto publicado!');
      reset();
      onCreated();
      onClose();
    } catch (err: any) {
      console.error(err);
      toast.error(err.response?.data?.detail ?? 'Error al crear producto');
    }
  }

  /* ------------------------------------------------------------------------ */
  /*                                   UI                                     */
  /* ------------------------------------------------------------------------ */
  return (
    <Transition show={open} as={Fragment}>
      <Dialog
        onClose={() => {
          reset();
          onClose();
        }}
        className="relative z-50"
      >
        {/* ---------- Backdrop ---------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------- Wrapper ---------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-2xl max-h-[90vh] flex-col overflow-x-hidden rounded-xl bg-white shadow-xl">
              {/* ---------- Header ---------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  Nuevo producto
                </Dialog.Title>
                <button
                  type="button"
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  onClick={() => {
                    reset();
                    onClose();
                  }}
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </header>

              {/* ---------- Form (scrollable) ---------- */}
              <form
                onSubmit={handleSubmit(onSubmit)}
                className="grid flex-1 grid-cols-1 gap-6 overflow-y-auto px-6 py-8 md:grid-cols-2"
              >
                {/* --------------------------- Columna 1 --------------------------- */}
                <div className="space-y-4">
                  {/* Nombre */}
                  <div>
                    <label className="block text-sm font-medium">Nombre</label>
                    <input
                      {...register('name')}
                      className="form-input mt-1 w-full"
                      placeholder="Taladro Bosch 800 W"
                    />
                    {errors.name && (
                      <p className="text-xs text-red-600">
                        {errors.name.message}
                      </p>
                    )}
                  </div>

                  {/* Descripción */}
                  <div>
                    <label className="block text-sm font-medium">
                      Descripción
                    </label>
                    <textarea
                      {...register('description')}
                      rows={5}
                      className="form-input mt-1 w-full resize-none"
                      placeholder="Añade detalles técnicos, estado, accesorios incluidos…"
                    />
                    {errors.description && (
                      <p className="text-xs text-red-600">
                        {errors.description.message}
                      </p>
                    )}
                  </div>

                  {/* Precio */}
                  <div>
                    <label className="block text-sm font-medium">
                      Precio / hora (€)
                    </label>
                    <input
                      {...register('price_per_h')}
                      className="form-input mt-1 w-full"
                      placeholder="3.5"
                      inputMode="decimal"
                    />
                    {errors.price_per_h && (
                      <p className="text-xs text-red-600">
                        {errors.price_per_h.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Columna 2 --------------------------- */}
                <div className="space-y-4">
                  {/* Imágenes */}
                  <div>
                    <label className="block text-sm font-medium">
                      Imágenes ({files.length}/{MAX_IMAGES})
                    </label>

                    {/* zona de drop / input */}
                    <label className="mt-1 flex min-h-[4rem] w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-dashed border-gray-300 p-4 text-center text-sm text-gray-500 hover:border-brand hover:text-brand">
                      <PhotoIcon className="h-8 w-8" />
                      <span className="mt-1">
                        PNG, JPG · máx. 5 MB c/u · hasta {MAX_IMAGES}
                      </span>
                      <input
                        type="file"
                        accept="image/*"
                        multiple
                        className="sr-only"
                        onChange={e =>
                          setValue(
                            'images',
                            [...(e.target.files ?? [])] as File[],
                            { shouldValidate: true }
                          )
                        }
                      />
                    </label>

                    {/* previews */}
                    {previews.length > 0 && (
                      <div className="mt-4 grid grid-cols-3 gap-2">
                        {previews.map((src, i) => (
                          <div key={i} className="relative">
                            <img
                              src={src}
                              alt={`preview ${i + 1}`}
                              className="h-24 w-full rounded object-cover"
                            />
                            <button
                              type="button"
                              title="Eliminar"
                              onClick={() => {
                                const copy = [...files];
                                copy.splice(i, 1);
                                setValue('images', copy, { shouldValidate: true });
                              }}
                              className="absolute right-0 top-0 rounded-bl bg-black/60 p-0.5 text-white transition-colors hover:bg-black/80"
                            >
                              <TrashIcon className="h-4 w-4" />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {errors.images && (
                      <p className="mt-1 text-xs text-red-600">
                        {errors.images.message as string}
                      </p>
                    )}
                  </div>

                  {/* Categorías */}
                  <div>
                    <p className="mb-1 text-sm font-medium">Categorías</p>
                    <div className="flex flex-wrap gap-2">
                      {cats.map((c: Category) => {
                        const selected = watch('categories').includes(c.id);
                        return (
                          <button
                            type="button"
                            key={c.id}
                            onClick={() => {
                              const current = new Set(watch('categories'));
                              selected
                                ? current.delete(c.id)
                                : current.add(c.id);
                              setValue('categories', [...current]);
                            }}
                            className={
                              selected
                                ? 'rounded-full bg-brand px-3 py-0.5 text-xs text-white'
                                : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                            }
                          >
                            {c.name}
                          </button>
                        );
                      })}
                    </div>
                    {errors.categories && (
                      <p className="text-xs text-red-600">
                        {errors.categories.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Footer --------------------------- */}
                <div className="md:col-span-2 flex justify-end gap-3">
                  <button
                    type="button"
                    className="btn--ghost"
                    onClick={() => {
                      reset();
                      onClose();
                    }}
                  >
                    Cancelar
                  </button>
                  <button className="btn" disabled={isSubmitting}>
                    {isSubmitting ? 'Publicando…' : 'Publicar'}
                  </button>
                </div>
              </form>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- rental-mvp-micro/services/frontend/src/features/items/ItemList.tsx ---
import { useEffect, useMemo, useRef, useState } from 'react';
import axios from 'axios';
import Container from '../../components/shared/Container';
import ItemCard from '../../components/ui/ItemCard';
import SkeletonCard from '../../components/ui/SkeletonCard';
import FiltersSidebar from '../../components/filters/FiltersSidebar';
import { useItems } from './useItems';
import { useAuth } from '../../hooks/useAuth';
import AddItemModal from './AddItemModal';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

/* -------------------------------------------------- */
/*                    Tipado filtros                  */
/* -------------------------------------------------- */
type FiltersT = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

export default function ItemList() {
  /* ------------------------------ filtros ------------------------------ */
  const [filters, setFilters] = useState<FiltersT>({});

  /* Serializamos filtros → query-string */
  const params = useMemo(() => {
    const p = new URLSearchParams();

    Object.entries(filters).forEach(([k, v]) => {
      if (v === undefined || v === '') return;
      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));
      else p.set(k, String(v));
    });

    /* orden (price_asc | price_desc | name) */
    if (filters.order) {
      const [field, dir] = filters.order.split('_');
      p.set('order_by', field === 'price' ? 'price' : 'name');
      p.set('order_dir', dir);
    }
    return p;
  }, [filters]);

  const { data: items, loading, refetch } = useItems(params);
  const { token } = useAuth();

  /* ----------------------- drawer móvil filtros ----------------------- */
  const [openFilters, setOpenFilters] = useState(false);

  /* ------------------------ infinite-scroll demo ---------------------- */
  const sentinel = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!sentinel.current) return;
    const ob = new IntersectionObserver(
      entries => {
        if (entries[0].isIntersecting && !loading) {
          /* Aquí podrías paginar → aumentar offset y refetch() */
        }
      },
      { rootMargin: '600px' }
    );
    ob.observe(sentinel.current);
    return () => ob.disconnect();
  }, [loading]);

  /* ----------------------- modal “añadir ítem” ------------------------ */
  const [addOpen, setAddOpen] = useState(false);

  /* -------------------------------------------------------------------- */
  return (
    <Container>
      {/* ---------- botón abrir filtros (solo xs-sm) ---------- */}
      <button onClick={() => setOpenFilters(true)} className="btn mb-4 md:hidden">
        <Bars3Icon className="mr-2 h-5 w-5" />
        Filtros
      </button>

      <div className="flex flex-col gap-10 md:flex-row">
        {/* ---------- Filtros (off-canvas en móvil) ---------- */}
        {/* Backdrop */}
        <div
          className={`
            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden
            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
          `}
          onClick={() => setOpenFilters(false)}
        />

        {/* Panel */}
        <aside
          className={`
            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform
            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none
            ${openFilters ? 'translate-x-0' : '-translate-x-full'}
          `}
        >
          {/* Cerrar (solo móvil) */}
          <button onClick={() => setOpenFilters(false)} className="mb-4 md:hidden">
            <XMarkIcon className="h-6 w-6" />
          </button>

          <FiltersSidebar
            value={filters}
            onChange={setFilters}
            onReset={() => setFilters({})}
          />
        </aside>

        {/* -------------------- listado de tarjetas -------------------- */}
        <section className="flex-1">
          {/* CTA añadir producto (solo usuarios logueados) */}
          {token && (
            <div className="flex justify-end">
              <button className="btn mb-4" onClick={() => setAddOpen(true)}>
                Añadir producto
              </button>
            </div>
          )}

          {/* loader inicial */}
          {loading && !items.length ? (
            <GridSkeleton />
          ) : (
            <Grid>
              {items.map(it => (
                <ItemCard key={it.id} item={it} />
              ))}
              {/* sentinel infinite-scroll */}
              <div ref={sentinel} />
            </Grid>
          )}

          {/* vacío */}
          {!loading && !items.length && (
            <p className="py-6 text-center text-gray-500">No hay resultados.</p>
          )}
        </section>
      </div>

      {/* modal añadir */}
      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />
    </Container>
  );
}

/* -------------------------------------------------- */
/*                       Helpers                      */
/* -------------------------------------------------- */

/* Grid responsive: min-width 12 rem (≈192 px) y se
   auto-ajusta con container-queries si el padre pasa
   a ser un “container” — funciona también sin CQ. */
const Grid = ({ children }: { children: React.ReactNode }) => (
  <div
    className="
      grid gap-6 py-6 content-auto
      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]
      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]
    "
  >
    {children}
  </div>
);

const GridSkeleton = () => (
  <Grid>
    {Array.from({ length: 8 }).map((_, i) => (
      <SkeletonCard key={i} />
    ))}
  </Grid>
);


--- rental-mvp-micro/services/frontend/src/features/rentals/reserve.ts ---
/**
 * Orquesta todo el flujo:
 *   1) crea un alquiler              → /api/rentals/
 *   2) pide PaymentIntent a Stripe   → /api/payments/create-intent
 * Devuelve el `client_secret` para confirmar el pago desde el front.
 */
import { api } from "../../api";

export async function reserve(item_id: number) {
  // demo: 1 h desde ahora
  const start_at = new Date().toISOString();
  const end_at   = new Date(Date.now() + 3_600_000).toISOString();

  // 1) crear alquiler
  const { data: rental } = await api.post("/rentals/", {
    item_id,
    start_at,
    end_at
  });

  // 2) crear PaymentIntent (fianza = rental.deposit)
  const { data: intent } = await api.post("/payments/create-intent", {
    amount: rental.deposit
  });

  return { clientSecret: intent.client_secret, rental };
}


--- rental-mvp-micro/services/frontend/src/features/rentals/RentalList.tsx ---
import { useAuth } from "../../hooks/useAuth";
import { useRentals } from "./useRentals";

export default function RentalList() {
  const { token } = useAuth();
  const { data: rentals, loading } = useRentals(token);   // ← sin cambios extra

  if (!token)   return <p className="text-gray-500">Debes iniciar sesión para ver tus alquileres.</p>;
  if (loading)  return <p className="text-gray-500">Cargando…</p>;
  if (!rentals.length) return <p className="text-gray-500">No tienes alquileres activos.</p>;

  return (
    <div className="space-y-2">
      {rentals.map(r => (
        <div
          key={r.id}
          className="flex items-center justify-between rounded-md bg-white p-3 shadow"
        >
          <span className="font-medium">{r.item.name}</span>
          <span className={r.returned ? "badge--ok" : "badge badge--danger"}>
            {r.returned ? "Devuelto" : "Pendiente"}
          </span>
        </div>
      ))}
    </div>
  );
}


--- rental-mvp-micro/services/frontend/src/features/rentals/createRental.ts ---
// src/features/rentals/createRental.ts
import { api } from "../../api";

/** Crea un alquiler y devuelve su objeto completo (`RentalOut`). */
export async function createRental(item_id: number,
                                   start_at: string,
                                   end_at: string) {
  const { data } = await api.post("/rentals/", { item_id, start_at, end_at });
  return data;                         // ← incluye `deposit`
}


--- rental-mvp-micro/services/frontend/src/features/rentals/useRentals.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";
import { Item } from "../items/useItems";

export type Rental = {
  id: number;
  item: Item;
  start_at: string;
  end_at: string;
  deposit: number;
  returned: boolean;
};

/**
 * Devuelve la lista de alquileres del usuario.  
 * Solo dispara la petición cuando `token` es *truthy*.
 */
export function useRentals(token: string | null) {
  const enabled = Boolean(token);          // ← normalizamos

  const { data, isLoading } = useQuery<Rental[]>({
    queryKey: ["rentals"],
    queryFn: () => api.get<Rental[]>("/rentals/me").then(r => r.data),
    enabled,                               // ✓ ahora siempre boolean
    staleTime: 60_000,
    retry: false
  });

  return { data: data ?? [], loading: isLoading };
}


--- rental-mvp-micro/services/frontend/src/features/rentals/payments/createIntent.ts ---
// src/features/payments/createIntent.ts
import { api } from "../../../api";

export async function createIntent(amount: number) {
  const { data } = await api.post("/payments/create-intent", { amount });
  return data as { client_secret: string };
}


--- rental-mvp-micro/services/frontend/src/pages/Register.tsx ---
// src/pages/Register.tsx
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import zxcvbn from "zxcvbn";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import clsx from "clsx";

import { register as apiRegister } from "../features/auth/register";
import { login as apiLogin } from "../features/auth/login";
import { useAuth } from "../hooks/useAuth";

import Container from "../components/shared/Container";
import SocialButton from "../components/ui/SocialButton";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";

/* -------- validation schema -------- */
const schema = z
  .object({
    username: z.string().min(3, "Mín. 3 caracteres"),
    email: z.string().email("Email inválido"),
    password: z.string().min(8, "Mín. 8 caracteres"),
    confirm: z.string(),
    terms: z.literal(true, {
      errorMap: () => ({ message: "Acepta los términos" }),
    }),
  })
  .refine(data => data.password === data.confirm, {
    message: "Las contraseñas no coinciden",
    path: ["confirm"],
  });

type FormData = z.infer<typeof schema>;

export default function Register() {
  const navigate = useNavigate();
  const { login: saveToken } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

  const pwd = watch("password", "");

  /* -------------------------------------------------------------------- */
  const onSubmit = async (data: FormData) => {
    try {
      // 1) signup
      await apiRegister(data.username, data.email, data.password);

      // 2) auto-login
      const token = await apiLogin(data.username, data.password);
      saveToken(token);

      toast.success("Cuenta creada, ¡bienvenido!");
      navigate("/dashboard");
    } catch (err: any) {
      // FastAPI devuelve detail en .response.data.detail
      const msg =
        err?.response?.data?.detail ??
        "No se pudo crear la cuenta. Inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* -------------------------------------------------------------------- */
  const strength = zxcvbn(pwd).score; // 0-4

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          <h1 className="text-center text-2xl font-bold">Crear cuenta</h1>

          {/* ───── login social ───── */}
          <div className="space-y-3">
            <SocialButton provider="google" icon={FcGoogle} label="Con Google" />
            <SocialButton provider="github" icon={FaGithub} label="Con GitHub" />
          </div>

          <div className="relative text-xs text-gray-400">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2">
              o regístrate con email
            </span>
          </div>

          {/* ───── formulario ───── */}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <input
              {...register("username")}
              placeholder="Nombre de usuario"
              className="form-input w-full"
            />
            {errors.username && (
              <p className="text-xs text-red-600">{errors.username.message}</p>
            )}

            <input
              {...register("email")}
              type="email"
              placeholder="Email"
              className="form-input w-full"
            />
            {errors.email && (
              <p className="text-xs text-red-600">{errors.email.message}</p>
            )}

            <input
              {...register("password")}
              type="password"
              placeholder="Contraseña"
              className="form-input w-full"
            />

            {/* strength meter */}
            {pwd && (
              <div className="h-2 w-full overflow-hidden rounded bg-gray-200">
                <div
                  style={{ width: `${(strength + 1) * 20}%` }}
                  className={clsx(
                    "h-full transition-all",
                    [
                      "bg-red-500",
                      "bg-orange-400",
                      "bg-yellow-400",
                      "bg-lime-500",
                      "bg-green-600",
                    ][strength],
                  )}
                />
              </div>
            )}
            {errors.password && (
              <p className="text-xs text-red-600">
                {errors.password.message}
              </p>
            )}

            <input
              {...register("confirm")}
              type="password"
              placeholder="Repite contraseña"
              className="form-input w-full"
            />
            {errors.confirm && (
              <p className="text-xs text-red-600">{errors.confirm.message}</p>
            )}

            {/* terms */}
            <label className="flex gap-2 text-xs text-gray-600">
              <input type="checkbox" {...register("terms")} />
              Acepto los&nbsp;
              <a href="/terms" className="text-brand hover:underline">
                Términos y la Política de privacidad
              </a>
            </label>
            {errors.terms && (
              <p className="text-xs text-red-600">{errors.terms.message}</p>
            )}

            <button className="btn w-full" disabled={isSubmitting}>
              {isSubmitting ? "Creando…" : "Crear cuenta"}
            </button>
          </form>
        </div>
      </main>
    </Container>
  );
}


--- rental-mvp-micro/services/frontend/src/pages/Login.tsx ---
// src/pages/Login.tsx
import { FormEvent, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { login as apiLogin } from '../features/auth/login';

import { FcGoogle } from 'react-icons/fc';
import { FaGithub } from 'react-icons/fa';
import SocialButton from '../components/ui/SocialButton';
import Container from '../components/shared/Container';
import toast from 'react-hot-toast';  

export default function Login() {
  const [user, setUser] = useState('');
  const [pwd, setPwd] = useState('');
  const [error, setError] = useState<string | null>(null);

  const { login: saveToken } = useAuth();
  const nav = useNavigate();

  async function handleSubmit(e: FormEvent) {
    e.preventDefault();
    try {
  const token = await apiLogin(user, pwd);
  saveToken(token);
  nav('/dashboard');
  toast.success('¡Bienvenido de nuevo!');            // 🆕
} catch {
  toast.error('Usuario o contraseña incorrectos');   // 🆕
}
  }

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          {/* Título */}
          <h1 className="text-center text-2xl font-bold">Iniciar sesión</h1>

          {/* Social login */}
          <div className="space-y-3">
            <SocialButton
              provider="google"
              icon={FcGoogle}
              label="Entrar con Google"
            />
            <SocialButton
              provider="github"
              icon={FaGithub}
              label="Entrar con GitHub"
            />
          </div>

          <div className="relative">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2 text-xs text-gray-400">
              o continúa con tu cuenta
            </span>
          </div>

          {/* Form tradicional */}
          {error && <p className="text-center text-sm text-red-600">{error}</p>}
          <form onSubmit={handleSubmit} className="space-y-4">
            <input
              className="form-input w-full"
              placeholder="Usuario"
              value={user}
              onChange={e => setUser(e.target.value)}
              required
            />
            <input
              className="form-input w-full"
              type="password"
              placeholder="Contraseña"
              value={pwd}
              onChange={e => setPwd(e.target.value)}
              required
            />
            <button className="btn w-full">Entrar</button>
          </form>

          <p className="text-center text-xs text-gray-500">
            ¿No tienes cuenta?{' '}
            <a href="/register" className="font-medium text-brand hover:underline">
              Regístrate
            </a>
          </p>
        </div>
      </main>
    </Container>
  );
}


--- rental-mvp-micro/services/frontend/src/pages/Dashboard.tsx ---
import Container from '../components/shared/Container';
import ItemList from '../features/items/ItemList';
import RentalList from '../features/rentals/RentalList';
import Section from '../components/shared/Section';

export default function Dashboard() {
  return (
    <Container>
      <Section title="Mis alquileres">
        <RentalList />
      </Section>

      <Section title="Catálogo público">
        <ItemList />
      </Section>
    </Container>
  );
}


--- rental-mvp-micro/services/frontend/src/pages/Home.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/pages/Home.tsx                                                        */
/* -------------------------------------------------------------------------- */
import { Link } from 'react-router-dom';
import {
  ArrowRightIcon,
  PlusIcon,
  CloudArrowUpIcon,
  CalendarDaysIcon,
  BanknotesIcon,
} from '@heroicons/react/24/solid';

import Container from '../components/shared/Container';
import Section from '../components/shared/Section';

import Stats from '../components/Home/Stats';
import LogoCloud from '../components/Home/LogoCloud';
import Testimonials from '../components/Home/Testimonials';
import FAQ from '../components/Home/FAQ';

export default function Home() {
  /* Pasos del “cómo funciona” con su icono */
  const STEPS = [
    {
      title: 'Publica',
      desc: 'Sube tu producto, ponle precio y límites de uso.',
      icon: CloudArrowUpIcon,
    },
    {
      title: 'Reserva',
      desc: 'Los usuarios pagan la fianza y reservan al instante.',
      icon: CalendarDaysIcon,
    },
    {
      title: 'Gana',
      desc: 'Entregas el ítem, recibes el pago y valoraciones ⭐',
      icon: BanknotesIcon,
    },
  ];

  return (
    <>
      {/* ---------- HERO ---------- */}
      <section className="relative isolate overflow-hidden bg-brand text-white">
        {/* background blur blob */}
        <span className="pointer-events-none absolute -top-16 left-1/2 -z-10 h-[500px] w-[500px] -translate-x-1/2 rounded-full bg-white/10 blur-3xl" />

        <Container>
          <div className="flex min-h-[70vh] flex-col items-center justify-center gap-6 py-28 text-center">
            <h1 className="max-w-3xl text-balance text-5xl font-extrabold leading-tight">
              Dónde tus cosas <br className="hidden sm:inline" />
              <span className="text-white/80">cambian de mano</span>
            </h1>

            <p className="max-w-xl text-lg/relaxed text-white/90">
              Alquila herramientas, gadgets o equipamiento deportivo y monetiza lo
              que ya tienes. ¡Conecta con tu barrio y ahorra al planeta!
            </p>

            <div className="flex flex-wrap justify-center gap-4">
              <Link to="/dashboard" className="btn inline-flex gap-2">
                Explorar catálogo <ArrowRightIcon className="h-5 w-5" />
              </Link>
              <Link to="/dashboard#add" className="btn--ghost inline-flex gap-2">
                <PlusIcon className="h-5 w-5" />
                Publicar mi primer ítem
              </Link>
            </div>
          </div>
        </Container>

        {/* wave separator */}
        <svg
          aria-hidden
          viewBox="0 0 1440 120"
          className="block w-full text-brand"
          preserveAspectRatio="none"
        >
          <path
            d="M0,96L48,106.7C96,117,192,139,288,128C384,117,480,75,576,58.7C672,43,768,53,864,74.7C960,96,1056,128,1152,138.7C1248,149,1344,139,1392,133.3L1440,128L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"
            className="fill-white"
          />
        </svg>
      </section>

      {/* ---------- STATS ---------- */}
      <Stats />

      {/* ---------- LOGO CLOUD ---------- */}
      <LogoCloud />

      {/* ---------- CÓMO FUNCIONA ---------- */}
      <Section title="¿Cómo funciona?">
        <Container>
          <div className="grid gap-12 md:grid-cols-3">
            {STEPS.map(({ title, desc, icon: Icon }) => (
              <div key={title} className="space-y-4 text-center">
                <div className="mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-brand/10">
                  <Icon className="h-6 w-6 text-brand" />
                </div>
                <h3 className="text-xl font-semibold">{title}</h3>
                <p className="text-gray-600">{desc}</p>
              </div>
            ))}
          </div>
        </Container>
      </Section>

      {/* ---------- TESTIMONIOS ---------- */}
      <Testimonials />

      {/* ---------- FAQ ---------- */}
      <FAQ />

      {/* ---------- CTA FINAL ---------- */}
      <section className="bg-brand py-16 text-center text-white">
        <Container>
          <h2 className="mb-6 text-3xl font-bold">
            ¿Listo para estrenar ingresos extra?
          </h2>
          <Link to="/register" className="btn">
            Crear cuenta gratis
          </Link>
        </Container>
      </section>
    </>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/PaymentModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/PaymentModal.tsx                                        */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  PaymentElement,
  useElements,
  useStripe,
} from "@stripe/react-stripe-js";
import { ArrowPathIcon, XMarkIcon } from "@heroicons/react/24/outline";
import toast from "react-hot-toast";

/* ⚠️  usa tu clave pública de Stripe (env var VITE_STRIPE_PK) */
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PK!);

type Props = {
  open: boolean;
  clientSecret: string;
  onClose: () => void;
  onSuccess: () => void;
};

export default function PaymentModal(props: Props) {
  const { open, clientSecret, onClose, onSuccess } = props;

  if (!clientSecret) return null;

  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-[60]">
        {/* ---- backdrop ---- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---- panel ---- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="w-full max-w-md overflow-hidden rounded-xl bg-white shadow-xl">
              <header className="flex items-center justify-between border-b px-5 py-4">
                <Dialog.Title className="text-base font-semibold">
                  Pago de fianza
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </header>

              <Elements
                stripe={stripePromise}
                options={{ clientSecret, appearance: { theme: "stripe" } }}
              >
                <CheckoutForm onCancel={onClose} onSuccess={onSuccess} />
              </Elements>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}

/* ------------------------ formulario interno ----------------------------- */
function CheckoutForm({
  onCancel,
  onSuccess,
}: {
  onCancel: () => void;
  onSuccess: () => void;
}) {
  const stripe = useStripe();
  const elements = useElements();
  const [processing, setProcessing] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    setProcessing(true);
    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        /* 👇 opción de redirección si quisieras */
        // return_url: `${window.location.origin}/dashboard`,
      },
      redirect: "if_required",
    });

    setProcessing(false);

    if (error) {
      toast.error(error.message ?? "No se pudo procesar el pago.");
    } else {
      onSuccess(); // ← notifica al padre (QuickViewModal)
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-6">
      {/* Tarjeta / Wallets / iDEAL, etc. */}
      <PaymentElement />

      <div className="flex items-center justify-end gap-3">
        <button
          type="button"
          onClick={onCancel}
          className="btn-secondary px-4 py-2 text-sm"
        >
          Cancelar
        </button>

        <button
          disabled={!stripe || !elements || processing}
          className="btn px-6 py-2 text-sm"
        >
          {processing ? (
            <>
              <ArrowPathIcon className="mr-2 h-5 w-5 animate-spin" />
              Procesando…
            </>
          ) : (
            "Pagar y confirmar"
          )}
        </button>
      </div>
    </form>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/SkeletonCard.tsx ---
export default function SkeletonCard() {
  return (
    <article
      className="
        flex flex-col overflow-hidden rounded-lg bg-white shadow-card
        animate-pulse
      "
    >
      {/* zona de imagen (mantiene proporción 4:3) */}
      <div className="aspect-[4/3] w-full bg-gray-200" />

      {/* zona de texto */}
      <div className="space-y-2 p-4">
        <div className="h-4 w-2/3 rounded bg-gray-200" />
        <div className="h-4 w-1/3 rounded bg-gray-200" />
      </div>
    </article>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/LazyImage.tsx ---
import { useState } from 'react';

type Props = {
  src: string;
  alt: string;
  className?: string;
  /** ancho estimado para el atributo `sizes` (ej. "100vw", "50vw") */
  sizes?: string;
};

export default function LazyImage({
  src,
  alt,
  className = '',
  sizes = '100vw'
}: Props) {
  const [loaded, setLoaded] = useState(false);

  /* genera srcset (320-640-960 px) */
  const srcset = [320, 640, 960]
    .map(w => `${src.replace(/(\?.*)?$/, '')}?w=${w} ${w}w`)
    .join(', ');

  return (
    <img
      src={src}
      srcSet={srcset}
      sizes={sizes}
      loading="lazy"
      decoding="async"                    /* 🆕 */
      onLoad={() => setLoaded(true)}
      className={`${className} transition-opacity duration-500 ${
        loaded ? 'opacity-100' : 'opacity-0'
      }`}
      alt={alt}
    />
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/ItemCard.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemCard.tsx                                            */
/* -------------------------------------------------------------------------- */
import { useState } from "react";
import { HeartIcon, EyeIcon } from "@heroicons/react/24/solid";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { resolveImage } from "../../utils";
import LazyImage from "./LazyImage";
import ItemDetailModal from "./ItemDetailModal";

export default function ItemCard({ item }: { item: Item }) {
  const [open, setOpen] = useState(false);

  /* -------- portada (1ª del array o la legacy) -------- */
  const cover = item.image_urls?.[0] ?? item.image_url;

  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`
  );

  return (
    <>
      <article
        onClick={() => setOpen(true)}
        className="flex cursor-pointer flex-col overflow-hidden rounded-lg bg-surface shadow-card transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover"
      >
        {/* ---------- Foto ---------- */}
        <div className="relative">
          <LazyImage
            src={imgSrc}
            alt={item.name}
            className="aspect-[4/3] w-full object-contain p-2"
          />

          {!item.available && (
            <span className="absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white">
              Alquilado
            </span>
          )}

          {/* acciones rápidas */}
          <div className="absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100">
            <IconBtn title="Vista rápida">
              <EyeIcon className="h-5 w-5" />
            </IconBtn>
            <IconBtn title="Favorito">
              <HeartIcon className="h-5 w-5" />
            </IconBtn>
          </div>
        </div>

        {/* ---------- Info ---------- */}
        <div className="flex flex-1 flex-col gap-2 px-4 pb-4">
          <h3 className="line-clamp-1 text-lg font-semibold">{item.name}</h3>

          {item.description && (
            <p className="line-clamp-2 text-sm text-gray-600">
              {item.description}
            </p>
          )}

          <div className="mt-auto flex items-center justify-between">
            <p className="text-base font-bold text-brand">
              {item.price_per_h.toFixed(2)} €/h
            </p>
            <span
              className={clsx(
                "badge",
                item.available ? "badge--ok" : "badge--danger"
              )}
            >
              {item.available ? "Disponible" : "Alquilado"}
            </span>
          </div>
        </div>
      </article>

      {/* ---------- Modal de detalle ---------- */}
      <ItemDetailModal open={open} onClose={() => setOpen(false)} item={item} />
    </>
  );
}

/* -------------------------------------------------------------------------- */
/*                                 Helpers                                    */
/* -------------------------------------------------------------------------- */
function IconBtn({
  children,
  title
}: {
  children: React.ReactNode;
  title: string;
}) {
  return (
    <button
      type="button"
      title={title}
      onClick={e => e.stopPropagation()}
      className="rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white"
    >
      {children}
    </button>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/SearchBar.tsx ---
import { useForm } from 'react-hook-form';

type Props = { onSubmit: (q: URLSearchParams) => void };

export default function SearchBar({ onSubmit }: Props) {
  const { register, handleSubmit, reset } = useForm<{
    q: string;
    min: number | undefined;
    max: number | undefined;
  }>({ defaultValues: { q: '', min: undefined, max: undefined } });

  return (
    <form
      onSubmit={handleSubmit(values => {
        const params = new URLSearchParams();
        if (values.q) params.set('name', values.q);
        if (values.min) params.set('min_price', values.min.toString());
        if (values.max) params.set('max_price', values.max.toString());
        onSubmit(params);
      })}
      className="flex flex-wrap items-end gap-3"
    >
      <input
        {...register('q')}
        placeholder="Buscar producto…"
        className="form-input w-52"
      />
      <input
        {...register('min', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ mínimo"
        className="form-input w-32"
      />
      <input
        {...register('max', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ máximo"
        className="form-input w-32"
      />
      <button className="btn">Filtrar</button>
      <button
        type="button"
        onClick={() => {
          reset();
          onSubmit(new URLSearchParams());
        }}
        className="btn--ghost"
      >
        Limpiar
      </button>
    </form>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/ItemDetailModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemDetailModal.tsx                                     */
/*  – Integra reserva vía micro-servicio **rentals** + Stripe                 */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import {
  XMarkIcon,
  StarIcon,
  ShieldCheckIcon,
  ClockIcon,
  MapPinIcon,
  CheckBadgeIcon,
  UserCircleIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";
import { FaFacebookF, FaTwitter, FaWhatsapp } from "react-icons/fa";
import toast from "react-hot-toast";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { reserve } from "../../features/rentals/reserve";
import { useAuth } from "../../hooks/useAuth";
import { resolveImage } from "../../utils";

import LazyImage from "./LazyImage";
import PaymentModal from "./PaymentModal";

/* ------------------- helpers (Rating, Feature, Description) --------------- */

const Rating = ({ value }: { value: number }) => (
  <div className="flex items-center gap-1">
    {Array.from({ length: 5 }).map((_, i) => (
      <StarIcon
        key={i}
        className={clsx(
          "h-4 w-4",
          i < value ? "fill-amber-400 stroke-amber-400" : "stroke-gray-300"
        )}
      />
    ))}
    <span className="ml-1 text-xs text-gray-500">({value.toFixed(1)})</span>
  </div>
);

const Feature = ({
  icon: Icon,
  text,
}: {
  icon: (p: any) => JSX.Element;
  text: string;
}) => (
  <li className="flex items-center gap-2">
    <Icon className="h-4 w-4 shrink-0 text-brand" />
    {text}
  </li>
);

const Description = ({ text }: { text: string }) => {
  const bullets = text
    .split(/(?:\u2022|\n)/) // • o salto de línea
    .map(t => t.trim())
    .filter(Boolean);

  if (bullets.length > 1) {
    return (
      <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-700">
        {bullets.map((b, i) => (
          <li key={i}>{b}</li>
        ))}
      </ul>
    );
  }
  return (
    <p className="whitespace-pre-line text-sm leading-relaxed text-gray-700">
      {text}
    </p>
  );
};

/* -------------------------------------------------------------------------- */

type Props = { open: boolean; onClose: () => void; item: Item | null };

export default function ItemDetailModal({ open, onClose, item }: Props) {
  if (!item) return null;

  /* ---------- galería ---------- */
  const gallery =
    item.image_urls?.length
      ? item.image_urls
      : [
          resolveImage(
            item.image_url,
            `https://source.unsplash.com/800x600/?${encodeURIComponent(
              item.name
            )}`
          ),
        ];
  const [active, setActive] = useState(0);

  /* ---------- specs demo ---------- */
  const SPECS: Record<string, string | number> = {
    Potencia: "600 W",
    Peso: "1,8 kg",
    Velocidad: "0-2 800 rpm",
  };

  /* ---------- reserva ---------- */
  const { token } = useAuth();
  const [loading, setLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState<string | null>(null);

  const handleReserve = async () => {
    if (!token) return toast.error("Debes iniciar sesión primero");
    if (!item.available)
      return toast.error("Este ítem no está disponible actualmente");

    try {
      setLoading(true);
      const { clientSecret } = await reserve(item.id); // crea alquiler + PaymentIntent
      setLoading(false);
      setClientSecret(clientSecret); // abre modal de pago
    } catch (err: any) {
      setLoading(false);
      const msg =
        err?.response?.data?.detail ??
        "No se pudo reservar, inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* ---------------------------------------------------------------------- */
  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-50">
        {/* ---- backdrop ---- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---- wrapper ---- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-6xl max-h-[95vh] flex-col overflow-hidden rounded-xl bg-white shadow-xl">
              {/* ---------------- Header ---------------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  {item.name}
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </header>

              {/* ---------------- Body ---------------- */}
              <section className="flex flex-1 flex-col gap-8 overflow-y-auto p-6 lg:flex-row">
                {/* ---------- Galería ---------- */}
                <div className="lg:w-1/2">
                  <div className="aspect-video overflow-hidden rounded-lg border">
                    <LazyImage
                      src={gallery[active]}
                      alt={item.name}
                      className="h-full w-full object-contain"
                      sizes="(min-width:1024px) 50vw, 90vw"
                    />
                  </div>

                  {gallery.length > 1 && (
                    <div className="mt-3 flex gap-2 overflow-x-auto">
                      {gallery.map((src, i) => (
                        <button
                          key={i}
                          onClick={() => setActive(i)}
                          className={clsx(
                            "shrink-0 overflow-hidden rounded-md border",
                            active === i && "ring-2 ring-brand"
                          )}
                        >
                          <LazyImage
                            src={src}
                            alt=""
                            className="h-16 w-24 object-cover"
                            sizes="96px"
                          />
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* ---------- Ficha ---------- */}
                <div className="flex flex-1 flex-col gap-6">
                  <div className="flex flex-col gap-1 sm:flex-row sm:items-center sm:justify-between">
                    <p className="text-3xl font-bold text-brand">
                      {item.price_per_h.toFixed(2)} €/h
                    </p>
                    <Rating value={4} />
                  </div>

                  {item.description ? (
                    <Description text={item.description} />
                  ) : (
                    <p className="text-sm text-gray-500">Sin descripción.</p>
                  )}

                  <table className="mt-2 w-full max-w-sm text-sm">
                    <tbody>
                      {Object.entries(SPECS).map(([k, v]) => (
                        <tr key={k} className="border-b last:border-0">
                          <td className="py-1 pr-4 text-gray-600">{k}</td>
                          <td className="py-1 font-medium">{v}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>

                  {!!item.categories?.length && (
                    <div className="flex flex-wrap gap-2">
                      {item.categories.map(c => (
                        <span
                          key={c.id}
                          className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                        >
                          {c.name}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* vendedor (placeholder) */}
                  <div className="flex items-center gap-3 rounded-md bg-gray-50 p-4">
                    <UserCircleIcon className="h-10 w-10 text-gray-400" />
                    <div className="flex-1">
                      <p className="flex items-center gap-1 text-sm font-semibold">
                        Juan P.
                        <CheckBadgeIcon className="h-4 w-4 text-emerald-500" />
                      </p>
                      <p className="text-xs text-gray-500">
                        Propietario verificado
                      </p>
                    </div>
                  </div>

                  <p className="flex items-center gap-1 text-xs text-gray-500">
                    <MapPinIcon className="h-4 w-4" />
                    Recogida en Madrid 28010
                  </p>

                  <ul className="space-y-1 text-sm">
                    <Feature
                      icon={ShieldCheckIcon}
                      text="Pago seguro con fianza"
                    />
                    <Feature
                      icon={ClockIcon}
                      text="Cancelación gratis hasta 12 h antes"
                    />
                  </ul>

                  {/* redes */}
                  <div className="mt-3 flex gap-4">
                    <Social icon={FaFacebookF} label="Facebook" />
                    <Social icon={FaTwitter} label="Twitter" />
                    <Social icon={FaWhatsapp} label="WhatsApp" />
                  </div>

                  {/* --------- LOGOS de pago --------- */}
                  <div className="mt-6 flex justify-center gap-10 opacity-80">
                    <img
                      src="/src/assets/payments/visa.svg"
                      alt="Visa"
                      className="h-8 w-auto md:h-10"
                    />
                    <img
                      src="/src/assets/payments/mastercard.svg"
                      alt="Mastercard"
                      className="h-8 w-auto md:h-10"
                    />
                    <img
                      src="/src/assets/payments/paypal.svg"
                      alt="PayPal"
                      className="h-8 w-auto md:h-10"
                    />
                  </div>

                  {/* CTA – XL */}
                  <button
                    onClick={handleReserve}
                    disabled={loading}
                    className="btn mt-4 w-full py-4 text-lg lg:max-w-xl"
                  >
                    {loading ? (
                      <>
                        <ArrowPathIcon className="mr-3 h-6 w-6 animate-spin" />
                        Reservando…
                      </>
                    ) : (
                      "Reservar ahora"
                    )}
                  </button>
                </div>
              </section>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>

      {/* ─────────── Modal de pago Stripe ─────────── */}
      <PaymentModal
        open={Boolean(clientSecret)}
        clientSecret={clientSecret ?? ""}
        onClose={() => setClientSecret(null)}
        onSuccess={() => {
          toast.success("Reserva confirmada y fianza retenida 🎉");
          onClose();
        }}
      />
    </Transition>
  );
}

/* --------------------------- Social button ------------------------------- */
function Social({
  icon: Icon,
  label,
}: {
  icon: (p: any) => JSX.Element;
  label: string;
}) {
  return (
    <a
      href="#share"
      aria-label={`Compartir en ${label}`}
      className="rounded-full bg-gray-100 p-2 text-gray-600 transition-colors hover:bg-gray-200"
    >
      <Icon className="h-4 w-4" />
    </a>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/SocialButton.tsx ---
// src/components/ui/SocialButton.tsx
import { IconType } from 'react-icons';
import clsx from 'clsx';

type Props = {
  icon: IconType;
  label: string;
  provider: 'google' | 'github';
};

export default function SocialButton({ icon: Icon, label, provider }: Props) {
  return (
    <a
      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */
      className={clsx(
        'btn flex w-full items-center justify-center gap-2',
        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',
        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'
      )}
    >
      <Icon className="h-5 w-5" />
      {label}
    </a>
  );
}


--- rental-mvp-micro/services/frontend/src/components/ui/QuickViewModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/QuickViewModal.tsx                                      */
/*  – permite reservar el ítem vía micro-servicio **rentals** + Stripe        */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import {
  XMarkIcon,
  StarIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";
import toast from "react-hot-toast";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { reserve } from "../../features/rentals/reserve";
import { useAuth } from "../../hooks/useAuth";
import LazyImage from "./LazyImage";
import { resolveImage } from "../../utils";
import PaymentModal from "./PaymentModal";

type Props = {
  open: boolean;
  onClose: () => void;
  item: Item | null;
};

export default function QuickViewModal({ open, onClose, item }: Props) {
  /* ─────────── guard clause ─────────── */
  if (!item) return null;

  /* portada (1ª imagen o fallback) */
  const cover = item.image_urls?.[0] ?? item.image_url;
  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`
  );

  /* ─────────── auth + reserva ─────────── */
  const { token } = useAuth();
  const [loading, setLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState<string | null>(null);

  /* reserva de **1 h** a partir de “ya” (demo) */
  const handleReserve = async () => {
    if (!token) return toast.error("Debes iniciar sesión");
    if (!item.available)
      return toast.error("Este ítem no está disponible ahora mismo");

    try {
      setLoading(true);
      const { clientSecret } = await reserve(item.id);
      setLoading(false);
      setClientSecret(clientSecret); // abre modal Stripe
    } catch (err: any) {
      setLoading(false);
      const msg =
        err?.response?.data?.detail ??
        "No se pudo crear la reserva. Inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* ────────────────── UI ────────────────── */
  return (
    <>
      <Transition show={open} as={Fragment}>
        <Dialog onClose={onClose} className="relative z-50">
          {/* ---------- Backdrop ---------- */}
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-150"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
          </Transition.Child>

          {/* ---------- Panel ---------- */}
          <div className="fixed inset-0 grid place-items-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-200"
              enterFrom="scale-95 opacity-0"
              enterTo="scale-100 opacity-100"
              leave="ease-in duration-150"
              leaveFrom="scale-100 opacity-100"
              leaveTo="scale-95 opacity-0"
            >
              <Dialog.Panel className="flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden rounded-xl bg-white shadow-xl">
                {/* ───────── header ───────── */}
                <header className="flex items-center justify-between border-b p-4">
                  <Dialog.Title className="text-lg font-semibold">
                    {item.name}
                  </Dialog.Title>
                  <button
                    onClick={onClose}
                    className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  >
                    <XMarkIcon className="h-5 w-5" />
                  </button>
                </header>

                {/* ───────── body ───────── */}
                <section className="grid gap-6 overflow-y-auto p-6 md:grid-cols-2">
                  {/* imagen */}
                  <div className="flex items-center justify-center">
                    <LazyImage
                      src={imgSrc}
                      alt={item.name}
                      className="w-full max-h-[60vh] rounded-lg object-contain"
                    />
                  </div>

                  {/* info */}
                  <div className="flex flex-col gap-4">
                    <p className="text-2xl font-bold text-brand">
                      {item.price_per_h.toFixed(2)} €/h
                    </p>

                    {/* rating provisional */}
                    <div className="flex items-center gap-1">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <StarIcon
                          key={i}
                          className={clsx(
                            "h-5 w-5",
                            i < 4
                              ? "fill-amber-400 stroke-amber-400"
                              : "stroke-gray-300"
                          )}
                        />
                      ))}
                      <span className="ml-1 text-sm text-gray-500">(4,0)</span>
                    </div>

                    {item.description ? (
                      <p className="prose max-w-none text-sm leading-relaxed">
                        {item.description}
                      </p>
                    ) : (
                      <p className="text-sm text-gray-500">Sin descripción.</p>
                    )}

                    {!!item.categories?.length && (
                      <div className="flex flex-wrap gap-2">
                        {item.categories.map(c => (
                          <span
                            key={c.id}
                            className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                          >
                            {c.name}
                          </span>
                        ))}
                      </div>
                    )}

                    {/* ───────── CTA ───────── */}
                    <button
                      onClick={handleReserve}
                      disabled={loading}
                      className="btn mt-auto w-full"
                    >
                      {loading ? (
                        <>
                          <ArrowPathIcon className="mr-2 h-5 w-5 animate-spin" />
                          Reservando…
                        </>
                      ) : (
                        "Reservar ahora"
                      )}
                    </button>
                  </div>
                </section>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition>

      {/* ───── modal Stripe para introducir la tarjeta ───── */}
      <PaymentModal
        open={Boolean(clientSecret)}
        clientSecret={clientSecret ?? ""}
        onClose={() => setClientSecret(null)}
        onSuccess={() => {
          toast.success("Reserva confirmada y fianza retenida 🎉");
          onClose();
        }}
      />
    </>
  );
}


--- rental-mvp-micro/services/frontend/src/components/shared/Section.tsx ---
type Props = {
  title?: string;
  children: React.ReactNode;
  id?: string;
};

export default function Section({ title, children, id }: Props) {
  return (
    <section id={id} className="space-y-6 py-16">
      {title && (
        <h2 className="text-center text-3xl font-bold tracking-tight">{title}</h2>
      )}
      {children}
    </section>
  );
}


--- rental-mvp-micro/services/frontend/src/components/shared/Container.tsx ---
export default function Container({ children }: { children: React.ReactNode }) {
  return <div className="container">{children}</div>;
}


--- rental-mvp-micro/services/frontend/src/components/layout/Footer.tsx ---
export default function Footer() {
  return (
    <footer className="mt-24 border-t bg-white py-12 text-center text-sm text-gray-500">
      Rental‑MVP © {new Date().getFullYear()} · Hecho con ❤ en FastAPI + React
    </footer>
  );
}


--- rental-mvp-micro/services/frontend/src/components/layout/Header.tsx ---
// src/components/layout/Header.tsx
import { Link, NavLink } from 'react-router-dom';
import { Disclosure } from '@headlessui/react';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';
import logo from '../../assets/logo.png';
import { useAuth } from '../../hooks/useAuth';

export default function Header() {
  const { token, logout } = useAuth();

  const links = token
    ? [
        { to: '/dashboard', label: 'Dashboard' },
        { label: 'Salir', action: logout }
      ]
    : [{ to: '/login', label: 'Login' }];

  return (
    <Disclosure
      as="header"
      className="
        sticky top-0 z-40 w-full border-b bg-white/80
        backdrop-blur shadow-sm supports-backdrop-blur:bg-white/60
      "
    >
      {({ open }) => (
        <>
          {/* ----------------------- Barra principal ----------------------- */}
          <div className="container mx-auto flex items-center justify-between py-4 md:py-5">
            {/* ---------- Logo (aún más grande) ---------- */}
            <Link to="/" aria-label="Inicio" className="flex items-center gap-2">
              <img
                src={logo}
                alt="Logo Rental-MVP"
                className="h-16 w-auto select-none md:h-20 lg:h-26" /* antes: 12-16-20 */
                decoding="async"
              />
              <span className="sr-only">Rental-MVP</span>
            </Link>

            {/* ---------- Navegación desktop ---------- */}
            <nav className="hidden gap-10 text-base font-semibold text-gray-700 md:flex">
              {links.map(({ to, label, action }) =>
                action ? (
                  <button
                    key={label}
                    onClick={action}
                    className="transition-colors hover:text-brand"
                  >
                    {label}
                  </button>
                ) : (
                  <NavLink
                    key={label}
                    to={to!}
                    className={({ isActive }) =>
                      `transition-colors hover:text-brand ${
                        isActive ? 'text-brand' : ''
                      }`
                    }
                  >
                    {label}
                  </NavLink>
                )
              )}
            </nav>

            {/* ---------- Botón hamburguesa (más grande) ---------- */}
            <Disclosure.Button
              className="rounded-md p-2 text-gray-700 hover:bg-gray-100 focus:outline-none md:hidden"
              aria-label="Abrir menú"
            >
              {open ? (
                <XMarkIcon className="h-10 w-10" />   
              ) : (
                <Bars3Icon className="h-10 w-10" />  
              )}
            </Disclosure.Button>
          </div>

          {/* ----------------------- Panel móvil ------------------------- */}
          <Disclosure.Panel className="border-t bg-white/95 backdrop-blur md:hidden">
            <nav className="container mx-auto flex flex-col gap-5 py-5 text-base font-medium text-gray-700">
              {links.map(({ to, label, action }) =>
                action ? (
                  <button
                    key={label}
                    onClick={action}
                    className="text-left transition-colors hover:text-brand"
                  >
                    {label}
                  </button>
                ) : (
                  <NavLink
                    key={label}
                    to={to!}
                    className={({ isActive }) =>
                      `transition-colors hover:text-brand ${
                        isActive ? 'text-brand' : ''
                      }`
                    }
                  >
                    {label}
                  </NavLink>
                )
              )}
            </nav>
          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}


--- rental-mvp-micro/services/frontend/src/components/Home/FAQ.tsx ---
import { Disclosure } from '@headlessui/react';
import { ChevronUpIcon } from '@heroicons/react/24/outline';
import Container from '../shared/Container';

const FAQS = [
  ['¿Cómo se gestionan los pagos?', 'Usamos Stripe Connect para retener la fianza y liberar el pago una vez devuelto el ítem.'],
  ['¿Qué pasa si mi herramienta se daña?', 'Dispones de un seguro opcional a todo riesgo y sistema de valoraciones para vetar a malos usuarios.'],
  ['¿Puedo cancelar una reserva?', 'Sí, hasta 12 h antes sin penalización.'],
  ['¿Hay comisión?', 'Solo cobramos un 8 % al propietario cuando se confirma el alquiler.']
];

export default function FAQ() {
  return (
    <section className="bg-gray-50 py-16">
      <Container>
        <h2 className="mb-8 text-center text-3xl font-bold">Preguntas frecuentes</h2>

        <div className="mx-auto max-w-3xl space-y-4">
          {FAQS.map(([q, a]) => (
            <Disclosure key={q}>
              {({ open }) => (
                <>
                  <Disclosure.Button className="flex w-full items-center justify-between rounded-md bg-white px-4 py-3 text-left text-sm font-medium shadow">
                    {q}
                    <ChevronUpIcon
                      className={`h-5 w-5 transition-transform ${open ? 'rotate-180' : ''}`}
                    />
                  </Disclosure.Button>
                  <Disclosure.Panel className="px-4 pt-2 text-sm text-gray-600">
                    {a}
                  </Disclosure.Panel>
                </>
              )}
            </Disclosure>
          ))}
        </div>
      </Container>
    </section>
  );
}


--- rental-mvp-micro/services/frontend/src/components/Home/Stats.tsx ---
import { useEffect, useRef, useState } from 'react';
import Container from '../shared/Container';

const DATA = [
  { label: 'Ítems publicados', value: 3124 },
  { label: 'Usuarios registrados', value: 857 },
  { label: '€ ahorrados', value: 24367 }
];

export default function Stats() {
  /* animate on scroll into view */
  const ref = useRef<HTMLDivElement>(null);
  const [visible, setVisible] = useState(false);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const io = new IntersectionObserver(
      ([e]) => e.isIntersecting && setVisible(true),
      { threshold: 0.4 }
    );
    io.observe(el);
    return () => io.disconnect();
  }, []);

  return (
    <section ref={ref} className="bg-white py-12">
      <Container>
        <div className="grid gap-8 sm:grid-cols-3">
          {DATA.map(({ label, value }) => (
            <div key={label} className="text-center">
              <p className="text-4xl font-extrabold text-brand">
                {visible ? value.toLocaleString() : '0'}
              </p>
              <p className="mt-2 text-sm font-medium text-gray-600">{label}</p>
            </div>
          ))}
        </div>
      </Container>
    </section>
  );
}


--- rental-mvp-micro/services/frontend/src/components/Home/LogoCloud.tsx ---
import Container from '../shared/Container';

const LOGOS = [
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Bosch',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Makita',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Black+%26+Decker',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Dewalt',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=GoPro',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Xiaomi'
];

export default function LogoCloud() {
  return (
    <SectionWrapper>
      <Container>
        <div className="grid grid-cols-2 items-center gap-8 opacity-70 sm:grid-cols-3 lg:grid-cols-6">
          {LOGOS.map(src => (
            <img
              key={src}
              src={src}
              alt=""
              className="mx-auto h-12 w-auto object-contain grayscale"
              loading="lazy"
            />
          ))}
        </div>
      </Container>
    </SectionWrapper>
  );
}

function SectionWrapper({ children }: { children: React.ReactNode }) {
  return <section className="bg-gray-50 py-12">{children}</section>;
}


--- rental-mvp-micro/services/frontend/src/components/Home/Testimonials.tsx ---
import Container from '../shared/Container';

const TESTIMONIALS = [
  {
    name: 'Laura P.',
    text: 'Alquilé mi cámara reflex y pagué las vacaciones. ¡Súper fácil!',
    avatar: 'https://source.unsplash.com/48x48/?woman,face'
  },
  {
    name: 'Carlos G.',
    text: 'Encontré un taladro a 5 € y no tuve que comprar uno nuevo.',
    avatar: 'https://source.unsplash.com/48x48/?man,face'
  },
  {
    name: 'Marta S.',
    text: 'Me encanta la seguridad del pago con fianza. Repetiré.',
    avatar: 'https://source.unsplash.com/48x48/?lady,face'
  }
];

export default function Testimonials() {
  return (
    <SectionWrapper>
      <Container>
        <h2 className="mb-10 text-center text-3xl font-bold">Historias reales</h2>

        {/* slider */}
        <div className="flex snap-x gap-6 overflow-x-auto pb-4 sm:justify-center">
          {TESTIMONIALS.map(t => (
            <article
              key={t.name}
              className="snap-center shrink-0 rounded-xl bg-white p-6 shadow-card sm:w-80"
            >
              <div className="flex items-center gap-3">
                <img
                  src={t.avatar}
                  alt=""
                  className="h-10 w-10 rounded-full object-cover"
                  loading="lazy"
                />
                <p className="font-semibold">{t.name}</p>
              </div>
              <p className="mt-4 text-sm text-gray-600">“{t.text}”</p>
            </article>
          ))}
        </div>
      </Container>
    </SectionWrapper>
  );
}

function SectionWrapper({ children }: { children: React.ReactNode }) {
  return <section className="bg-white py-16">{children}</section>;
}


--- rental-mvp-micro/services/frontend/src/components/filters/FiltersSidebar.tsx ---
import { Disclosure } from '@headlessui/react';
import useCategories, { Category } from '../../features/categories/useCategories';

type Filters = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

type Props = {
  value: Filters;
  onChange: (f: Filters) => void;
  onReset: () => void;
};

export default function FiltersSidebar({ value, onChange, onReset }: Props) {
  const { data: cats } = useCategories();

  const toggleCat = (id: number) => {
    const list = new Set(value.categories ?? []);
    list.has(id) ? list.delete(id) : list.add(id);
    onChange({ ...value, categories: [...list] });
  };

  return (
    <div className="space-y-6 w-full md:w-60 lg:w-72">
      {/* Search */}
      <input
        placeholder="Buscar…"
        className="form-input w-full"
        value={value.name ?? ''}
        onChange={e => onChange({ ...value, name: e.target.value || undefined })}
      />

      {/* Price */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Precio {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 space-y-2">
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="mín"
                className="form-input w-full"
                value={value.min_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    min_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="máx"
                className="form-input w-full"
                value={value.max_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    max_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Categories */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Categorías {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 flex flex-wrap gap-2">
              {cats.map((c: Category) => {
                const active = value.categories?.includes(c.id);
                return (
                  <button
                    key={c.id}
                    onClick={() => toggleCat(c.id)}
                    className={
                      active
                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'
                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                    }
                  >
                    {c.name}
                  </button>
                );
              })}
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Order */}
      <select
        className="form-select w-full"
        value={value.order ?? ''}
        onChange={e =>
          onChange({
            ...value,
            order: e.target.value ? (e.target.value as Filters['order']) : undefined
          })
        }
      >
        <option value="">Ordenar por…</option>
        <option value="price_asc">Precio ↑</option>
        <option value="price_desc">Precio ↓</option>
        <option value="name">Nombre</option>
      </select>

      <button onClick={onReset} className="btn--ghost w-full">
        Limpiar filtros
      </button>
    </div>
  );
}


--- rental-mvp-micro/services/rentals/requirements.txt ---
fastapi==0.116.0
uvicorn==0.35.0

pydantic==2.11.7
pydantic-core==2.33.2
pydantic-settings==2.10.1

SQLAlchemy==2.0.41
psycopg2-binary==2.9.9          # ← Postgres

python-jose[cryptography]==3.5.0
python-dotenv==1.1.1

httpx==0.27.0                   # 🔥 llamadas al micro-servicio Catálogo

alembic==1.16.4
email-validator==2.1.1

# rendimiento opc.
uvloop==0.21.0
httptools==0.6.4


--- rental-mvp-micro/services/rentals/.env ---
# DB propia del micro-servicio
DATABASE_URL=postgresql+psycopg2://rentals_user:rentals_pass@rentals-db:5432/rentals

# usamos la misma clave/algoritmo que los otros servicios para validar JWT
SECRET_KEY=SuperClaveUltraSecreta
ALGORITHM=HS256

# URL interna para hablar con Catalog
CATALOG_API_BASE=http://catalog:8000/api


--- rental-mvp-micro/services/rentals/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends build-essential libpq-dev libffi-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# código + alembic + configuración
COPY app/          ./app
COPY alembic.ini   .
COPY migrations/   ./migrations
COPY .env          .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- rental-mvp-micro/services/rentals/alembic.ini ---
[alembic]
script_location = migrations
prepend_sys_path = .
sqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
version_path_separator = os


# ────────────── Logging ──────────────
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level    = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level     = WARN
handlers  =
qualname  = sqlalchemy.engine

[logger_alembic]
level     = INFO
handlers  =
qualname  = alembic

[handler_console]
class     = StreamHandler
args      = (sys.stderr,)
level     = NOTSET
formatter = generic

[formatter_generic]
format   = %(levelname)-5.5s [%(name)s] %(message)s
datefmt  = %H:%M:%S


--- rental-mvp-micro/services/rentals/test_rentals.sh ---
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

AUTH=http://localhost:8001/api/auth
CAT=http://localhost:8002/api
REN=http://localhost:8003/api/rentals

USER=alice
MAIL=alice@example.com
PASS=secret

j() { jq -C .; }          # pretty-json coloreado
auth() { curl -s "$@" "${HDR[@]}"; }

echo "──── 1) signup ────"
curl -s -X POST $AUTH/signup \
     -H 'Content-Type: application/json' \
     -d "{\"username\":\"$USER\",\"email\":\"$MAIL\",\"password\":\"$PASS\"}" \
  | j || echo "(ya existe)"

echo "──── 2) login ─────"
TOKEN=$(curl -s -X POST $AUTH/token \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d "username=$USER&password=$PASS" | jq -r .access_token)
HDR=(-H "Authorization: Bearer $TOKEN")
echo "JWT: $TOKEN"

echo "──── 3) category & item (en catalog) ─────"
CID=$(curl -s $CAT/categories/ | jq '.[] | select(.name=="Herramientas") | .id')
if [[ -z $CID ]]; then
  CID=$(auth -X POST $CAT/categories/ -H 'Content-Type: application/json' \
        -d '{"name":"Herramientas"}' | jq -r .id)
fi
ITEM=$(auth -X POST $CAT/items/ -H 'Content-Type: application/json' -d @- <<EOF
{
  "name":"Taladro Bosch",
  "description":"800 W",
  "price_per_h":4.5,
  "categories":[$CID],
  "image_urls":["https://picsum.photos/seed/taladro/800/600"]
}
EOF
)
IID=$(echo "$ITEM" | jq -r .id)
echo "item_id = $IID"

echo "──── 4) crear alquiler ─────"
RENT=$(auth -X POST $REN/ -H 'Content-Type: application/json' -d @- <<EOF
{
  "item_id": $IID,
  "start_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "end_at":   "$(date -u -d '+2 hour' +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF
) && echo "$RENT" | j
RID=$(echo "$RENT" | jq -r .id)

echo "──── 5) mis alquileres ─────"
auth $REN/me | j

echo "──── 6) devolución ─────"
auth -X POST $REN/$RID/return | j


--- rental-mvp-micro/services/rentals/migrations/script.py.mako ---


--- rental-mvp-micro/services/rentals/migrations/README ---


--- rental-mvp-micro/services/rentals/migrations/env.py ---
"""Alembic env – Rentals"""
from __future__ import annotations

from logging.config import fileConfig
from alembic import context
from sqlalchemy import engine_from_config, pool

config = context.config
fileConfig(config.config_file_name)

from app.models.models import Base                # noqa: E402
target_metadata = Base.metadata
target_metadata.naming_convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

from app.core.config import settings             # noqa: E402
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)


def run_offline() -> None:
    context.configure(
        url=settings.DATABASE_URL,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as conn:
        context.configure(
            connection=conn,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_offline()
else:
    run_online()


--- rental-mvp-micro/services/rentals/migrations/versions/20250714_0001_initial.py ---
"""Inicial – tabla rentals

Revision ID: 20250714_0001
Revises:
Create Date: 2025-07-14 00:15:00
"""
from alembic import op
import sqlalchemy as sa

# ─────────── Meta ───────────
revision: str = "20250714_0001"
down_revision: str | None = None
branch_labels: tuple | None = None
depends_on: tuple | None = None


# ─────────── Upgrade ────────
def upgrade() -> None:
    op.create_table(
        "rentals",
        sa.Column("id", sa.Integer(), primary_key=True),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("renter_username", sa.String(), nullable=False),
        sa.Column("start_at", sa.DateTime(), nullable=False),
        sa.Column("end_at", sa.DateTime(), nullable=False),
        sa.Column("deposit", sa.Float(), nullable=False),
        sa.Column("returned", sa.Boolean(), server_default=sa.false(), nullable=False),
    )
    op.create_index("ix_rentals_item_id", "rentals", ["item_id"])
    op.create_index("ix_rentals_renter_username", "rentals", ["renter_username"])


# ─────────── Downgrade ──────
def downgrade() -> None:
    op.drop_index("ix_rentals_renter_username", table_name="rentals")
    op.drop_index("ix_rentals_item_id", table_name="rentals")
    op.drop_table("rentals")


--- rental-mvp-micro/services/rentals/migrations/versions/.gitkeep ---


--- rental-mvp-micro/services/rentals/app/main.py ---
# services/rentals/app/main.py
from fastapi import FastAPI

from app.api import rentals
from app.models.database import Base, engine
import app.models.models                         #  noqa: F401

app = FastAPI(
    title="rental-mvp – Rentals Service",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

@app.on_event("startup")
def _init_db() -> None:
    Base.metadata.create_all(bind=engine)

app.include_router(rentals.router, prefix="/api/rentals", tags=["rentals"])


--- rental-mvp-micro/services/rentals/app/__init__.py ---


--- rental-mvp-micro/services/rentals/app/deps.py ---
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from sqlalchemy.orm import Session

from app.models.database import SessionLocal
from app.core.config import settings

# ───────── DB
def get_db() -> Session:
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# ───────── JWT – solo extraemos el username
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="dummy")


def get_current_username(token: str = Depends(oauth2_scheme)) -> str:
    cred_exc = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciales no válidas",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        sub: str | None = payload.get("sub")
        if not sub:
            raise cred_exc
        return sub
    except JWTError:
        raise cred_exc


--- rental-mvp-micro/services/rentals/app/models/models.py ---
import enum
from sqlalchemy import Boolean, Column, DateTime, Float, Integer, String, Enum
# …

class RentalStatus(str, enum.Enum):
    pending   = "pending"     # reserva creada, a la espera de pagar la fianza
    confirmed = "confirmed"   # fianza retenida correctamente (tu “pagado”)
    returned  = "returned"    # ítem devuelto, cargo capturado

class Rental(Base):
    __tablename__ = "rentals"

    id              = Column(Integer, primary_key=True)
    item_id         = Column(Integer, nullable=False, index=True)
    renter_username = Column(String,  nullable=False, index=True)
    start_at        = Column(DateTime, default=datetime.datetime.utcnow)
    end_at          = Column(DateTime)
    deposit         = Column(Float, nullable=False)

    # --- nuevo ---
    status          = Column(
        Enum(RentalStatus, name="rental_status"),
        default=RentalStatus.pending,
        nullable=False,
    )


--- rental-mvp-micro/services/rentals/app/models/__init__.py ---


--- rental-mvp-micro/services/rentals/app/models/database.py ---
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

engine = create_engine(settings.DATABASE_URL, echo=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


--- rental-mvp-micro/services/rentals/app/schemas/rental.py ---
from __future__ import annotations

from datetime import datetime
from pydantic import BaseModel, field_validator, PositiveFloat
from typing import Literal

class RentalCreate(BaseModel):
    item_id: int
    start_at: datetime
    end_at: datetime

    @field_validator("end_at")
    @classmethod
    def end_must_be_after_start(cls, v: datetime, info):
        start = info.data["start_at"]
        if v <= start:
            raise ValueError("end_at debe ser posterior a start_at")
        return v


# 🛈 “ItemSnapshot” es la versión mínima que necesita el front
class ItemSnapshot(BaseModel):
    id: int
    name: str
    price_per_h: PositiveFloat
    image_url: str | None = None
    image_urls: list[str] | None = None
    available: bool | None = None


class RentalOut(RentalCreate):
    id: int
    deposit: float
    status: Literal["pending", "confirmed", "returned"]
    renter_username: str
    item: ItemSnapshot


--- rental-mvp-micro/services/rentals/app/schemas/__init__.py ---
from .rental import RentalCreate, RentalOut
__all__ = ["RentalCreate", "RentalOut"]


--- rental-mvp-micro/services/rentals/app/crud/rental.py ---
from __future__ import annotations

import math
from decimal import Decimal, ROUND_HALF_UP
from typing import List

import httpx
from sqlalchemy.orm import Session

from app.models.models import Rental
from app.schemas.rental import RentalCreate
from app.core.config import settings


# ───────── helpers internos ───────────────────────────────────────────────
async def _fetch_item(item_id: int) -> dict:
    """
    Llama al micro-servicio **Catalog** para obtener el item
    (levanta HTTPError si no existe / 404).
    """
    url = f"{settings.CATALOG_API_BASE}/items/{item_id}"
    async with httpx.AsyncClient() as client:
        r = await client.get(url, timeout=5.0)
        r.raise_for_status()
        return r.json()


def _calc_deposit(hours: float, price: float) -> float:
    """
    Depósito = 120 % del coste estimado (redondeado a 2 decimales).
    """
    raw = Decimal(hours * price * 1.2)
    return float(raw.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP))


# ───────── CRUD público ───────────────────────────────────────────────────
async def create_rental(
    db: Session,
    renter_username: str,
    rent_in: RentalCreate,
) -> Rental:
    item = await _fetch_item(rent_in.item_id)            # -- HTTP → Catalog

    if not item["available"]:
        raise ValueError("Item no disponible")

    hours = (rent_in.end_at - rent_in.start_at).total_seconds() / 3600
    deposit = _calc_deposit(hours, item["price_per_h"])

    db_rental = Rental(
        renter_username=renter_username,
        deposit=deposit,
        returned=False,
        **rent_in.model_dump(),
    )
    db.add(db_rental)
    db.commit()
    db.refresh(db_rental)
    return db_rental


def get_rental(db: Session, rental_id: int) -> Rental | None:
    return db.query(Rental).filter(Rental.id == rental_id).first()


def get_rentals_by_user(db: Session, username: str) -> List[Rental]:
    return db.query(Rental).filter(Rental.renter_username == username).all()


def mark_returned(db: Session, rental: Rental) -> Rental:
    rental.returned = True
    db.commit()
    db.refresh(rental)
    return rental


--- rental-mvp-micro/services/rentals/app/crud/__init__.py ---
from .rental import (
    create_rental,
    get_rental,
    get_rentals_by_user,
    mark_returned,
)
__all__ = [
    "create_rental",
    "get_rental",
    "get_rentals_by_user",
    "mark_returned",
]


--- rental-mvp-micro/services/rentals/app/core/__init__.py ---


--- rental-mvp-micro/services/rentals/app/core/config.py ---
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    CATALOG_API_BASE: str           # p. ej. http://catalog:8000/api
    ALGORITHM: str = "HS256"

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")


settings = Settings()


--- rental-mvp-micro/services/rentals/app/core/security.py ---


--- rental-mvp-micro/services/rentals/app/api/rentals.py ---
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_username

router = APIRouter()


# ────────────── crear alquiler ────────────────────────────────────────────
@router.post(
    "/",
    response_model=schemas.RentalOut,
    status_code=status.HTTP_201_CREATED,
)
async def rent_item(
    rent_in: schemas.RentalCreate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    try:
        rental = await crud.create_rental(db, username, rent_in)
    except ValueError as exc:
        raise HTTPException(400, str(exc))
    return await _with_item(rental)


# ────────────── lista del usuario ─────────────────────────────────────────
@router.get("/me", response_model=List[schemas.RentalOut])
async def my_rentals(
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    rentals = crud.get_rentals_by_user(db, username)
    return [await _with_item(r) for r in rentals]


# ────────────── devolución ────────────────────────────────────────────────
@router.post("/{rental_id}/return", response_model=schemas.RentalOut)
async def return_item(
    rental_id: int,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    rental = crud.get_rental(db, rental_id)
    if not rental or rental.renter_username != username:
        raise HTTPException(404, "Alquiler no encontrado")
    rental = crud.mark_returned(db, rental)
    return await _with_item(rental)


# ────────────── helper común ──────────────────────────────────────────────
import httpx
from app.core.config import settings
from app.schemas.rental import ItemSnapshot


async def _with_item(rental) -> schemas.RentalOut:
    """
    Añade el snapshot del item a la salida para que el front no
    necesite hacer otra llamada.
    """
    url = f"{settings.CATALOG_API_BASE}/items/{rental.item_id}"
    async with httpx.AsyncClient() as client:
        item_json = {}
        try:
            r = await client.get(url, timeout=5.0)
            if r.status_code == 200:
                item_json = r.json()
        except httpx.HTTPError:
            pass

    return schemas.RentalOut(
        **rental.__dict__,
        item=ItemSnapshot(**item_json) if item_json else ItemSnapshot(
            id=rental.item_id,
            name="Desconocido",
            price_per_h=0,
        ),
    )


--- rental-mvp-micro/services/rentals/app/api/__init__.py ---


--- rental-mvp-micro/services/upload/requirements.txt ---
fastapi==0.116.0
uvicorn==0.35.0
python-multipart==0.0.6
python-jose[cryptography]==3.5.0
pydantic-settings==2.10.1


--- rental-mvp-micro/services/upload/.env ---
SECRET_KEY=SuperClaveUltraSecreta
ALGORITHM=HS256

--- rental-mvp-micro/services/upload/test_upload.sh ---
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ───────── Endpoints ────────────────────────────────────────────────────
AUTH=http://localhost:8001/api/auth
UPLD=http://localhost:8004/api/upload

USER=alice
MAIL=alice@example.com
PASS=secret

# ───────── Imagen a subir ───────────────────────────────────────────────
# 1º argumento o, si no, intenta localizar una cualquiera en el repo
if [[ $# -ge 1 ]]; then
  IMG_PATH=$1
else
  # busca la primera .png|.jpg dentro de backend/uploads/ (dummy data del monolito)
  IMG_PATH=$(find ../../backend/uploads -type f -regex '.*\.\(png\|jpe?g\)$' | head -n 1 || true)
  [[ -z $IMG_PATH ]] && { echo "❌ No se encontró ninguna imagen de ejemplo. Pasa la ruta como argumento."; exit 1; }
fi
echo "Usando imagen: $IMG_PATH"

j() { jq -C .; }                      # pretty-json helper
auth() { curl -s "$@" "${HDR[@]}"; }  # wrapper con token

# ───── 1) signup (ignora error si existe) ───────────────────────────────
echo "──── 1) signup ────"
curl -s -X POST $AUTH/signup \
     -H 'Content-Type: application/json' \
     -d "{\"username\":\"$USER\",\"email\":\"$MAIL\",\"password\":\"$PASS\"}" \
  | j || echo "(ya existe)"

# ───── 2) login ────────────────────────────────────────────────────────
echo "──── 2) login ─────"
TOKEN=$(curl -s -X POST $AUTH/token \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d "username=$USER&password=$PASS" | jq -r .access_token)
HDR=(-H "Authorization: Bearer $TOKEN")
echo "JWT: $TOKEN"

# ───── 3) upload ───────────────────────────────────────────────────────
echo "──── 3) subir imagen ─────"
RESP=$(curl -s "${HDR[@]}" -F "file=@${IMG_PATH}" "$UPLD/")
echo "$RESP" | j
URL=$(echo "$RESP" | jq -r .url)

# ───── 4) HEAD de la URL pública ───────────────────────────────────────
echo "──── 4) HEAD $URL ─────"
curl -I "$URL" | sed 's/^/   /'
echo -e "\n✔️  Debe ser 200 OK y content-type image/*"


--- rental-mvp-micro/services/upload/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends build-essential libffi-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# código
COPY app/          ./app
COPY .env          .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- rental-mvp-micro/services/upload/app/main.py ---
from fastapi import FastAPI
from app.api import router as api_router
from app.api.upload import mount_static     # reutilizamos la helper

app = FastAPI(title="Upload-Service")

# Rutas de API (quedarán bajo /api)
app.include_router(api_router, prefix="/api")

# Ficheros estáticos (imágenes subidas)
mount_static(app)


--- rental-mvp-micro/services/upload/app/__init__.py ---


--- rental-mvp-micro/services/upload/app/deps.py ---
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError

from app.core.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="dummy")   # solo validamos

def get_current_username(token: str = Depends(oauth2_scheme)) -> str:
    cred_exc = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciales no válidas",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        sub: str | None = payload.get("sub")
        if not sub:
            raise cred_exc
        return sub
    except JWTError:
        raise cred_exc


--- rental-mvp-micro/services/upload/app/core/__init__.py ---


--- rental-mvp-micro/services/upload/app/core/config.py ---
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    SECRET_KEY: str
    ALGORITHM: str = "HS256"

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")

settings = Settings()


--- rental-mvp-micro/services/upload/app/api/__init__.py ---
from fastapi import APIRouter
from .upload import router as upload_router

router = APIRouter()
router.include_router(upload_router)          # ⇒ /api/upload/…


--- rental-mvp-micro/services/upload/app/api/upload.py ---
# services/upload/app/api/upload.py
"""
Endpoint privado para subir imágenes y exponerlas luego en /uploads/…
Devuelve **SIEMPRE** la ruta relativa “/uploads/<uuid>.<ext>” para que el
frontend la combine con su propio dominio (evitamos el host interno “upload”).
"""
from __future__ import annotations

import os
import shutil
import uuid
from pathlib import Path
from typing import Annotated

from fastapi import (
    APIRouter,
    Depends,
    File,
    HTTPException,
    Request,
    UploadFile,
    status,
)
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from fastapi.staticfiles import StaticFiles
from jose import JWTError, jwt

# ────────────────────────────────────────────────────────────────────────────
# Configuración global
# ────────────────────────────────────────────────────────────────────────────
BASE_DIR = Path(__file__).resolve().parent.parent
UPLOAD_DIR = BASE_DIR / "uploads"
UPLOAD_DIR.mkdir(exist_ok=True)

# La clave/algoritmo deben ser los mismos que usa el auth-service
JWT_SECRET = os.getenv("SECRET_KEY", "SuperClaveUltraSecreta")
JWT_ALGORITHM = os.getenv("ALGORITHM", "HS256")

# ────────────────────────────────────────────────────────────────────────────
# Seguridad (Bearer JWT)
# ────────────────────────────────────────────────────────────────────────────
security = HTTPBearer()


def get_current_username(
    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]
) -> str:
    token = credentials.credentials
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        username: str | None = payload.get("sub")
        if not username:
            raise ValueError
        return username
    except (JWTError, ValueError):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token JWT inválido",
        )


# ────────────────────────────────────────────────────────────────────────────
# Router
# ────────────────────────────────────────────────────────────────────────────
router = APIRouter(prefix="/upload", tags=["upload"])


@router.post("/", status_code=status.HTTP_201_CREATED)
async def upload_image(
    request: Request,
    file: UploadFile = File(...),
    _user: str = Depends(get_current_username),  # protegido con JWT
):
    # 1) validar tipo mime
    if not file.content_type.startswith("image/"):
        raise HTTPException(400, "Solo se permiten imágenes")

    # 2) generar nombre único y guardar
    ext = Path(file.filename).suffix
    filename = f"{uuid.uuid4()}{ext}"
    filepath = UPLOAD_DIR / filename
    try:
        with filepath.open("wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    finally:
        file.file.close()

    # 3) ruta pública **relativa**
    return {"filename": filename, "url": f"/uploads/{filename}"}


# ────────────────────────────────────────────────────────────────────────────
# Montaje estático (/uploads)  →  se llama desde app.main
# ────────────────────────────────────────────────────────────────────────────
def mount_static(app):
    app.mount("/uploads", StaticFiles(directory=UPLOAD_DIR), name="uploads")


--- rental-mvp-micro/services/payments/requirements.txt ---
fastapi==0.116.0
uvicorn==0.35.0
stripe==9.5.0               # SDK oficial
python-multipart==0.0.6
pydantic-settings==2.10.1


--- rental-mvp-micro/services/payments/.env ---
# payments/.env  (test mode)
STRIPE_SECRET_KEY=sk_test_51RkNe1BAdmER2zaJGyKPFTWV3a3mJ5MtgUhLsyoH4NIYDRDGm8thv6dnOYyUNIqgngTMSk34IY6QkfhTu6wY8Hv300yTE5xy67
STRIPE_PUBLISHABLE_KEY=pk_test_51RkNe1BAdmER2zaJNEdcxq6T7uBwtyGDiHaFRF5I9LjGGbbYxmvPfdffr4HLqZy753gB6ixJRFfu7HXRsntuCGyH00szhzRTcx
STRIPE_WEBHOOK_SECRET=whsec_d42657ee524a1103317e68c4b982a8706ba436ffc37124d5ea797eb08535b52e

FRONTEND_URL=http://localhost
ALLOWED_ORIGINS=http://localhost:5173,http://localhost


--- rental-mvp-micro/services/payments/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends build-essential libffi-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app          

# dependencias
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# ----------  ¡aquí estaba el problema!  ----------
# copia el *directorio*  app/  ⇒  /app/app/   ✅
COPY app/ ./app
# -----------------------------------------------

COPY .env .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- rental-mvp-micro/services/payments/alembic.ini ---
[alembic]
script_location = %(here)s/migrations
sqlalchemy.url = %(DATABASE_URL)s
prepend_sys_path = .

[loggers]
keys = root,alembic,sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console

[logger_alembic]
level = INFO
handlers = console
qualname = alembic

[logger_sqlalchemy]
level = WARNING
handlers = console
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-7s %(name)s: %(message)s


--- rental-mvp-micro/services/payments/migrations/script.py.mako ---


--- rental-mvp-micro/services/payments/migrations/env.py ---


--- rental-mvp-micro/services/payments/app/main.py ---
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.core.config import settings
from app.api import router as api_router

app = FastAPI(title="Payments-Service")

# CORS (frontend local)
origins = (settings.ALLOWED_ORIGINS or "").split(",")
if origins:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,
        allow_methods=["POST"],
        allow_headers=["*"],
    )

app.include_router(api_router, prefix="/api")


--- rental-mvp-micro/services/payments/app/__init__.py ---


--- rental-mvp-micro/services/payments/app/deps.py ---
import stripe
from fastapi import Header, HTTPException

from app.core.config import settings

stripe.api_key = settings.secret_key


def get_stripe():
    """Devuelve el cliente Stripe configurado (inyección de dependencias)."""
    return stripe


def verify_webhook(
    stripe_signature: str | None = Header(None, alias="Stripe-Signature"),
    payload: bytes | None = None,
):
    """
    Verifica la firma del webhook usando la secret generada con
    `stripe listen`.  Lanza 400 si la firma es inválida.
    """
    if payload is None:
        raise HTTPException(status_code=400, detail="body empty")

    try:
        event = stripe.Webhook.construct_event(
            payload=payload,
            sig_header=stripe_signature,
            secret=settings.STRIPE_WEBHOOK_SECRET,
        )
        return event
    except stripe.error.SignatureVerificationError:
        raise HTTPException(status_code=400, detail="invalid signature")


--- rental-mvp-micro/services/payments/app/models/payment.py ---
from sqlalchemy import Column, Integer, Float, String, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
from app.models.database import Base

class Payment(Base):
    __tablename__ = "payments"

    id = Column(Integer, primary_key=True)
    rental_id = Column(Integer, nullable=False)            # id proveniente del microservicio rentals
    user_id   = Column(Integer, nullable=False)            # quién paga (renter)
    owner_id  = Column(Integer, nullable=False)            # propietario del ítem (cobra)
    amount    = Column(Float, nullable=False)              # € totales
    currency  = Column(String(3), default="eur")
    stripe_pi = Column(String, nullable=False, unique=True)  # PaymentIntent id
    refunded  = Column(Boolean, default=False)
    captured  = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)


--- rental-mvp-micro/services/payments/app/models/__init__.py ---
from .payment import Payment  # noqa: F401


--- rental-mvp-micro/services/payments/app/models/database.py ---
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from app.core.config import settings

engine = create_engine(settings.DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)
Base = declarative_base()


--- rental-mvp-micro/services/payments/app/schemas/payment.py ---
# services/payments/app/schemas/payment.py
from datetime import datetime
from pydantic import BaseModel, PositiveFloat, ConfigDict


class PaymentCreate(BaseModel):
    rental_id: int
    owner_id: int            # propietario (Stripe Connect)
    amount: PositiveFloat
    currency: str = "eur"


class PaymentOut(BaseModel):
    id: int
    rental_id: int
    amount: float
    currency: str
    captured: bool
    refunded: bool
    stripe_pi: str
    created_at: datetime

    # Pydantic v2
    model_config = ConfigDict(from_attributes=True)


--- rental-mvp-micro/services/payments/app/schemas/__init__.py ---
from .payment import PaymentCreate, PaymentOut

__all__ = ["PaymentCreate", "PaymentOut"]


--- rental-mvp-micro/services/payments/app/crud/payment.py ---
from sqlalchemy.orm import Session
from app.models.payment import Payment
from app.schemas.payment import PaymentCreate

def create(db: Session, payment_in: PaymentCreate, stripe_pi: str) -> Payment:
    p = Payment(**payment_in.model_dump(), stripe_pi=stripe_pi)
    db.add(p)
    db.commit()
    db.refresh(p)
    return p

def get_by_pi(db: Session, stripe_pi: str) -> Payment | None:
    return db.query(Payment).filter(Payment.stripe_pi == stripe_pi).first()

def capture(db: Session, payment: Payment) -> Payment:
    payment.captured = True
    db.commit()
    db.refresh(payment)
    return payment

def refund(db: Session, payment: Payment) -> Payment:
    payment.refunded = True
    db.commit()
    db.refresh(payment)
    return payment


--- rental-mvp-micro/services/payments/app/crud/__init__.py ---
from .payment import create as create_payment, get_by_pi, capture, refund  # noqa: F401

__all__ = ["create_payment", "get_by_pi", "capture", "refund"]


--- rental-mvp-micro/services/payments/app/workers/settlement.py ---
"""
Ejemplo de *cron worker* (Celery, RQ, etc.) que captura pagos
una vez confirmado que el ítem se ha devuelto.
"""
from sqlalchemy.orm import Session
import stripe, time
from app.models.database import SessionLocal
from app import crud
from app.core.config import settings

def run_forever():
    while True:
        with SessionLocal() as db:          # type: Session
            pending = db.query(crud.get_by_pi.__annotations__["return"]).filter_by(
                captured=False, refunded=False
            )
            for p in pending:
                # Aquí llamarías al API del microservicio rentals para ver si returned = true
                # demo: asumimos que sí tras 2 h
                try:
                    stripe.PaymentIntent.capture(p.stripe_pi)
                    crud.capture(db, p)
                except Exception as e:  # noqa: BLE001
                    print("No se pudo capturar:", e)

        time.sleep(600)  # cada 10 min

if __name__ == "__main__":
    run_forever()


--- rental-mvp-micro/services/payments/app/workers/__init__.py ---


--- rental-mvp-micro/services/payments/app/core/__init__.py ---
import stripe
from app.core.config import settings

stripe.api_key = settings.secret_key


--- rental-mvp-micro/services/payments/app/core/config.py ---
from functools import cached_property
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    # ───── Stripe ──────────────────────────────────────────────────────────
    STRIPE_SECRET_KEY: str | None = None       # nombre habitual
    STRIPE_API_KEY:    str | None = None       # alias heredado
    STRIPE_PUBLISHABLE_KEY: str
    STRIPE_WEBHOOK_SECRET:  str

    # ───── Servicio ───────────────────────────────────────────────────────
    PLATFORM_FEE_PERCENT: int = 8              # comisión % de la plataforma
    DOMAIN: str = "http://localhost:8005"

    # ───── CORS ───────────────────────────────────────────────────────────
    ALLOWED_ORIGINS: str = ""                  # lista separada por comas

    # ───── BD (opcional) ─────────────────────────────────────────────────
    DATABASE_URL: str | None = None

    # lee .env y omite claves extra
    model_config = {"env_file": ".env", "extra": "ignore"}

    # ──────────────────────────────────────────────────────────────────────
    #  Acceso unificado a la clave secreta
    # ──────────────────────────────────────────────────────────────────────
    @cached_property
    def secret_key(self) -> str:
        """
        Devuelve la clave secreta de Stripe sin importar el nombre de la
        variable.  STRIPE_SECRET_KEY tiene prioridad sobre STRIPE_API_KEY.
        """
        key = self.STRIPE_SECRET_KEY or self.STRIPE_API_KEY
        if not key:
            raise RuntimeError(
                "Debes definir STRIPE_SECRET_KEY o STRIPE_API_KEY en el entorno"
            )
        return key


settings = Settings()


--- rental-mvp-micro/services/payments/app/core/stripe.py ---
"""
Pequeña capa de ayuda sobre el SDK oficial de Stripe.
"""
from decimal import Decimal, ROUND_HALF_UP
from typing import Literal

import stripe

from app.core.config import settings

stripe.api_key = settings.secret_key

Currency = Literal["eur", "usd"]


def _percentage(amount: int, pct: int) -> int:
    """
    Devuelve `pct` % de `amount` redondeado al céntimo.
    Ambos valores en céntimos (enteros).
    """
    return int(
        (Decimal(amount) * Decimal(pct) / Decimal(100)).quantize(
            Decimal("1"), rounding=ROUND_HALF_UP
        )
    )


def calc_app_fee(amount_cents: int) -> int:
    """Comisión de la plataforma en **céntimos**."""
    return _percentage(amount_cents, settings.PLATFORM_FEE_PERCENT)


def create_payment_intent(
    amount_cents: int,
    currency: Currency,
    customer_id: str | None,
    connected_account: str,
) -> stripe.PaymentIntent:
    """
    Crea un PaymentIntent *manual-capture* para un vendedor de Stripe Connect,
    reteniendo la comisión de la plataforma.
    """
    return stripe.PaymentIntent.create(
        amount=amount_cents,
        currency=currency,
        payment_method_types=["card"],
        customer=customer_id,
        capture_method="manual",
        application_fee_amount=calc_app_fee(amount_cents),
        on_behalf_of=connected_account,
        transfer_data={"destination": connected_account},
    )


--- rental-mvp-micro/services/payments/app/api/payments.py ---
"""
Endpoints
---------
• POST /api/payments/create-intent   -> Frontend
• POST /api/stripe/webhook           -> Stripe
"""
from typing import Literal

import stripe
from fastapi import APIRouter, Header, HTTPException, Request
from pydantic import BaseModel, PositiveFloat

from app.core.config import settings

stripe.api_key = settings.secret_key

router = APIRouter()

# ───── Schemas ────────────────────────────────────────────────────────────
class CreateIntentIn(BaseModel):
    amount: PositiveFloat             # € que cobra el propietario


class CreateIntentOut(BaseModel):
    client_secret: str


EUR_FACTOR: Literal[100] = 100        # euros → céntimos

# ───── Endpoints ──────────────────────────────────────────────────────────
@router.post("/create-intent", response_model=CreateIntentOut)
def create_payment_intent(data: CreateIntentIn):
    """Devuelve el *client_secret* para que el Front confirme el pago."""
    intent = stripe.PaymentIntent.create(
        amount=int(data.amount * EUR_FACTOR),
        currency="eur",
        automatic_payment_methods={"enabled": True},
    )
    return {"client_secret": intent.client_secret}


@router.post("/stripe/webhook", status_code=200)
async def stripe_webhook(
    request: Request,
    stripe_signature: str = Header(None, alias="Stripe-Signature"),
):
    """
    Recibe eventos de Stripe, verifica la firma y despacha los handlers
    necesarios.  Siempre respondemos 2xx para que Stripe marque correcta
    la entrega.
    """
    payload = await request.body()

    try:
        event = stripe.Webhook.construct_event(
            payload=payload,
            sig_header=stripe_signature,
            secret=settings.STRIPE_WEBHOOK_SECRET,
        )
    except stripe.error.SignatureVerificationError:
        raise HTTPException(status_code=400, detail="invalid signature")

    if event["type"] == "payment_intent.succeeded":
        _handle_success(event["data"]["object"])
    elif event["type"] == "payment_intent.payment_failed":
        _handle_failure(event["data"]["object"])

    return {"received": True}


# ───── Internal handlers ─────────────────────────────────────────────────
def _handle_success(pi: dict):
    # Aquí actualizarías tu BD, enviaría emails, etc.
    print("✅ PaymentIntent succeeded:", pi["id"])


def _handle_failure(pi: dict):
    print("❌ PaymentIntent failed:", pi["id"])


--- rental-mvp-micro/services/payments/app/api/webhooks.py ---
"""
Recibe eventos de Stripe (webhook) y sincroniza estado interno.
"""
import stripe
from fastapi import APIRouter, Header, HTTPException, Request, Depends, status
from sqlalchemy.orm import Session

from app.core.config import settings
from app import crud
from app.deps import get_db

router = APIRouter()

@router.post("/stripe")
async def stripe_webhook(
    request: Request,
    stripe_signature: str = Header(None, alias="Stripe-Signature"),
    db: Session = Depends(get_db),
):
    payload = await request.body()
    try:
        event = stripe.Webhook.construct_event(
            payload, stripe_signature, settings.STRIPE_WEBHOOK_SECRET
        )
    except stripe.error.SignatureVerificationError:
        raise HTTPException(status.HTTP_400_BAD_REQUEST, "Firma inválida")

    if event.type == "payment_intent.succeeded":
        pi = event.data.object
        p = crud.get_by_pi(db, pi["id"])
        if p and not p.captured:
            crud.capture(db, p)

    elif event.type == "charge.refunded":
        ch = event.data.object
        pi_id = ch["payment_intent"]
        p = crud.get_by_pi(db, pi_id)
        if p and not p.refunded:
            crud.refund(db, p)

    return {"received": True}


--- rental-mvp-micro/services/payments/app/api/__init__.py ---
from fastapi import APIRouter
from .payments import router as payments_router

router = APIRouter()
router.include_router(payments_router, prefix="/payments", tags=["payments"])

# NOTA: el webhook *no* lleva prefix /api, se monta tal cual en payments.py


--- rental-mvp-micro/services/catalog/requirements.txt ---

fastapi==0.116.0
uvicorn==0.35.0
pydantic==2.11.7
pydantic-core==2.33.2
pydantic-settings==2.10.1
SQLAlchemy==2.0.41
python-jose[cryptography]==3.5.0
python-multipart==0.0.6
python-dotenv==1.1.1
alembic==1.16.4
email-validator==2.1.1     # (pydantic extra)
uvloop==0.21.0
httptools==0.6.4
psycopg2-binary==2.9.9 

--- rental-mvp-micro/services/catalog/.env ---

DATABASE_URL=postgresql+psycopg2://catalog_user:catalog_pass@catalog-db:5432/catalog
SECRET_KEY=SuperClaveUltraSecreta


--- rental-mvp-micro/services/catalog/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends libffi-dev build-essential libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# código + alembic + env
COPY app/         ./app
COPY alembic.ini  .
COPY migrations/  ./migrations
COPY .env         .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- rental-mvp-micro/services/catalog/test_endpoints.sh ---
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

AUTH=http://localhost:8001/api/auth
CAT=http://localhost:8002/api
USERNAME=demo; EMAIL=demo@example.com; PASSWORD=demo

j() { jq -C .; }            # pretty-json coloreado
auth() { curl -s "$@" "${AUTHZ[@]}"; }

echo "────────── 1) SIGN-UP ──────────"
curl -s -X POST "$AUTH/signup" \
     -H 'Content-Type: application/json' \
     -d "{\"username\":\"$USERNAME\",\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" \
  | j || echo "(usuario ya existe)"

echo "────────── 2) LOGIN ────────────"
TOKEN=$(curl -s -X POST "$AUTH/token" \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d "username=$USERNAME&password=$PASSWORD" \
        | jq -r .access_token)
AUTHZ=(-H "Authorization: Bearer $TOKEN")
echo "JWT => $TOKEN"

echo "────────── 3) /me ──────────────"
# Detecta cuál de los dos paths expone el servicio
for ME in "$AUTH/me" "$AUTH/users/me"; do
  CODE=$(curl -s -o /dev/null -w '%{http_code}' "$ME" "${AUTHZ[@]}")
  [[ $CODE == 200 ]] && { curl -s "$ME" "${AUTHZ[@]}" | j; break; }
done

echo "────────── 4) CATEGORIES ───────"
declare -A CIDs
for NAME in "Herramientas" "Decoración"; do
  # ¿existe ya?
  CID=$(curl -s "$CAT/categories/" | jq ".[] | select(.name==\"$NAME\") | .id")
  if [[ -z $CID ]]; then
     CID=$(curl -s -X POST "$CAT/categories/" "${AUTHZ[@]}" \
                 -H 'Content-Type: application/json' \
                 -d "{\"name\":\"$NAME\"}" | jq -r .id)
  fi
  CIDs[$NAME]=$CID
  echo "• $NAME id=${CID}"
done

echo "────────── 5) ITEMS CRUD ───────"
DATA='{
  "name":"Taladro Bosch",
  "description":"800 W",
  "price_per_h":4.5,
  "image_urls":["https://picsum.photos/seed/taladro/800/600"]
}'
# Sólo enviamos categories si tenemos IDs válidos
[[ -n ${CIDs[Herramientas]} ]] && \
  DATA=$(jq --argjson cid ${CIDs[Herramientas]} '. + {categories:[$cid]}' <<<"$DATA")

ITEM=$(curl -s -X POST "$CAT/items/" "${AUTHZ[@]}" \
            -H 'Content-Type: application/json' \
            -d "$DATA")
echo "$ITEM" | j
IID=$(echo "$ITEM" | jq -r .id)

echo "── GET públicos /items?available=true"
curl -s "$CAT/items?available=true" | j

echo "── GET privados  /items/me"
auth "$CAT/items/me" | j

echo "── PATCH /items/$IID (añade Decoración, cambia precio)"
PATCH=$(jq --argjson cid ${CIDs[Decoración]} '{price_per_h:5.0,categories:[$cid]}' <<<"{}")
auth -X PATCH "$CAT/items/$IID" \
     -H 'Content-Type: application/json' \
     -d "$PATCH" | j

echo "── DELETE /items/$IID"
auth -X DELETE "$CAT/items/$IID" -w '\n(status %{http_code})\n'

echo "── /items/me debería estar vacío"
auth "$CAT/items/me" | j

echo "────────── 6) UPLOAD ───────────"
if [[ -f sample.jpg ]]; then
  auth -X POST "$CAT/upload/" -F "file=@sample.jpg" | j
else
  echo "(sin sample.jpg; omitiendo)"
fi

echo -e "\n✅  tests completados"


--- rental-mvp-micro/services/catalog/alembic.ini ---
[alembic]
script_location = migrations
prepend_sys_path = .
sqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}

version_path_separator = os


# ────────────── Logging ──────────────
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic


[logger_root]
level    = WARN
handlers = console


[logger_sqlalchemy]
level     = WARN
qualname  = sqlalchemy.engine
handlers  = console


[logger_alembic]
level     = INFO
qualname  = alembic
handlers  = console


[handler_console]
class     = StreamHandler
args      = (sys.stderr,)
formatter = generic


[formatter_generic]
format   = %(levelname)-5.5s [%(name)s] %(message)s
datefmt  = %H:%M:%S


--- rental-mvp-micro/services/catalog/migrations/script.py.mako ---

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}
"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}


--- rental-mvp-micro/services/catalog/migrations/README ---


--- rental-mvp-micro/services/catalog/migrations/env.py ---

"""Alembic environment for Catalog service."""
from __future__ import annotations

from logging.config import fileConfig
from alembic import context
from sqlalchemy import engine_from_config, pool

# ─── configuración ────────────────────────────────────────────────────────
config = context.config
fileConfig(config.config_file_name)

# Metadata
from app.models.models import Base                                   # noqa: E402
target_metadata = Base.metadata
target_metadata.naming_convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

# URL de la BD → .env
from app.core.config import settings                                # noqa: E402
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)


def run_migrations_offline() -> None:
    context.configure(
        url=config.get_main_option("sqlalchemy.url"),
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


--- rental-mvp-micro/services/catalog/migrations/versions/20250713_0001_initial.py ---
"""Initial schema

Revision ID: 20250713_0001
Revises: 
Create Date: 2025-07-13 10:15:00
"""
from alembic import op
import sqlalchemy as sa


# ────────────── Identificación ──────────────
revision: str = "20250713_0001"
down_revision: str | None = None
branch_labels: tuple | None = None
depends_on: tuple | None = None


# ────────────── Upgrade ──────────────
def upgrade() -> None:
    # categories
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), primary_key=True),
        sa.Column("name", sa.String(length=50), nullable=False, unique=True, index=True),
    )

    # items
    op.create_table(
        "items",
        sa.Column("id", sa.Integer(), primary_key=True, index=True),
        sa.Column("name", sa.String(length=80), nullable=False, index=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price_per_h", sa.Float(), nullable=False),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("owner_username", sa.String(), nullable=False, index=True),
        sa.Column("available", sa.Boolean(), server_default=sa.true(), nullable=False),
    )

    # item_images
    op.create_table(
        "item_images",
        sa.Column("id", sa.Integer(), primary_key=True),
        sa.Column("item_id", sa.Integer(), sa.ForeignKey("items.id", ondelete="CASCADE"), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
    )

    # asociación N:M items ↔ categories
    op.create_table(
        "item_categories",
        sa.Column("item_id", sa.Integer(), sa.ForeignKey("items.id", ondelete="CASCADE"), primary_key=True),
        sa.Column("category_id", sa.Integer(), sa.ForeignKey("categories.id", ondelete="CASCADE"), primary_key=True),
    )


# ────────────── Downgrade ──────────────
def downgrade() -> None:
    op.drop_table("item_categories")
    op.drop_table("item_images")
    op.drop_table("items")
    op.drop_table("categories")


--- rental-mvp-micro/services/catalog/app/main.py ---
# services/catalog/app/main.py
from fastapi import FastAPI

from app.api import categories, items
from app.models.database import Base, engine
import app.models.models                         #  noqa: F401

app = FastAPI(
    title="rental-mvp – Catalog Service",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

@app.on_event("startup")
def _init_db() -> None:
    Base.metadata.create_all(bind=engine)

app.include_router(categories.router, prefix="/api/categories", tags=["categories"])
app.include_router(items.router,      prefix="/api/items",      tags=["items"])


--- rental-mvp-micro/services/catalog/app/__init__.py ---


--- rental-mvp-micro/services/catalog/app/deps.py ---
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from sqlalchemy.orm import Session

from app.models.database import SessionLocal
from app.core.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="dummy")  # no lo usamos, solo valida header


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_current_username(token: str = Depends(oauth2_scheme)) -> str:
    """Devuelve `sub` del JWT emitido por Auth."""
    cred_exc = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciales no válidas",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str | None = payload.get("sub")
        if not username:
            raise cred_exc
        return username
    except JWTError:
        raise cred_exc

--- rental-mvp-micro/services/catalog/app/models/models.py ---
from __future__ import annotations

from typing import List
from sqlalchemy import (
    Boolean,
    Column,
    Float,
    ForeignKey,
    Integer,
    String,
    Table,
)
from sqlalchemy.orm import relationship

from .database import Base

# relación N:M items–categories
item_categories = Table(
    "item_categories",
    Base.metadata,
    Column("item_id", Integer, ForeignKey("items.id", ondelete="CASCADE"), primary_key=True),
    Column("category_id", Integer, ForeignKey("categories.id", ondelete="CASCADE"), primary_key=True),
)

class ItemImage(Base):
    __tablename__ = "item_images"

    id = Column(Integer, primary_key=True)
    item_id = Column(Integer, ForeignKey("items.id", ondelete="CASCADE"), nullable=False)
    url = Column(String, nullable=False)

    item = relationship("Item", back_populates="images")


class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, index=True, nullable=False)

    items = relationship("Item", secondary=item_categories, back_populates="categories")


class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True, nullable=False)
    description = Column(String)
    price_per_h = Column(Float, nullable=False)

    # destacado (legacy)
    image_url = Column(String)

    # ← vínculo al propietario (micro-servicio auth)
    owner_username = Column(String, index=True, nullable=False)

    available = Column(Boolean, default=True)

    # relaciones
    categories = relationship("Category", secondary=item_categories, back_populates="items")
    images = relationship(
        "ItemImage",
        back_populates="item",
        cascade="all, delete-orphan",
        order_by="ItemImage.id",
    )

    # helper
    @property
    def image_urls(self) -> List[str]:
        return [img.url for img in self.images]

--- rental-mvp-micro/services/catalog/app/models/__init__.py ---
# importa modelos para que Alembic los detecte
from .models import Category, Item, ItemImage  # noqa: F401

--- rental-mvp-micro/services/catalog/app/models/database.py ---
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

connect_args = {"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}
engine = create_engine(settings.DATABASE_URL, connect_args=connect_args, echo=True)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

--- rental-mvp-micro/services/catalog/app/schemas/category.py ---
from pydantic import BaseModel, Field


class CategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=50)


class CategoryCreate(CategoryBase):
    pass


class CategoryOut(CategoryBase):
    id: int

    class Config:
        from_attributes = True

--- rental-mvp-micro/services/catalog/app/schemas/__init__.py ---
from .category import CategoryCreate, CategoryOut
from .item import ItemCreate, ItemUpdate, ItemOut

__all__ = [
    "CategoryCreate",
    "CategoryOut",
    "ItemCreate",
    "ItemUpdate",
    "ItemOut",
]

--- rental-mvp-micro/services/catalog/app/schemas/item.py ---
# services/catalog/app/schemas/item.py
from __future__ import annotations

from typing import List, Optional

from pydantic import (
    BaseModel,
    Field,
    PositiveFloat,
    AfterValidator,      # 🆕 validador ligero en v2
)
from typing_extensions import Annotated   # Annotated en 3.12

from .category import CategoryOut


# ────────────────────────────────────────────────────────────────────
#  Tipo URL “relajado” → admite http(s)://…  o  rutas relativas “/…”
# ────────────────────────────────────────────────────────────────────
def _check_url(v: str) -> str:
    if v.startswith(("http://", "https://", "/")):
        return v
    raise ValueError("url debe ser http(s)://… o empezar por /uploads/…")


UrlStr = Annotated[str, AfterValidator(_check_url)]


# ─────────────────────────── SCHEMAS ────────────────────────────────
class ItemBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: PositiveFloat


class ItemCreate(ItemBase):
    image_urls: List[UrlStr] = Field(..., min_length=1, max_length=6)
    categories: Optional[List[int]] = Field(
        default=None, description="IDs de categorías asociadas"
    )


class ItemUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: Optional[PositiveFloat] = None
    image_urls: Optional[List[UrlStr]] = Field(None, min_length=1, max_length=6)
    categories: Optional[List[int]] = None

    model_config = {"extra": "forbid"}


class ItemOut(ItemBase):
    id: int
    available: bool
    owner_username: str
    categories: List[CategoryOut]
    image_urls: List[UrlStr]
    image_url: Optional[UrlStr] = None  # compat con versiones antiguas

    model_config = {"from_attributes": True}


--- rental-mvp-micro/services/catalog/app/crud/category.py ---
from typing import List, Optional

from sqlalchemy.orm import Session

from app.models.models import Category
from app.schemas.category import CategoryCreate


def get_category(db: Session, cat_id: int) -> Optional[Category]:
    return db.query(Category).filter(Category.id == cat_id).first()


def get_categories(db: Session) -> List[Category]:
    return db.query(Category).order_by(Category.name).all()


def create_category(db: Session, cat_in: CategoryCreate) -> Category:
    db_cat = Category(**cat_in.model_dump())
    db.add(db_cat)
    db.commit()
    db.refresh(db_cat)
    return db_cat

--- rental-mvp-micro/services/catalog/app/crud/__init__.py ---
from .category import get_category, get_categories, create_category           # noqa: F401
from .item import (                                                           # noqa: F401
    get_item,
    get_items,
    get_items_by_owner,
    create_item,
    update_item,
    delete_item,
)

__all__ = [
    "get_category",
    "get_categories",
    "create_category",
    "get_item",
    "get_items",
    "get_items_by_owner",
    "create_item",
    "update_item",
    "delete_item",
]

--- rental-mvp-micro/services/catalog/app/crud/item.py ---
from __future__ import annotations

from typing import List, Optional, Tuple

from sqlalchemy import asc, desc, or_
from sqlalchemy.orm import Session, joinedload

from app.models.models import Category, Item, ItemImage
from app.schemas.item import ItemCreate, ItemUpdate

# ───────── helpers internos ───────────────────────────────────────────────
def _get_categories_or_400(db: Session, ids: list[int]) -> list[Category]:
    cats = db.query(Category).filter(Category.id.in_(ids)).all()
    if len(cats) != len(ids):
        missing = set(ids) - {c.id for c in cats}
        raise ValueError(f"Categorías inexistentes: {', '.join(map(str, missing))}")
    return cats


def _apply_order(q, order_by: str | None, order_dir: str | None):
    mapping = {"price": Item.price_per_h, "name": Item.name, "id": Item.id}
    if not order_by:
        return q.order_by(Item.id)
    col = mapping.get(order_by, Item.id)
    return q.order_by(asc(col) if order_dir == "asc" else desc(col))


# ───────── lectura ────────────────────────────────────────────────────────
def get_item(db: Session, item_id: int) -> Optional[Item]:
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.id == item_id)
        .first()
    )


def _build_query(
    db: Session,
    *,
    name: Optional[str],
    min_price: Optional[float],
    max_price: Optional[float],
    available: Optional[bool],
    categories: Optional[List[int]],
    order_by: Optional[str],
    order_dir: Optional[str],
):
    q = db.query(Item).options(joinedload(Item.categories), joinedload(Item.images))

    if name:
        pattern = f"%{name}%"
        q = q.filter(or_(Item.name.ilike(pattern), Item.description.ilike(pattern)))
    if min_price is not None:
        q = q.filter(Item.price_per_h >= min_price)
    if max_price is not None:
        q = q.filter(Item.price_per_h <= max_price)
    if available is not None:
        q = q.filter(Item.available == available)
    if categories:
        q = q.filter(Item.categories.any(Category.id.in_(categories)))

    return _apply_order(q, order_by, order_dir)


def get_items(
    db: Session,
    skip: int,
    limit: int,
    *,
    name: Optional[str],
    min_price: Optional[float],
    max_price: Optional[float],
    available: Optional[bool],
    categories: Optional[List[int]],
    order_by: Optional[str],
    order_dir: Optional[str],
) -> Tuple[List[Item], int]:
    q = _build_query(
        db,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )
    total = q.count()
    items = q.offset(skip).limit(limit).all()
    return items, total


def get_items_by_owner(db: Session, owner: str) -> List[Item]:
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.owner_username == owner)
        .all()
    )


# ───────── escritura ──────────────────────────────────────────────────────
def create_item(db: Session, item_in: ItemCreate, owner_username: str) -> Item:
    main = str(item_in.image_urls[0])

    db_item = Item(
        name=item_in.name,
        description=item_in.description,
        price_per_h=item_in.price_per_h,
        image_url=main,
        owner_username=owner_username,
    )

    if item_in.categories:
        db_item.categories = _get_categories_or_400(db, item_in.categories)

    db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]

    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item


def update_item(db: Session, db_item: Item, item_in: ItemUpdate) -> Item:
    data = item_in.model_dump(exclude_unset=True, exclude={"categories", "image_urls"})
    for k, v in data.items():
        setattr(db_item, k, v)

    if item_in.categories is not None:
        db_item.categories = _get_categories_or_400(db, item_in.categories)

    if item_in.image_urls is not None:
        db_item.image_url = str(item_in.image_urls[0])
        db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]

    db.commit()
    db.refresh(db_item)
    return db_item


def delete_item(db: Session, db_item: Item) -> None:
    db.delete(db_item)
    db.commit()

--- rental-mvp-micro/services/catalog/app/core/__init__.py ---


--- rental-mvp-micro/services/catalog/app/core/config.py ---
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")


settings = Settings()

--- rental-mvp-micro/services/catalog/app/api/items.py ---
from typing import List, Optional
from urllib.parse import urlencode

from fastapi import (
    APIRouter,
    Depends,
    HTTPException,
    Query,
    Request,
    Response,
    status,
)
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_username

router = APIRouter()

# ───────── helpers paginación RFC-5988 ────────────────────────────────────
def _pagination_links(request: Request, skip: int, limit: int, total: int, **flt):
    links: list[str] = []
    base = request.url.remove_query_params("skip").remove_query_params("limit")

    def _url(new_skip: int):
        params = {k: v for k, v in flt.items() if v is not None}
        params.update({"skip": new_skip, "limit": limit})
        return f"<{base}?{urlencode(params, doseq=True)}>"

    if skip + limit < total:
        links.append(f'{_url(skip + limit)}; rel="next"')
    if skip > 0:
        links.append(f'{_url(max(skip - limit,0))}; rel="prev"')
    return ", ".join(links)


# ───────────── crear ─────────────────────────────────────────────────────
@router.post("/", response_model=schemas.ItemOut, status_code=status.HTTP_201_CREATED)
def create_item(
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    return crud.create_item(db, item_in, owner_username=username)


# ───────────── listar público ────────────────────────────────────────────
@router.get("/", response_model=List[schemas.ItemOut])
def list_items(
    request: Request,
    response: Response,
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    name: Optional[str] = None,
    min_price: Optional[float] = Query(None, ge=0),
    max_price: Optional[float] = Query(None, ge=0),
    available: Optional[bool] = None,
    categories: Optional[List[int]] = Query(None),
    order_by: Optional[str] = Query(None, pattern="^(price|name|id)$"),
    order_dir: Optional[str] = Query(None, pattern="^(asc|desc)$"),
    db: Session = Depends(get_db),
):
    items, total = crud.get_items(
        db,
        skip,
        limit,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )
    response.headers["X-Total-Count"] = str(total)
    if total:
        link = _pagination_links(
            request,
            skip,
            limit,
            total,
            name=name,
            min_price=min_price,
            max_price=max_price,
            available=available,
            categories=categories,
            order_by=order_by,
            order_dir=order_dir,
        )
        if link:
            response.headers["Link"] = link
    return items


# ───────────── mis ítems ────────────────────────────────────────────────
@router.get("/me", response_model=List[schemas.ItemOut])
def my_items(
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    return crud.get_items_by_owner(db, username)


# ───────────── actualizar ───────────────────────────────────────────────
@router.patch("/{item_id}", response_model=schemas.ItemOut)
def patch_item(
    item_id: int,
    item_in: schemas.ItemUpdate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    return crud.update_item(db, db_item, item_in)


@router.put("/{item_id}", response_model=schemas.ItemOut)
def put_item(
    item_id: int,
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    return crud.update_item(db, db_item, schemas.ItemUpdate(**item_in.model_dump()))

# ───────────── obtener 1 ítem ────────────────────────────────────────────
@router.get("/{item_id}", response_model=schemas.ItemOut)
def get_item(
    item_id: int,
    db: Session = Depends(get_db),
):
    """
    Devuelve un único ítem por *ID*.

    404 si no existe.
    """
    db_item = crud.get_item(db, item_id)
    if not db_item:
        raise HTTPException(404, "Item no encontrado")
    return db_item



# ───────────── eliminar ────────────────────────────────────────────────
@router.delete("/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_item(
    item_id: int,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    crud.delete_item(db, db_item)

--- rental-mvp-micro/services/catalog/app/api/categories.py ---
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_username

router = APIRouter()


@router.get("/", response_model=List[schemas.CategoryOut])
def list_categories(db: Session = Depends(get_db)):
    return crud.get_categories(db)


@router.post(
    "/", response_model=schemas.CategoryOut, status_code=status.HTTP_201_CREATED
)
def create_category(
    cat_in: schemas.CategoryCreate,
    db: Session = Depends(get_db),
    _user=Depends(get_current_username),        # solo autenticados
):
    return crud.create_category(db, cat_in)


@router.get("/{cat_id}", response_model=schemas.CategoryOut)
def get_category(cat_id: int, db: Session = Depends(get_db)):
    cat = crud.get_category(db, cat_id)
    if not cat:
        raise HTTPException(404, "Categoría no encontrada")
    return cat

--- rental-mvp-micro/services/catalog/app/api/__init__.py ---


--- rental-mvp-micro/services/catalog/app/api/upload.py ---
# services/catalog/app/api/upload.py
"""
Endpoint para subir imágenes desde el catálogo.
También devuelve la **ruta relativa** /uploads/…  para evitar problemas de host.
"""
from __future__ import annotations

import os
import shutil
import uuid
from pathlib import Path

from fastapi import (
    APIRouter,
    Depends,
    HTTPException,
    Request,
    UploadFile,
    status,
)

from app.deps import get_current_username

UPLOAD_DIR = Path(__file__).resolve().parent.parent / "uploads"
UPLOAD_DIR.mkdir(exist_ok=True)

router = APIRouter()


@router.post("/", status_code=status.HTTP_201_CREATED)
async def upload_image(
    file: UploadFile,
    request: Request,
    _user=Depends(get_current_username),
):
    if not file.content_type.startswith("image/"):
        raise HTTPException(400, "Solo imágenes")

    ext = Path(file.filename).suffix
    name = f"{uuid.uuid4()}{ext}"
    path = UPLOAD_DIR / name

    with path.open("wb") as buf:
        shutil.copyfileobj(file.file, buf)

    # ← ruta relativa
    return {"url": f"/uploads/{name}"}



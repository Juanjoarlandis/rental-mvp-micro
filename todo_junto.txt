--- frontend/index.html ---
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Rental-MVP</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- frontend/package.json ---
{
  "name": "rental-mvp-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --max-warnings=0 --fix"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.3.4",
    "@stripe/react-stripe-js": "^2.3.0",
    "@stripe/stripe-js": "^1.53.0",
    "@tanstack/react-query": "^5.38.0",
    "axios": "^1.6.8",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "focus-trap-react": "^10.2.1",
    "react": "^18.3.1",
    "react-day-picker": "^9.8.0",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.23.1",
    "zod": "^3.23.4",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@tailwindcss/container-queries": "",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.2",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.0",
    "vite": "^5.3.1"
  }
}


--- frontend/vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    https: true,  // MODIFIED: HTTPS en dev (usa cert auto-firmado de Vite)
    proxy: {
      "/api/auth":       "https://localhost:8001",  // MODIFIED: Cambiado a HTTPS
      "/api/items":      "https://localhost:8002",
      "/api/categories": "https://localhost:8002",
      "/api/rentals":    "https://localhost:8003",
      "/api/upload":     "https://localhost:8004",
      "/api/payments":   "https://localhost:8005",
      "/uploads":        "https://localhost:8004"
    }
  }
});

--- frontend/.env ---
VITE_STRIPE_PK=pk_test_51RkNe1BAdmER2zaJNEdcxq6T7uBwtyGDiHaFRF5I9LjGGbbYxmvPfdffr4HLqZy753gB6ixJRFfu7HXRsntuCGyH00szhzRTcx
FRONTEND_URL=http://frontend


--- frontend/Dockerfile ---
# ───────────── Etapa 1: build Vite ─────────────
FROM node:20 AS builder
WORKDIR /frontend

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .
RUN npm run build          # genera /frontend/dist

# ───────────── Etapa 2: Nginx ─────────────
FROM nginx:1.27-alpine

RUN apk add --no-cache curl  # Para healthcheck

# Copia estáticos compilados
COPY --from=builder /frontend/dist /usr/share/nginx/html

# Proxy /api → backend
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

--- frontend/nginx.conf ---
server {
    listen 80;
    server_name 15.188.100.106;  # O localhost para testing local

    # Redirigir todo HTTP a HTTPS (opcional, pero recomendado)
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name 15.188.100.106;  # O localhost

    # Self-signed certificates (montados via volumen)
    ssl_certificate /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;

    # Config básica de seguridad (sin HSTS para self-signed)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # ───────── Cabeceras comunes para upstream ─────────
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # ───────── Fichero SPA (Vite) ─────────
    root /usr/share/nginx/html;
    index index.html;
    client_max_body_size 100M;

    # ───────── Health-check global ─────────
    location = /health {
        proxy_pass http://auth-service:8000;
    }

    # ───────── Micro-servicios ─────────
    location /api/auth/       { proxy_pass http://auth-service:8000; }
    location /api/items/      { proxy_pass http://catalog-service:8000; }
    location /api/categories/ { proxy_pass http://catalog-service:8000; }
    location /api/rentals/    { proxy_pass http://rentals-service:8000; }
    location /api/upload/     { proxy_pass http://upload-service:8000; }
    location /api/payments/   { proxy_pass http://payments-service:8000; }

    # Ficheros subidos
    location /uploads/        { proxy_pass http://upload-service:8000; }

    # ───────── SPA fallback ─────────
    location / {
        try_files $uri $uri/ /index.html;
    }
}

--- frontend/tsconfig.json ---
{
    "compilerOptions": {
        "target": "ES2022",
        "lib": [
            "DOM",
            "DOM.Iterable",
            "ES2022"
        ],
        "module": "ESNext",
        "moduleResolution": "Node",
        "types": [
            "vite/client"
        ],
        "strict": true,
        "jsx": "react-jsx",
        "resolveJsonModule": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": [
        "src"
    ]
}

--- frontend/postcss.config.js ---
// rental-mvp/frontend/postcss.config.js
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {}
    }
};


--- frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./index.html', './src/**/*.{ts,tsx}'],
    theme: {
        //   ↓↓↓ breakpoints fluidos
        screens: {
            xs: '375px',
            sm: '640px',
            md: '768px',
            lg: '1024px',
            xl: '1280px',
            '2xl': '1440px',
            '3xl': '1920px'
        },
        container: { center: true, padding: '1rem' },
        extend: {
            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },
            colors: {
                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },
                surface: '#ffffff'
            },
            boxShadow: {
                card: '0 1px 3px rgba(0,0,0,.08)',
                cardHover: '0 4px 12px rgba(0,0,0,.12)'
            }
        }
    },
    plugins: [
        require('@tailwindcss/forms'),
        require('@tailwindcss/typography'),
        require('@tailwindcss/line-clamp'),
        require('@tailwindcss/container-queries') // 🆕
    ]
};


--- frontend/src/App.tsx ---
// src/App.tsx
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { Suspense } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Elements } from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

import ErrorBoundary from "./ErrorBoundary";
import { AuthProvider } from "./hooks/useAuth";

import Header from "./components/layout/Header";
import Footer from "./components/layout/Footer";

import Home from "./pages/Home";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import Protected from "./Protected";
import ForgotPassword from "./pages/ForgotPassword";    
import ResetPassword from "./pages/ResetPassword";  

import "./styles/global.css";

/* ─── Stripe ─────────────────────────────────────────────────────────── */
const stripePromise = loadStripe(
  import.meta.env.VITE_STRIPE_PK as string /* pk_test_xxx */
);
/* ─────────────────────────────────────────────────────────────────────── */

const queryClient = new QueryClient();

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Elements stripe={stripePromise}>
          <BrowserRouter>
            <ErrorBoundary>
              <Header />

              <Suspense
                fallback={
                  <p className="py-32 text-center text-gray-500">Cargando…</p>
                }
              >
                <Routes>
                  <Route path="/" element={<Home />} />
                  <Route path="/login" element={<Login />} />
                  <Route path="/register" element={<Register />} />
                  <Route path="/forgot-password" element={<ForgotPassword />} />  
                  <Route path="/reset-password" element={<ResetPassword />} />   
                  {/* ---------- RUTA PROTEGIDA ---------- */}
                  <Route
                    path="/dashboard"
                    element={
                      <Protected>
                        <Dashboard />
                      </Protected>
                    }
                  />
                </Routes>
              </Suspense>

              <Footer />
            </ErrorBoundary>
          </BrowserRouter>
        </Elements>
      </AuthProvider>
    </QueryClientProvider>
  );
}


--- frontend/src/api.ts ---
import axios from "axios";

/**
 * Singleton Axios con:
 *  · baseURL "/api"
 *  · Authorization automático si hay token en localStorage
 */
export const api = axios.create({ baseURL: "/api" });

api.interceptors.request.use(cfg => {
  const token = localStorage.getItem("token");
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  cfg.withCredentials = true;  // MODIFIED: Para CSRF si backend usa cookies (opcional)
  return cfg;
});

--- frontend/src/ErrorBoundary.tsx ---
import React, { ErrorInfo, ReactNode } from "react";

type Props = { children: ReactNode };
type State = { hasError: boolean };

class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: ErrorInfo) {
    // Aquí podrías enviar logs a Sentry, LogRocket, etc.
    console.error("⛔ Unhandled error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <main className="flex min-h-[60vh] items-center justify-center">
          <p className="rounded-md bg-red-50 p-6 text-center text-lg text-red-600 shadow">
            ¡Ups! Algo ha ido mal.<br />
            Intenta recargar la página.
          </p>
        </main>
      );
    }
    return this.props.children;
  }
}

export default ErrorBoundary;


--- frontend/src/main.tsx ---
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';          // 🆕
import './styles/global.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
    <Toaster                                         // 🆕
      position="top-right"
      toastOptions={{
        style: { fontSize: '0.875rem' },            // 14 px
        duration: 3000
      }}
    />
  </React.StrictMode>
);


--- frontend/src/utils.ts ---
// utils.ts
/**
 * URL base de la API.  Ajusta en .env.local si no usas localhost:8000
 *   VITE_API_BASE_URL=https://tu-dominio.com
 */
export const API_BASE =
  import.meta.env.VITE_API_BASE_URL ?? window.location.origin;

/**  
 * Devuelve una URL de imagen válida.
 * - Si ya es absoluta → la deja tal cual.
 * - Si empieza por “/” → la concatena con API_BASE.
 * - Si viene `undefined` → usa el *fallback*.
 */
export function resolveImage(url: string | undefined, fallback: string) {
  if (!url) return fallback;
  if (/^https?:\/\//i.test(url)) return url; // absoluta
  return `${API_BASE}${url.startsWith("/") ? "" : "/"}${url}`;
}


--- frontend/src/Protected.tsx ---
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "./hooks/useAuth";

export default function Protected({ children }: { children: JSX.Element }) {
  const { token } = useAuth();
  const loc = useLocation();
  return token ? children : <Navigate to="/login" replace state={{ from: loc }} />;
}


--- frontend/src/assets/payments/paypal.svg ---
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="24" cy="24" r="20" fill="#0070BA"/>
<path d="M32.3305 18.0977C32.3082 18.24 32.2828 18.3856 32.2542 18.5351C31.2704 23.5861 27.9046 25.331 23.606 25.331H21.4173C20.8916 25.331 20.4486 25.7127 20.3667 26.2313L19.2461 33.3381L18.9288 35.3527C18.8755 35.693 19.1379 36 19.4815 36H23.3634C23.8231 36 24.2136 35.666 24.286 35.2127L24.3241 35.0154L25.055 30.3772L25.1019 30.1227C25.1735 29.6678 25.5648 29.3338 26.0245 29.3338H26.6051C30.3661 29.3338 33.3103 27.8068 34.1708 23.388C34.5303 21.5421 34.3442 20.0008 33.393 18.9168C33.1051 18.59 32.748 18.3188 32.3305 18.0977Z" fill="white" fill-opacity="0.6"/>
<path d="M31.3009 17.6871C31.1506 17.6434 30.9955 17.6036 30.8364 17.5678C30.6766 17.5328 30.5127 17.5018 30.3441 17.4748C29.754 17.3793 29.1074 17.334 28.4147 17.334H22.5676C22.4237 17.334 22.2869 17.3666 22.1644 17.4254C21.8948 17.5551 21.6944 17.8104 21.6459 18.1229L20.402 26.0013L20.3662 26.2311C20.4481 25.7126 20.8911 25.3308 21.4168 25.3308H23.6055C27.9041 25.3308 31.2699 23.5851 32.2537 18.5349C32.2831 18.3854 32.3078 18.2398 32.33 18.0975C32.0811 17.9655 31.8115 17.8525 31.5212 17.7563C31.4496 17.7324 31.3757 17.7094 31.3009 17.6871Z" fill="white" fill-opacity="0.8"/>
<path d="M21.6461 18.1231C21.6946 17.8105 21.895 17.5552 22.1646 17.4264C22.2879 17.3675 22.4239 17.3349 22.5678 17.3349H28.4149C29.1077 17.3349 29.7542 17.3803 30.3444 17.4757C30.513 17.5027 30.6768 17.5338 30.8367 17.5687C30.9957 17.6045 31.1508 17.6443 31.3011 17.688C31.3759 17.7103 31.4498 17.7334 31.5222 17.7564C31.8125 17.8527 32.0821 17.9664 32.331 18.0976C32.6237 16.231 32.3287 14.9601 31.3194 13.8093C30.2068 12.5424 28.1986 12 25.629 12H18.169C17.6441 12 17.1963 12.3817 17.1152 12.9011L14.0079 32.5969C13.9467 32.9866 14.2473 33.3381 14.6402 33.3381H19.2458L20.4022 26.0014L21.6461 18.1231Z" fill="white"/>
</svg>

--- frontend/src/assets/payments/mastercard.svg ---
<?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 -11 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="0.5" y="0.5" width="69" height="47" rx="5.5" fill="white" stroke="#D9D9D9"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3945 34.7619C33.0114 36.8184 29.92 38.0599 26.5421 38.0599C19.0047 38.0599 12.8945 31.8788 12.8945 24.254C12.8945 16.6291 19.0047 10.448 26.5421 10.448C29.92 10.448 33.0114 11.6895 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z" fill="#ED0006"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3945 34.7619C38.3289 32.2296 40.1896 28.4616 40.1896 24.254C40.1896 20.0463 38.3289 16.2783 35.3945 13.7461C37.7777 11.6895 40.869 10.448 44.247 10.448C51.7843 10.448 57.8945 16.6291 57.8945 24.254C57.8945 31.8788 51.7843 38.0599 44.247 38.0599C40.869 38.0599 37.7777 36.8184 35.3945 34.7619Z" fill="#F9A000"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M35.3946 13.7461C38.329 16.2784 40.1897 20.0463 40.1897 24.254C40.1897 28.4616 38.329 32.2295 35.3946 34.7618C32.4603 32.2295 30.5996 28.4616 30.5996 24.254C30.5996 20.0463 32.4603 16.2784 35.3946 13.7461Z" fill="#FF5E00"/>
</svg>

--- frontend/src/assets/payments/visa.svg ---
<?xml version="1.0" encoding="utf-8"?>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 -139.5 750 750" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <desc>Created with Sketch.</desc>
    <defs>

</defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="visa" fill="#393939" fill-rule="nonzero">
            <path d="M52.8846154,28.2035928 C39.6085397,28.2035928 28.8461538,38.7262417 28.8461538,51.7065868 L28.8461538,419.293413 C28.8461538,432.273758 39.6085397,442.796407 52.8846154,442.796407 L697.115385,442.796407 C710.39146,442.796407 721.153846,432.273758 721.153846,419.293413 L721.153846,51.7065868 C721.153846,38.7262417 710.39146,28.2035928 697.115385,28.2035928 L52.8846154,28.2035928 Z M52.8846154,0 L697.115385,0 C726.322751,-5.0099645e-15 750,23.1498275 750,51.7065868 L750,419.293413 C750,447.850173 726.322751,471 697.115385,471 L52.8846154,471 C23.6772488,471 3.41607085e-15,447.850173 0,419.293413 L0,51.7065868 C-3.41607085e-15,23.1498275 23.6772488,5.0099645e-15 52.8846154,0 Z" id="outline">

</path>
            <g id="Logo" transform="translate(60.000000, 139.000000)">
                <polygon id="Shape" points="222.597614 191.12625 254.442205 4.26252273 305.375795 4.26252273 273.50925 191.12625">

</polygon>
                <path d="M457.520795,8.29261364 C447.429341,4.50688636 431.61825,0.444340909 411.871568,0.444340909 C361.544114,0.444340909 326.092295,25.7884773 325.790659,62.1117955 C325.507159,88.9622045 351.099477,103.940932 370.419477,112.879295 C390.244432,122.038159 396.910023,127.879977 396.815523,136.058523 C396.689523,148.584068 380.983432,154.306568 366.343568,154.306568 C345.957341,154.306568 335.127068,151.474432 318.400568,144.497659 L311.837114,141.527114 L304.688523,183.359114 C316.585023,188.57475 338.583477,193.094523 361.424795,193.328386 C414.964295,193.328386 449.721205,168.274432 450.116386,129.486477 C450.30825,108.229705 436.738432,92.0520682 407.353705,78.7161136 C389.550477,70.07175 378.647659,64.3034318 378.763159,55.55025 C378.763159,47.7831136 387.991705,39.4776136 407.931205,39.4776136 C424.587068,39.2189318 436.651568,42.8509773 446.051932,46.6367045 L450.616568,48.7930227 L457.520795,8.29261364" id="Shape">

</path>
                <path d="M588.586568,4.26252273 L549.229705,4.26252273 C537.037295,4.26252273 527.91375,7.59006818 522.55875,19.7586136 L446.915795,191.006932 L500.399932,191.006932 C500.399932,191.006932 509.145477,167.981386 511.123295,162.926114 C516.967977,162.926114 568.924841,163.006295 576.353114,163.006295 C577.876568,169.547795 582.550023,191.006932 582.550023,191.006932 L629.811477,191.006932 L588.586568,4.26252273 Z M526.143068,124.92375 C530.355477,114.157432 546.43575,72.6881591 546.43575,72.6881591 C546.135068,73.1854773 550.616659,61.8693409 553.189159,54.8534318 L556.632205,70.96425 C556.632205,70.96425 566.384795,115.569205 568.42275,124.922795 L526.143068,124.922795 L526.143068,124.92375 Z" id="Path">

</path>
                <path d="M179.361477,4.26252273 L129.496023,131.689568 L124.183023,105.793705 C114.900068,75.94125 85.9773409,43.5993409 53.6430682,27.4073864 L99.2388409,190.828432 L153.127705,190.766386 L233.313341,4.26252273 L179.361477,4.26252273" id="Path">

</path>
                <path d="M82.9686136,4.26252273 L0.838568182,4.26252273 L0.188522727,8.15038636 C64.0848409,23.6178409 106.364523,60.9968864 123.914795,105.909205 L106.056205,20.0382955 C102.973023,8.20575 94.0308409,4.67488636 82.9686136,4.26252273" id="Shape">

</path>
            </g>
        </g>
    </g>
</svg>

--- frontend/src/hooks/useAuth.tsx ---
import React, { createContext, useContext, useState } from "react";

/* ------------------------------------------------------------------ */
/*                       Contexto & proveedor                         */
/* ------------------------------------------------------------------ */
type AuthContextT = {
  token: string | null;
  login: (t: string) => void;
  logout: () => void;
};
const AuthContext = createContext<AuthContextT | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children
}) => {
  const [token, setToken] = useState<string | null>(
    () => localStorage.getItem("token")
  );

  const login = (t: string) => {
    localStorage.setItem("token", t);
    setToken(t);
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken(null);
  };

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

/* ------------------------------------------------------------------ */
/*                           Hooks util                               */
/* ------------------------------------------------------------------ */
export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth debe usarse dentro de <AuthProvider>");
  return ctx;
};

/** Lee el token directo de localStorage (válido fuera de React). */
export const getTokenLS = () => localStorage.getItem("token");


--- frontend/src/hooks/useStripe.ts ---
// src/hooks/useStripe.ts
import { loadStripe, Stripe } from "@stripe/stripe-js";
import { useEffect, useState } from "react";

export function useStripe() {
  const [stripe, setStripe] = useState<Stripe | null>(null);

  useEffect(() => {
    (async () => {
      const pk = import.meta.env.VITE_STRIPE_PK;
      if (pk && !stripe) {
        const s = await loadStripe(pk);
        setStripe(s);
      }
    })();
  }, [stripe]);

  return stripe;
}


--- frontend/src/styles/global.css ---
/* frontend/src/styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ---------- BASE ---------- */
@layer base {
  html { @apply scroll-smooth; }
  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }
}

/* ---------- COMPONENTS ---------- */
@layer components {
  /* Botones */
  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-all duration-200 hover:bg-brand-hover hover:shadow-md disabled:opacity-60 active:scale-95; }  /* +hover shadow, active scale */
  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-all duration-200 hover:bg-brand/5 hover:shadow-sm active:scale-95; }

  /* Badges */
  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }
  .badge--ok     { @apply badge bg-green-100 text-green-800; }
  .badge--danger { @apply badge bg-red-100 text-red-800; }

  /* Campos select genérico */
  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand transition-all duration-200; }

  /* Toast */
  .toast-success { @apply bg-green-600 text-white; }
  .toast-error   { @apply bg-red-600 text-white; }

  /* Títulos fluidos (ejemplo h1) */
  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px → 56 px aprox */
}

/* ---------- UTILITIES PERSONALIZADAS ---------- */
@layer utilities {
  .text-balance { text-wrap: balance; }

  /* Evita re-pintados innecesarios en grandes listas */
  .content-auto { content-visibility: auto; }

  /* Oculta scrollbar (usarlo con cuidado) */
  .scrollbar-none::-webkit-scrollbar { display: none; }

  /* Animaciones on-scroll */
  .fade-in { opacity: 0; transform: translateY(20px); transition: opacity 0.6s ease-out, transform 0.6s ease-out; }
  .fade-in.visible { opacity: 1; transform: translateY(0); }

  /* Count-up para stats */
  .count-up { counter-reset: num var(--num); }
  .count-up::after { content: counter(num); }
  @keyframes count { from { --num: 0; } to { --num: var(--target); } }
}

--- frontend/src/features/auth/forgot.ts ---
import { api } from "../../api";

/**
 * Solicita el _reset_token_ para un usuario existente.
 * Devuelve el token si la operación fue correcta (404 si no existe).
 */
export async function forgot(username: string): Promise<string> {
  const { data } = await api.post<{ reset_token: string }>(
    "/auth/password/forgot",
    { username }
  );
  return data.reset_token;
}


--- frontend/src/features/auth/register.ts ---
import { api } from "../../api";

/** Lanza 400 si el username o el email ya están en uso. */
export async function register(
  username: string,
  email: string,
  password: string
): Promise<void> {
  await api.post("/auth/signup", { username, email, password });
}


--- frontend/src/features/auth/login.ts ---
import { api } from "../../api";

export async function login(username: string, password: string): Promise<string> {
  const { data } = await api.post(
    "/auth/token",
    new URLSearchParams({ username, password }),
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );
  return data.access_token as string;
}


--- frontend/src/features/auth/reset.ts ---
import { api } from "../../api";

/**
 * Envía el nuevo password junto con el token recibido por “forgot”.
 * Lanza 400 si el token es inválido / expiró.
 */
export async function reset(token: string, newPassword: string): Promise<void> {
  await api.post("/auth/password/reset", { token, new_password: newPassword });
}


--- frontend/src/features/categories/useCategories.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Category = { id: number; name: string };

export default function useCategories() {
  const { data, isLoading } = useQuery<Category[]>({
    queryKey: ["categories"],
    queryFn: () => api.get<Category[]>("/categories/").then(r => r.data),
    staleTime: 5 * 60_000 // 5 min
  });

  return { data: data ?? [], loading: isLoading };
}


--- frontend/src/features/items/useItems.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Item = {
  id: number;
  name: string;
  description?: string;
  price_per_h: number;
  available: boolean;

  /* ---- imágenes ---- */
  /** 1 sola (compat.) */
  image_url?: string;
  /** varias (nuevo)   */
  image_urls?: string[];

  categories?: { id: number; name: string }[];
};

export function useItems(params?: URLSearchParams) {
  const queryKey = ["items", params?.toString() ?? ""];

  const { data, isLoading, refetch } = useQuery<Item[]>({
    queryKey,
    queryFn: () =>
      api.get<Item[]>("/items/", { params }).then(r => r.data),
    staleTime: 60_000 // 1 min sin refetch
  });

  return { data: data ?? [], loading: isLoading, refetch };
}


--- frontend/src/features/items/AddItemModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/features/items/AddItemModal.tsx                                       */
/* -------------------------------------------------------------------------- */
import { Fragment, useEffect, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon, PhotoIcon, TrashIcon } from '@heroicons/react/24/outline';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';

import useCategories, { Category } from '../categories/useCategories';
import { useAuth } from '../../hooks/useAuth';
import { api } from '../../api';

/* -------------------------------------------------------------------------- */
/*                               schema + types                               */
/* -------------------------------------------------------------------------- */

const MB = 1024 * 1024;
const MAX_IMAGES = 6;

const priceRegex = /^\d+([.,]\d{1,2})?$/; // hasta 2 decimales

const schema = z.object({
  name: z.string().min(3, 'Mínimo 3 caracteres'),
  description: z.string().max(500).optional(),
  price_per_h: z
    .string()
    .regex(priceRegex, 'Precio inválido')
    .transform(v => Number(v.replace(',', '.'))),
  categories: z.array(z.number()).min(1, 'Selecciona al menos una categoría'),
  images: z
    .array(
      z
        .instanceof(File)
        .refine(f => f.size <= 5 * MB, 'Cada imagen máx. 5 MB')
    )
    .min(1, 'Al menos 1 imagen')
    .max(MAX_IMAGES, `Máx. ${MAX_IMAGES} imágenes`)
});

type FormData = z.infer<typeof schema>;

type Props = {
  open: boolean;
  onClose: () => void;
  onCreated: () => void; // callback para refrescar listado
};

/* -------------------------------------------------------------------------- */
/*                           Componente principal                             */
/* -------------------------------------------------------------------------- */
export default function AddItemModal({ open, onClose, onCreated }: Props) {
  const { data: cats } = useCategories();
  const { token } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: { categories: [], images: [] }
  });

  /* --------------------------- previews dinámicos -------------------------- */
  const files = watch('images'); // File[]
  const [previews, setPreviews] = useState<string[]>([]);

  useEffect(() => {
    const urls = files.map(f => URL.createObjectURL(f));
    setPreviews(urls);
    return () => urls.forEach(URL.revokeObjectURL); // cleanup
  }, [files]);

  /* ------------------------------- submit --------------------------------- */
  async function onSubmit(data: FormData) {
    if (!token) {
      toast.error('Debes haber iniciado sesión');
      return;
    }

    try {
      /* 1.- subimos imágenes (paralelo) */
      let image_urls: string[] = [];
      if (data.images.length) {
        const uploads = await Promise.all(
          data.images.map(async img => {
            const fd = new FormData();
            fd.append('file', img);
            const r = await api.post<{ url: string }>('/upload/', fd, {
              headers: { 'Content-Type': 'multipart/form-data' }
            });
            return r.data.url;
          })
        );
        image_urls = uploads;
      }

      /* 2.- creamos ítem */
      await api.post('/items/', {
        name: data.name,
        description: data.description,
        price_per_h: data.price_per_h,
        categories: data.categories,
        image_urls           // 🔥 ahora array
      });

      toast.success('¡Producto publicado!');
      reset();
      onCreated();
      onClose();
    } catch (err: any) {
      console.error(err);
      toast.error(err.response?.data?.detail ?? 'Error al crear producto');
    }
  }

  /* ------------------------------------------------------------------------ */
  /*                                   UI                                     */
  /* ------------------------------------------------------------------------ */
  return (
    <Transition show={open} as={Fragment}>
      <Dialog
        onClose={() => {
          reset();
          onClose();
        }}
        className="relative z-50"
      >
        {/* ---------- Backdrop ---------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------- Wrapper ---------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-2xl max-h-[90vh] flex-col overflow-x-hidden rounded-xl bg-white shadow-xl">
              {/* ---------- Header ---------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  Nuevo producto
                </Dialog.Title>
                <button
                  type="button"
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  onClick={() => {
                    reset();
                    onClose();
                  }}
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </header>

              {/* ---------- Form (scrollable) ---------- */}
              <form
                onSubmit={handleSubmit(onSubmit)}
                className="grid flex-1 grid-cols-1 gap-6 overflow-y-auto px-6 py-8 md:grid-cols-2"
              >
                {/* --------------------------- Columna 1 --------------------------- */}
                <div className="space-y-4">
                  {/* Nombre */}
                  <div>
                    <label className="block text-sm font-medium">Nombre</label>
                    <input
                      {...register('name')}
                      className="form-input mt-1 w-full"
                      placeholder="Taladro Bosch 800 W"
                    />
                    {errors.name && (
                      <p className="text-xs text-red-600">
                        {errors.name.message}
                      </p>
                    )}
                  </div>

                  {/* Descripción */}
                  <div>
                    <label className="block text-sm font-medium">
                      Descripción
                    </label>
                    <textarea
                      {...register('description')}
                      rows={5}
                      className="form-input mt-1 w-full resize-none"
                      placeholder="Añade detalles técnicos, estado, accesorios incluidos…"
                    />
                    {errors.description && (
                      <p className="text-xs text-red-600">
                        {errors.description.message}
                      </p>
                    )}
                  </div>

                  {/* Precio */}
                  <div>
                    <label className="block text-sm font-medium">
                      Precio / hora (€)
                    </label>
                    <input
                      {...register('price_per_h')}
                      className="form-input mt-1 w-full"
                      placeholder="3.5"
                      inputMode="decimal"
                    />
                    {errors.price_per_h && (
                      <p className="text-xs text-red-600">
                        {errors.price_per_h.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Columna 2 --------------------------- */}
                <div className="space-y-4">
                  {/* Imágenes */}
                  <div>
                    <label className="block text-sm font-medium">
                      Imágenes ({files.length}/{MAX_IMAGES})
                    </label>

                    {/* zona de drop / input */}
                    <label className="mt-1 flex min-h-[4rem] w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-dashed border-gray-300 p-4 text-center text-sm text-gray-500 hover:border-brand hover:text-brand">
                      <PhotoIcon className="h-8 w-8" />
                      <span className="mt-1">
                        PNG, JPG · máx. 5 MB c/u · hasta {MAX_IMAGES}
                      </span>
                      <input
                        type="file"
                        accept="image/*"
                        multiple
                        className="sr-only"
                        onChange={e =>
                          setValue(
                            'images',
                            [...(e.target.files ?? [])] as File[],
                            { shouldValidate: true }
                          )
                        }
                      />
                    </label>

                    {/* previews */}
                    {previews.length > 0 && (
                      <div className="mt-4 grid grid-cols-3 gap-2">
                        {previews.map((src, i) => (
                          <div key={i} className="relative">
                            <img
                              src={src}
                              alt={`preview ${i + 1}`}
                              className="h-24 w-full rounded object-cover"
                            />
                            <button
                              type="button"
                              title="Eliminar"
                              onClick={() => {
                                const copy = [...files];
                                copy.splice(i, 1);
                                setValue('images', copy, { shouldValidate: true });
                              }}
                              className="absolute right-0 top-0 rounded-bl bg-black/60 p-0.5 text-white transition-colors hover:bg-black/80"
                            >
                              <TrashIcon className="h-4 w-4" />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {errors.images && (
                      <p className="mt-1 text-xs text-red-600">
                        {errors.images.message as string}
                      </p>
                    )}
                  </div>

                  {/* Categorías */}
                  <div>
                    <p className="mb-1 text-sm font-medium">Categorías</p>
                    <div className="flex flex-wrap gap-2">
                      {cats.map((c: Category) => {
                        const selected = watch('categories').includes(c.id);
                        return (
                          <button
                            type="button"
                            key={c.id}
                            onClick={() => {
                              const current = new Set(watch('categories'));
                              selected
                                ? current.delete(c.id)
                                : current.add(c.id);
                              setValue('categories', [...current]);
                            }}
                            className={
                              selected
                                ? 'rounded-full bg-brand px-3 py-0.5 text-xs text-white'
                                : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                            }
                          >
                            {c.name}
                          </button>
                        );
                      })}
                    </div>
                    {errors.categories && (
                      <p className="text-xs text-red-600">
                        {errors.categories.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Footer --------------------------- */}
                <div className="md:col-span-2 flex justify-end gap-3">
                  <button
                    type="button"
                    className="btn--ghost"
                    onClick={() => {
                      reset();
                      onClose();
                    }}
                  >
                    Cancelar
                  </button>
                  <button className="btn" disabled={isSubmitting}>
                    {isSubmitting ? 'Publicando…' : 'Publicar'}
                  </button>
                </div>
              </form>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- frontend/src/features/items/ItemList.tsx ---
import { useEffect, useMemo, useRef, useState } from 'react';
import axios from 'axios';
import Container from '../../components/shared/Container';
import ItemCard from '../../components/ui/ItemCard';
import SkeletonCard from '../../components/ui/SkeletonCard';
import FiltersSidebar from '../../components/filters/FiltersSidebar';
import { useItems } from './useItems';
import { useAuth } from '../../hooks/useAuth';
import AddItemModal from './AddItemModal';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

/* -------------------------------------------------- */
/*                    Tipado filtros                  */
/* -------------------------------------------------- */
type FiltersT = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

export default function ItemList() {
  /* ------------------------------ filtros ------------------------------ */
  const [filters, setFilters] = useState<FiltersT>({});

  /* Serializamos filtros → query-string */
  const params = useMemo(() => {
    const p = new URLSearchParams();

    Object.entries(filters).forEach(([k, v]) => {
      if (v === undefined || v === '') return;
      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));
      else p.set(k, String(v));
    });

    /* orden (price_asc | price_desc | name) */
    if (filters.order) {
      const [field, dir] = filters.order.split('_');
      p.set('order_by', field === 'price' ? 'price' : 'name');
      p.set('order_dir', dir);
    }
    return p;
  }, [filters]);

  const { data: items, loading, refetch } = useItems(params);
  const { token } = useAuth();

  /* ----------------------- drawer móvil filtros ----------------------- */
  const [openFilters, setOpenFilters] = useState(false);

  /* ------------------------ infinite-scroll demo ---------------------- */
  const sentinel = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!sentinel.current) return;
    const ob = new IntersectionObserver(
      entries => {
        if (entries[0].isIntersecting && !loading) {
          /* Aquí podrías paginar → aumentar offset y refetch() */
        }
      },
      { rootMargin: '600px' }
    );
    ob.observe(sentinel.current);
    return () => ob.disconnect();
  }, [loading]);

  /* ----------------------- modal “añadir ítem” ------------------------ */
  const [addOpen, setAddOpen] = useState(false);

  /* -------------------------------------------------------------------- */
  return (
    <Container>
      {/* ---------- botón abrir filtros (solo xs-sm) ---------- */}
      <button onClick={() => setOpenFilters(true)} className="btn mb-4 md:hidden">
        <Bars3Icon className="mr-2 h-5 w-5" />
        Filtros
      </button>

      <div className="flex flex-col gap-10 md:flex-row">
        {/* ---------- Filtros (off-canvas en móvil) ---------- */}
        {/* Backdrop */}
        <div
          className={`
            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden
            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
          `}
          onClick={() => setOpenFilters(false)}
        />

        {/* Panel */}
        <aside
          className={`
            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform
            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none
            ${openFilters ? 'translate-x-0' : '-translate-x-full'}
          `}
        >
          {/* Cerrar (solo móvil) */}
          <button onClick={() => setOpenFilters(false)} className="mb-4 md:hidden">
            <XMarkIcon className="h-6 w-6" />
          </button>

          <FiltersSidebar
            value={filters}
            onChange={setFilters}
            onReset={() => setFilters({})}
          />
        </aside>

        {/* -------------------- listado de tarjetas -------------------- */}
        <section className="flex-1">
          {/* CTA añadir producto (solo usuarios logueados) */}
          {token && (
            <div className="flex justify-end">
              <button className="btn mb-4" onClick={() => setAddOpen(true)}>
                Añadir producto
              </button>
            </div>
          )}

          {/* loader inicial */}
          {loading && !items.length ? (
            <GridSkeleton />
          ) : (
            <Grid>
              {items.map(it => (
                <ItemCard key={it.id} item={it} />
              ))}
              {/* sentinel infinite-scroll */}
              <div ref={sentinel} />
            </Grid>
          )}

          {/* vacío */}
          {!loading && !items.length && (
            <p className="py-6 text-center text-gray-500">No hay resultados.</p>
          )}
        </section>
      </div>

      {/* modal añadir */}
      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />
    </Container>
  );
}

/* -------------------------------------------------- */
/*                       Helpers                      */
/* -------------------------------------------------- */

/* Grid responsive: min-width 12 rem (≈192 px) y se
   auto-ajusta con container-queries si el padre pasa
   a ser un “container” — funciona también sin CQ. */
const Grid = ({ children }: { children: React.ReactNode }) => (
  <div
    className="
      grid gap-6 py-6 content-auto
      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]
      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]
    "
  >
    {children}
  </div>
);

const GridSkeleton = () => (
  <Grid>
    {Array.from({ length: 8 }).map((_, i) => (
      <SkeletonCard key={i} />
    ))}
  </Grid>
);


--- frontend/src/features/rentals/reserve.ts ---
/**
 * Orquesta todo el flujo:
 *   1) crea un alquiler              → /api/rentals/
 *   2) pide PaymentIntent a Stripe   → /api/payments/create-intent
 * Devuelve el `client_secret` para confirmar el pago desde el front.
 */
import { api } from "../../api";

// ### UPDATED: Acepta fechas reales
export async function reserve(item_id: number, start: Date, end: Date) {
  const start_at = start.toISOString();
  const end_at = end.toISOString();

  // 1) crear alquiler con fechas
  const { data: rental } = await api.post("/rentals/", {
    item_id,
    start_at,
    end_at
  });

  // 2) crear PaymentIntent (fianza = rental.deposit)
  const { data: intent } = await api.post("/payments/create-intent", {
    amount: rental.deposit
  });

  return { clientSecret: intent.client_secret, rental };
}

--- frontend/src/features/rentals/RentalList.tsx ---
// src/features/rentals/RentalList.tsx
import { useAuth } from "../../hooks/useAuth";
import { useRentals, RentalStatus } from "./useRentals";
import clsx from "clsx";

/* ------------------------------------------------------------------ */
/*                         Helper visual                              */
/* ------------------------------------------------------------------ */
function statusLabel(s: RentalStatus) {
  switch (s) {
    case "pending":
      return ["Pendiente", "badge badge--danger"];
    case "confirmed":
      return ["Confirmado", "badge badge--ok"];
    case "returned":
      return ["Devuelto", "badge"];
  }
}

/* ------------------------------------------------------------------ */
/*                           Componente                               */
/* ------------------------------------------------------------------ */
export default function RentalList() {
  const { token } = useAuth();
  const {
    data: rentals,
    loading,
  } = useRentals(token); // ← hook actualizado

  if (!token)
    return (
      <p className="text-gray-500">
        Debes iniciar sesión para ver tus alquileres.
      </p>
    );

  if (loading) return <p className="text-gray-500">Cargando…</p>;

  if (!rentals.length)
    return <p className="text-gray-500">No tienes alquileres activos.</p>;

  return (
    <div className="space-y-2">
      {rentals.map(r => {
        const [txt, cls] = statusLabel(r.status);
        return (
          <div
            key={r.id}
            className="flex items-center justify-between rounded-md bg-white p-3 shadow"
          >
            <span className="font-medium">{r.item.name}</span>
            <span className={cls}>{txt}</span>
          </div>
        );
      })}
    </div>
  );
}


--- frontend/src/features/rentals/createRental.ts ---
// src/features/rentals/createRental.ts
import { api } from "../../api";

/** Crea un alquiler y devuelve su objeto completo (`RentalOut`). */
export async function createRental(item_id: number,
                                   start_at: string,
                                   end_at: string) {
  const { data } = await api.post("/rentals/", { item_id, start_at, end_at });
  return data;                         // ← incluye `deposit`
}


--- frontend/src/features/rentals/useRentals.ts ---
// src/features/rentals/useRentals.ts
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";
import { Item } from "../items/useItems";

/* ------------------------------------------------------------------ */
/*                              Types                                 */
/* ------------------------------------------------------------------ */

export type RentalStatus = "pending" | "confirmed" | "returned";

export type Rental = {
  id: number;
  item: Item;
  start_at: string;
  end_at: string;
  deposit: number;
  status: RentalStatus;       // ← reemplaza a «returned»
};

/* ------------------------------------------------------------------ */
/*                               Hook                                 */
/* ------------------------------------------------------------------ */

/**
 * Devuelve los alquileres del usuario autenticado.
 * La petición solo se dispara cuando `token` es truthy.
 */
export function useRentals(token: string | null) {
  const enabled = Boolean(token);

  const { data, isLoading, refetch } = useQuery<Rental[]>({
    queryKey: ["rentals"],
    queryFn: () => api.get<Rental[]>("/rentals/me").then(r => r.data),
    enabled,
    staleTime: 60_000,
    retry: false
  });

  return { data: data ?? [], loading: isLoading, refetch };
}


--- frontend/src/features/rentals/payments/createIntent.ts ---
// src/features/payments/createIntent.ts
import { api } from "../../../api";

export async function createIntent(amount: number) {
  const { data } = await api.post("/payments/create-intent", { amount });
  return data as { client_secret: string };
}


--- frontend/src/pages/Register.tsx ---
// src/pages/Register.tsx
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import zxcvbn from "zxcvbn";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import clsx from "clsx";
import { useEffect, useState } from "react";  // +useState for terms modal
import { FaEye, FaEyeSlash } from "react-icons/fa";  // +eye

import { register as apiRegister } from "../features/auth/register";
import { login as apiLogin } from "../features/auth/login";
import { useAuth } from "../hooks/useAuth";

import Container from "../components/shared/Container";
import SocialButton from "../components/ui/SocialButton";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";

const schema = z
  .object({
    username: z.string().min(3, "Mín. 3 caracteres"),
    email: z.string().email("Email inválido"),
    password: z.string().min(8, "Mín. 8 caracteres"),
    confirm: z.string(),
    terms: z.literal(true, { errorMap: () => ({ message: "Acepta los términos" }) }),
  })
  .refine(data => data.password === data.confirm, {
    message: "Las contraseñas no coinciden",
    path: ["confirm"],
  });

type FormData = z.infer<typeof schema>;

export default function Register() {
  const navigate = useNavigate();
  const { login: saveToken } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

  const pwd = watch("password", "");
  const [showPwd, setShowPwd] = useState(false);  // NEW: Toggle
  const [showTermsModal, setShowTermsModal] = useState(false);  // NEW: Terms modal

  const onSubmit = async (data: FormData) => {
    try {
      await apiRegister(data.username, data.email, data.password);
      const token = await apiLogin(data.username, data.password);
      saveToken(token);
      toast.success("Cuenta creada, ¡bienvenido!");
      navigate("/dashboard");
    } catch (err: any) {
      toast.error(err?.response?.data?.detail ?? "No se pudo crear la cuenta.");
    }
  };

  useEffect(() => {  // Fade-in
    const timer = setTimeout(() => document.querySelector('.form-container')?.classList.add('visible'), 100);
    return () => clearTimeout(timer);
  }, []);

  const strength = zxcvbn(pwd);
  const strengthColors = ['bg-red-500', 'bg-orange-400', 'bg-yellow-400', 'bg-lime-500', 'bg-green-600'];

  return (
    <Container>
      <main className="flex min-h-screen items-center justify-center bg-gray-50">
        <div className="w-full max-w-md space-y-8 rounded-2xl bg-white p-10 shadow-2xl fade-in form-container transition-opacity duration-500">  {/* FIXED: +fade-in */}
          <h1 className="text-center text-3xl font-bold text-gray-900">Crear cuenta</h1>

          <div className="space-y-4">
            <SocialButton provider="google" icon={FcGoogle} label="Continuar con Google" />
            <SocialButton provider="github" icon={FaGithub} label="Continuar con GitHub" />
          </div>

          <div className="relative my-6">
            <hr className="border-gray-300" />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-4 text-sm text-gray-500">o con email</span>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div className="relative">
              <label htmlFor="username" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Nombre de usuario</label>
              <input id="username" {...register("username")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand" placeholder=" " />
              {errors.username && <p className="mt-1 text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.username.message}</p>}  {/* +icon */}
            </div>

            <div className="relative">
              <label htmlFor="email" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Email</label>
              <input id="email" type="email" {...register("email")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand" placeholder=" " />
              {errors.email && <p className="mt-1 text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.email.message}</p>}
            </div>

            <div className="relative">
              <label htmlFor="password" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Contraseña</label>
              <input id="password" type={showPwd ? "text" : "password"} {...register("password")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand pr-10" placeholder=" " />
              <button type="button" onClick={() => setShowPwd(!showPwd)} className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-brand">
                {showPwd ? <FaEyeSlash className="h-5 w-5" /> : <FaEye className="h-5 w-5" />}
              </button>
            </div>

            {/* Strength meter with tips */}
            {pwd && (
              <div className="space-y-1">
                <div className="h-2 w-full overflow-hidden rounded bg-gray-200">
                  <div style={{ width: `${(strength.score + 1) * 20}%` }} className={clsx("h-full transition-all", strengthColors[strength.score])} />
                </div>
                <p className="text-xs text-gray-500">{strength.feedback.suggestions.join(' ')}</p>  {/* +tips from zxcvbn */}
              </div>
            )}
            {errors.password && <p className="text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.password.message}</p>}

            <div className="relative">
              <label htmlFor="confirm" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Repite contraseña</label>
              <input id="confirm" type={showPwd ? "text" : "password"} {...register("confirm")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand pr-10" placeholder=" " />
            </div>
            {errors.confirm && <p className="text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.confirm.message}</p>}

            <label className="flex flex-wrap items-center gap-2 text-sm text-gray-600">  {/* FIXED: +flex-wrap items-center, gap-2 para better spacing */}
              <input type="checkbox" {...register("terms")} className="rounded border-gray-300 text-brand focus:ring-brand" />
              Acepto los <button type="button" onClick={() => setShowTermsModal(true)} className="text-brand hover:underline">Términos y Política de privacidad</button>
            </label>
            {errors.terms && <p className="text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.terms.message}</p>}

            <button className="btn w-full rounded-lg py-3 text-base font-semibold" disabled={isSubmitting}>  {/* +styles */}
              {isSubmitting ? "Creando…" : "Crear cuenta"}
            </button>
          </form>

          {/* Terms Modal (simple dialog) */}
          {showTermsModal && (
            <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
              <div className="max-w-md rounded-lg bg-white p-6 shadow-xl">
                <h3 className="text-lg font-semibold">Términos y Privacidad</h3>
                <p className="mt-2 text-sm text-gray-600">Aquí irían los términos reales. Para demo, cierra.</p>
                <button onClick={() => setShowTermsModal(false)} className="mt-4 btn w-full">Cerrar</button>
              </div>
            </div>
          )}
        </div>
      </main>
    </Container>
  );
}

--- frontend/src/pages/Login.tsx ---
// src/pages/Login.tsx
import { FormEvent, useState, useEffect } from "react";  // +useEffect para anim
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import { login as apiLogin } from "../features/auth/login";
import { FcGoogle } from "react-icons/fc";
import { FaGithub, FaEye, FaEyeSlash } from "react-icons/fa";  // +eye icons
import SocialButton from "../components/ui/SocialButton";
import Container from "../components/shared/Container";
import toast from "react-hot-toast";
import clsx from "clsx";

export default function Login() {
  const [user, setUser] = useState("");
  const [pwd, setPwd] = useState("");
  const [showPwd, setShowPwd] = useState(false);  // NEW: Toggle visibility
  const [error, setError] = useState<string | null>(null);
  const [animateError, setAnimateError] = useState(false);  // NEW: Shake anim

  const { login: saveToken } = useAuth();
  const nav = useNavigate();

  async function handleSubmit(e: FormEvent) {
    e.preventDefault();
    try {
      const token = await apiLogin(user.trim(), pwd);
      saveToken(token);
      nav("/dashboard");
      toast.success("¡Bienvenido de nuevo!");
      setError(null);
    } catch {
      toast.error("Usuario o contraseña incorrectos");
      setError("Credenciales inválidas");
      setAnimateError(true);
      setTimeout(() => setAnimateError(false), 300);  // Reset anim
    }
  }

  useEffect(() => {  // Fade-in anim on mount
    const timer = setTimeout(() => document.querySelector('.form-container')?.classList.add('visible'), 100);
    return () => clearTimeout(timer);
  }, []);

  return (
    <Container>
      <main className="flex min-h-screen items-center justify-center bg-gray-50">  {/* +bg for pro look */}
        <div className="w-full max-w-md space-y-8 rounded-2xl bg-white p-10 shadow-2xl fade-in form-container transition-opacity duration-500">  {/* FIXED: +fade-in */}
          <h1 className="text-center text-3xl font-bold text-gray-900">Iniciar sesión</h1>  {/* +text-3xl */}

          {/* ---------- Login social ---------- */}
          <div className="space-y-4">
            <SocialButton provider="google" icon={FcGoogle} label="Continuar con Google" />  {/* Updated label */}
            <SocialButton provider="github" icon={FaGithub} label="Continuar con GitHub" />
          </div>

          <div className="relative my-6">
            <hr className="border-gray-300" />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-4 text-sm text-gray-500">o con email</span>  {/* +text-sm */}
          </div>

          {/* ---------- Formulario ---------- */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="relative">
              <label htmlFor="user" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Usuario</label>  {/* Floating label */}
              <input
                id="user"
                className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand"
                placeholder=" "
                value={user}
                onChange={e => setUser(e.target.value)}
                required
              />
            </div>

            <div className="relative">
              <label htmlFor="pwd" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Contraseña</label>
              <input
                id="pwd"
                type={showPwd ? "text" : "password"}
                className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand pr-10"  
                placeholder=" "
                value={pwd}
                onChange={e => setPwd(e.target.value)}
                required
              />
              <button
                type="button"
                onClick={() => setShowPwd(!showPwd)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-brand"
              >
                {showPwd ? <FaEyeSlash className="h-5 w-5" /> : <FaEye className="h-5 w-5" />}
              </button>
            </div>

            {error && (
              <p className={clsx("text-center text-sm text-red-600 error-shake", animateError && "animate-shake")}>{error}</p> 
            )}

            <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between text-sm">  {/* FIXED: flex-col en mobile, gap-2 para spacing */}
              <label className="flex items-center gap-2">
                <input type="checkbox" className="rounded border-gray-300 text-brand focus:ring-brand" />
                Recordarme
              </label>
              <Link to="/forgot-password" className="text-brand hover:underline">
                ¿Olvidaste tu contraseña?
              </Link>
            </div>

            <button className="btn w-full rounded-lg py-3 text-base font-semibold">  {/* +py-3, text-base */}
              Entrar
            </button>
          </form>

          <p className="text-center text-sm text-gray-500">
            ¿No tienes cuenta? <Link to="/register" className="text-brand font-medium hover:underline">Regístrate</Link>
          </p>
        </div>
      </main>
    </Container>
  );
}

--- frontend/src/pages/Dashboard.tsx ---
import Container from '../components/shared/Container';
import ItemList from '../features/items/ItemList';
import RentalList from '../features/rentals/RentalList';
import Section from '../components/shared/Section';

export default function Dashboard() {
  return (
    <Container>
      <Section title="Mis alquileres">
        <RentalList />
      </Section>

      <Section title="Catálogo público">
        <ItemList />
      </Section>
    </Container>
  );
}


--- frontend/src/pages/Home.tsx ---
/* src/pages/Home.tsx */
import { Link } from 'react-router-dom';
import {
  ArrowRightIcon,
  PlusIcon,
  CloudArrowUpIcon,
  CalendarDaysIcon,
  BanknotesIcon,
  ShieldCheckIcon,  // NEW: Para benefits
  UsersIcon,        // NEW
  GlobeAltIcon,     // NEW
} from '@heroicons/react/24/solid';
import { useEffect, useRef } from 'react';  // NEW: Para animaciones
import clsx from 'clsx';

import Container from '../components/shared/Container';
import Section from '../components/shared/Section';

import Stats from '../components/Home/Stats';
import LogoCloud from '../components/Home/LogoCloud';
import Testimonials from '../components/Home/Testimonials';
import FAQ from '../components/Home/FAQ';

// NEW: Sección Benefits
const Benefits = () => {
  const BENEFITS = [
    { icon: ShieldCheckIcon, title: 'Seguro y confiable', desc: 'Pagos protegidos con Stripe y verificación de usuarios.' },
    { icon: UsersIcon, title: 'Comunidad local', desc: 'Conecta con vecinos y reduce huella ecológica.' },
    { icon: GlobeAltIcon, title: 'Fácil de usar', desc: 'Publica en minutos, reserva al instante.' },
  ];

  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const io = new IntersectionObserver(entries => {
      entries.forEach(e => {
        if (e.isIntersecting) {
          e.target.classList.add('visible');
        }
      });
    }, { threshold: 0.1 });
    Array.from(el.querySelectorAll('.fade-in')).forEach(child => io.observe(child));
    return () => io.disconnect();
  }, []);

  return (
    <Section title="Beneficios">
      <Container>
        <div ref={ref} className="grid gap-8 md:grid-cols-3">
          {BENEFITS.map(({ icon: Icon, title, desc }) => (
            <div key={title} className="fade-in text-center space-y-2 p-6 rounded-lg bg-white shadow-md transition-shadow hover:shadow-lg">
              <Icon className="mx-auto h-12 w-12 text-brand" />
              <h3 className="text-xl font-semibold">{title}</h3>
              <p className="text-gray-600">{desc}</p>
            </div>
          ))}
        </div>
      </Container>
    </Section>
  );
};

const STEPS = [  // Updated: Cards con shadows
  {
    title: 'Publica',
    desc: 'Sube tu producto, ponle precio y límites de uso.',
    icon: CloudArrowUpIcon,
  },
  {
    title: 'Reserva',
    desc: 'Los usuarios pagan la fianza y reservan al instante.',
    icon: CalendarDaysIcon,
  },
  {
    title: 'Gana',
    desc: 'Entregas el ítem, recibes el pago y valoraciones ⭐',
    icon: BanknotesIcon,
  },
];

export default function Home() {
  const stepsRef = useRef<HTMLDivElement>(null);

  useEffect(() => {  // Animación para steps
    const el = stepsRef.current;
    if (!el) return;
    const io = new IntersectionObserver(entries => {
      entries.forEach(e => {
        if (e.isIntersecting) {
          Array.from(e.target.children).forEach((child, i) => {
            child.classList.add('visible');
            (child as HTMLElement).style.transitionDelay = `${i * 0.2}s`;
          });
        }
      });
    }, { threshold: 0.2 });
    io.observe(el);
    return () => io.disconnect();
  }, []);

  return (
    <>
      {/* ---------- HERO (mejorado: gradient bg, animación fade-in) ---------- */}
      <section className="relative isolate overflow-hidden bg-gradient-to-br from-brand to-brand-hover text-white py-32">  {/* +gradient */}
        <span className="pointer-events-none absolute -top-16 left-1/2 -z-10 h-[500px] w-[500px] -translate-x-1/2 rounded-full bg-white/10 blur-3xl animate-pulse" />  {/* +animate-pulse */}

        <Container>
          <div className="flex min-h-[70vh] flex-col items-center justify-center gap-6 py-28 text-center fade-in visible">  {/* +fade-in */}
            <h1 className="max-w-3xl text-balance text-5xl font-extrabold leading-tight md:text-6xl">  {/* +md:text-6xl */}
              Dónde tus cosas <br className="hidden sm:inline" />
              <span className="text-white/80">cambian de mano</span>
            </h1>

            <p className="max-w-xl text-lg/relaxed text-white/90">
              Alquila herramientas, gadgets o equipamiento deportivo y monetiza lo
              que ya tienes. ¡Conecta con tu barrio y ahorra al planeta!
            </p>

            <div className="flex flex-wrap justify-center gap-4">
              <Link to="/dashboard" className="btn inline-flex gap-2">
                Explorar catálogo <ArrowRightIcon className="h-5 w-5" />
              </Link>
              <Link to="/dashboard#add" className="btn--ghost inline-flex gap-2">
                <PlusIcon className="h-5 w-5" />
                Publicar mi primer ítem
              </Link>
            </div>
          </div>
        </Container>

        {/* wave separator (más suave) */}
        <svg
          aria-hidden
          viewBox="0 0 1440 120"
          className="block w-full text-brand"
          preserveAspectRatio="none"
        >
          <path
            d="M0,96L48,106.7C96,117,192,139,288,128C384,117,480,75,576,58.7C672,43,768,53,864,74.7C960,96,1056,128,1152,138.7C1248,149,1344,139,1392,133.3L1440,128L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"
            className="fill-white"
          />
        </svg>
      </section>

      {/* ---------- STATS (ya animado) ---------- */}
      <Stats />

      {/* ---------- LOGO CLOUD (con hover) ---------- */}
      <LogoCloud />

      {/* ---------- BENEFITS (nueva sección) ---------- */}
      <Benefits />

      {/* ---------- CÓMO FUNCIONA (cards con animaciones secuenciales) ---------- */}
      <Section title="¿Cómo funciona?">
        <Container>
          <div ref={stepsRef} className="grid gap-12 md:grid-cols-3">
            {STEPS.map(({ title, desc, icon: Icon }) => (
              <div key={title} className="fade-in text-center space-y-4 p-6 rounded-lg bg-white shadow-md transition-shadow hover:shadow-lg">  {/* +cards */}
                <div className="mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-brand/10">
                  <Icon className="h-6 w-6 text-brand" />
                </div>
                <h3 className="text-xl font-semibold">{title}</h3>
                <p className="text-gray-600">{desc}</p>
              </div>
            ))}
          </div>
        </Container>
      </Section>

      {/* ---------- TESTIMONIALS (mejorado: grid responsivo) ---------- */}
      <Testimonials />

      {/* ---------- FAQ (con iconos y transiciones) ---------- */}
      <FAQ />

      {/* ---------- CTA FINAL (con animación) ---------- */}
      <section className="bg-brand py-16 text-center text-white fade-in">
        <Container>
          <h2 className="mb-6 text-3xl font-bold">
            ¿Listo para estrenar ingresos extra?
          </h2>
          <Link to="/register" className="btn inline-flex gap-2">
            Crear cuenta gratis <ArrowRightIcon className="h-5 w-5" />
          </Link>
        </Container>
      </section>
    </>
  );
}

--- frontend/src/pages/ForgotPassword.tsx ---
import { FormEvent, useState } from "react";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

import Container from "../components/shared/Container";
import { forgot } from "../features/auth/forgot";

export default function ForgotPassword() {
  const [user, setUser] = useState("");
  const [loading, setLoading] = useState(false);
  const nav = useNavigate();

  async function handleSubmit(e: FormEvent) {
    e.preventDefault();
    try {
      setLoading(true);
      const token = await forgot(user.trim());
      toast.success("Token generado: revisa tu correo (demo: consola)");
      console.info("🔑 reset_token =", token);   // ← visible en consola dev
      nav(`/reset-password?token=${token}`);
    } catch (err: any) {
      setLoading(false);
      const msg =
        err?.response?.status === 404
          ? "Usuario no encontrado"
          : err?.response?.data?.detail ?? "Error inesperado";
      toast.error(msg);
    }
  }

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <form
          onSubmit={handleSubmit}
          className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card"
        >
          <h1 className="text-center text-2xl font-bold">
            Restablecer contraseña
          </h1>

          <input
            value={user}
            onChange={e => setUser(e.target.value)}
            placeholder="Nombre de usuario"
            className="form-input w-full"
            required
          />

          <button className="btn w-full" disabled={loading}>
            {loading ? "Enviando…" : "Generar enlace"}
          </button>
        </form>
      </main>
    </Container>
  );
}


--- frontend/src/pages/ResetPassword.tsx ---
// src/pages/ResetPassword.tsx
import { useSearchParams, useNavigate, Link } from "react-router-dom";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import toast from "react-hot-toast";
import { useEffect, useState } from "react";  // +useState for toggle
import { FaEye, FaEyeSlash } from "react-icons/fa";

import Container from "../components/shared/Container";
import { reset } from "../features/auth/reset";
import clsx from "clsx";
import zxcvbn from "zxcvbn";  // +strength

const schema = z
  .object({
    password: z.string().min(8, "Mínimo 8 caracteres"),
    confirm: z.string()
  })
  .refine(d => d.password === d.confirm, {
    message: "No coincide",
    path: ["confirm"]
  });

type Form = z.infer<typeof schema>;

export default function ResetPassword() {
  const [params] = useSearchParams();
  const tokenQP = params.get("token") ?? "";
  const nav = useNavigate();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting }
  } = useForm<Form>({
    resolver: zodResolver(schema)
  });

  const pwd = watch("password", "");
  const [showPwd, setShowPwd] = useState(false);  // NEW: Toggle

  const onSubmit = async (data: Form) => {
    try {
      await reset(tokenQP, data.password);
      toast.success("Contraseña actualizada");
      nav("/login");
    } catch (err: any) {
      toast.error(err?.response?.data?.detail ?? "Token inválido o expirado.");
    }
  };

  useEffect(() => {  // Fade-in
    const timer = setTimeout(() => document.querySelector('.form-container')?.classList.add('visible'), 100);
    return () => clearTimeout(timer);
  }, []);

  const strength = zxcvbn(pwd);
  const strengthColors = ['bg-red-500', 'bg-orange-400', 'bg-yellow-400', 'bg-lime-500', 'bg-green-600'];

  return (
    <Container>
      <main className="flex min-h-screen items-center justify-center bg-gray-50">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="w-full max-w-md space-y-8 rounded-2xl bg-white p-10 shadow-2xl fade-in form-container transition-opacity duration-500"  // FIXED: +fade-in
        >
          <h1 className="text-center text-3xl font-bold text-gray-900">Nueva contraseña</h1>

          <div className="relative">
            <label htmlFor="password" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Contraseña</label>
            <input id="password" type={showPwd ? "text" : "password"} {...register("password")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand pr-10" placeholder=" " />
            <button type="button" onClick={() => setShowPwd(!showPwd)} className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-brand">
              {showPwd ? <FaEyeSlash className="h-5 w-5" /> : <FaEye className="h-5 w-5" />}
            </button>
          </div>

          {pwd && (
            <div className="space-y-1">
              <div className="h-2 w-full overflow-hidden rounded bg-gray-200">
                <div style={{ width: `${(strength.score + 1) * 20}%` }} className={clsx("h-full transition-all", strengthColors[strength.score])} />
              </div>
              <p className="text-xs text-gray-500">{strength.feedback.suggestions.join(' ')}</p>
            </div>
          )}
          {errors.password && <p className="text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.password.message}</p>}

          <div className="relative">
            <label htmlFor="confirm" className="absolute -top-2 left-3 bg-white px-1 text-xs text-gray-600">Repite contraseña</label>
            <input id="confirm" type={showPwd ? "text" : "password"} {...register("confirm")} className="form-input w-full rounded-lg border-gray-300 focus:border-brand focus:ring-brand pr-10" placeholder=" " />
          </div>
          {errors.confirm && <p className="text-xs text-red-600 flex items-center gap-1"><span>⚠️</span>{errors.confirm.message}</p>}

          <button className="btn w-full rounded-lg py-3 text-base font-semibold" disabled={isSubmitting}>
            {isSubmitting ? "Guardando…" : "Cambiar contraseña"}
          </button>

          <p className="text-center text-sm text-gray-500">
            ¿Recordaste tu clave? <Link to="/login" className="text-brand font-medium hover:underline">Iniciar sesión</Link>
          </p>
        </form>
      </main>
    </Container>
  );
}

--- frontend/src/components/ui/PaymentModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/PaymentModal.tsx                                        */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  PaymentElement,
  useElements,
  useStripe,
} from "@stripe/react-stripe-js";
import { ArrowPathIcon, XMarkIcon } from "@heroicons/react/24/outline";
import toast from "react-hot-toast";
import { useQueryClient } from "@tanstack/react-query";

/* ⚠️  usa tu clave pública de Stripe (env var VITE_STRIPE_PK) */
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PK!);

type Props = {
  open: boolean;
  clientSecret: string;
  onClose: () => void;
  onSuccess: () => void;
};

export default function PaymentModal(props: Props) {
  const { open, clientSecret, onClose, onSuccess } = props;

  if (!clientSecret) return null;

  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-[60]">
        {/* ---- backdrop ---- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---- panel ---- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="w-full max-w-md overflow-hidden rounded-xl bg-white shadow-xl">
              <header className="flex items-center justify-between border-b px-5 py-4">
                <Dialog.Title className="text-base font-semibold">
                  Pago de fianza
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </header>

              <Elements
                stripe={stripePromise}
                options={{ clientSecret, appearance: { theme: "stripe" } }}
              >
                <CheckoutForm onCancel={onClose} onSuccess={onSuccess} />
              </Elements>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}

/* ------------------------ formulario interno ----------------------------- */
function CheckoutForm({
  onCancel,
  onSuccess,
}: {
  onCancel: () => void;
  onSuccess: () => void;
}) {
  const stripe = useStripe();
  const elements = useElements();
  const [processing, setProcessing] = useState(false);
  const qc = useQueryClient();  // ← invalidate cache

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    setProcessing(true);
    const { error } = await stripe.confirmPayment({
      elements,
      redirect: "if_required",
    });

    setProcessing(false);

    if (error) {
      toast.error(error.message ?? "No se pudo procesar el pago.");
    } else {
      /* 🔄 refrescar lista de alquileres */
      qc.invalidateQueries({ queryKey: ["rentals"] });
      onSuccess(); // ← callback del padre
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-6">
      {/* Tarjeta / Wallets / iDEAL, etc. */}
      <PaymentElement />

      <div className="flex items-center justify-end gap-3">
        <button
          type="button"
          onClick={onCancel}
          className="btn-secondary px-4 py-2 text-sm"
        >
          Cancelar
        </button>

        <button
          disabled={!stripe || !elements || processing}
          className="btn px-6 py-2 text-sm"
        >
          {processing ? (
            <>
              <ArrowPathIcon className="mr-2 h-5 w-5 animate-spin" />
              Procesando…
            </>
          ) : (
            "Pagar y confirmar"
          )}
        </button>
      </div>
    </form>
  );
}


--- frontend/src/components/ui/SkeletonCard.tsx ---
export default function SkeletonCard() {
  return (
    <article
      className="
        flex flex-col overflow-hidden rounded-lg bg-white shadow-card
        animate-pulse
      "
    >
      {/* zona de imagen (mantiene proporción 4:3) */}
      <div className="aspect-[4/3] w-full bg-gray-200" />

      {/* zona de texto */}
      <div className="space-y-2 p-4">
        <div className="h-4 w-2/3 rounded bg-gray-200" />
        <div className="h-4 w-1/3 rounded bg-gray-200" />
      </div>
    </article>
  );
}


--- frontend/src/components/ui/LazyImage.tsx ---
import { useState } from 'react';

type Props = {
  src: string;
  alt: string;
  className?: string;
  /** ancho estimado para el atributo `sizes` (ej. "100vw", "50vw") */
  sizes?: string;
};

export default function LazyImage({
  src,
  alt,
  className = '',
  sizes = '100vw'
}: Props) {
  const [loaded, setLoaded] = useState(false);

  /* genera srcset (320-640-960 px) */
  const srcset = [320, 640, 960]
    .map(w => `${src.replace(/(\?.*)?$/, '')}?w=${w} ${w}w`)
    .join(', ');

  return (
    <img
      src={src}
      srcSet={srcset}
      sizes={sizes}
      loading="lazy"
      decoding="async"                    /* 🆕 */
      onLoad={() => setLoaded(true)}
      className={`${className} transition-opacity duration-500 ${
        loaded ? 'opacity-100' : 'opacity-0'
      }`}
      alt={alt}
    />
  );
}


--- frontend/src/components/ui/ItemCard.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemCard.tsx                                            */
/* -------------------------------------------------------------------------- */
import { useState } from "react";
import { HeartIcon, EyeIcon } from "@heroicons/react/24/solid";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { resolveImage } from "../../utils";
import LazyImage from "./LazyImage";
import ItemDetailModal from "./ItemDetailModal";

export default function ItemCard({ item }: { item: Item }) {
  const [open, setOpen] = useState(false);

  /* -------- portada (1ª del array o la legacy) -------- */
  const cover = item.image_urls?.[0] ?? item.image_url;

  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`
  );

  return (
    <>
      <article
        onClick={() => setOpen(true)}
        className="flex cursor-pointer flex-col overflow-hidden rounded-lg bg-surface shadow-card transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover"
      >
        {/* ---------- Foto ---------- */}
        <div className="relative">
          <LazyImage
            src={imgSrc}
            alt={item.name}
            className="aspect-[4/3] w-full object-contain p-2"
          />

          {!item.available && (
            <span className="absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white">
              Alquilado
            </span>
          )}

          {/* acciones rápidas */}
          <div className="absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100">
            <IconBtn title="Vista rápida">
              <EyeIcon className="h-5 w-5" />
            </IconBtn>
            <IconBtn title="Favorito">
              <HeartIcon className="h-5 w-5" />
            </IconBtn>
          </div>
        </div>

        {/* ---------- Info ---------- */}
        <div className="flex flex-1 flex-col gap-2 px-4 pb-4">
          <h3 className="line-clamp-1 text-lg font-semibold">{item.name}</h3>

          {item.description && (
            <p className="line-clamp-2 text-sm text-gray-600">
              {item.description}
            </p>
          )}

          <div className="mt-auto flex items-center justify-between">
            <p className="text-base font-bold text-brand">
              {item.price_per_h.toFixed(2)} €/h
            </p>
            <span
              className={clsx(
                "badge",
                item.available ? "badge--ok" : "badge--danger"
              )}
            >
              {item.available ? "Disponible" : "Alquilado"}
            </span>
          </div>
        </div>
      </article>

      {/* ---------- Modal de detalle ---------- */}
      <ItemDetailModal open={open} onClose={() => setOpen(false)} item={item} />
    </>
  );
}

/* -------------------------------------------------------------------------- */
/*                                 Helpers                                    */
/* -------------------------------------------------------------------------- */
function IconBtn({
  children,
  title
}: {
  children: React.ReactNode;
  title: string;
}) {
  return (
    <button
      type="button"
      title={title}
      onClick={e => e.stopPropagation()}
      className="rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white"
    >
      {children}
    </button>
  );
}


--- frontend/src/components/ui/SearchBar.tsx ---
import { useForm } from 'react-hook-form';

type Props = { onSubmit: (q: URLSearchParams) => void };

export default function SearchBar({ onSubmit }: Props) {
  const { register, handleSubmit, reset } = useForm<{
    q: string;
    min: number | undefined;
    max: number | undefined;
  }>({ defaultValues: { q: '', min: undefined, max: undefined } });

  return (
    <form
      onSubmit={handleSubmit(values => {
        const params = new URLSearchParams();
        if (values.q) params.set('name', values.q);
        if (values.min) params.set('min_price', values.min.toString());
        if (values.max) params.set('max_price', values.max.toString());
        onSubmit(params);
      })}
      className="flex flex-wrap items-end gap-3"
    >
      <input
        {...register('q')}
        placeholder="Buscar producto…"
        className="form-input w-52"
      />
      <input
        {...register('min', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ mínimo"
        className="form-input w-32"
      />
      <input
        {...register('max', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ máximo"
        className="form-input w-32"
      />
      <button className="btn">Filtrar</button>
      <button
        type="button"
        onClick={() => {
          reset();
          onSubmit(new URLSearchParams());
        }}
        className="btn--ghost"
      >
        Limpiar
      </button>
    </form>
  );
}


--- frontend/src/components/ui/ItemDetailModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemDetailModal.tsx                                     */
/*  – Integra reserva vía micro-servicio **rentals** + Stripe                 */
/* -------------------------------------------------------------------------- */
import { Fragment, useState, useEffect } from "react";  // ### UPDATED: +useEffect
import { Dialog, Transition } from "@headlessui/react";
import {
  XMarkIcon,
  StarIcon,
  ShieldCheckIcon,
  ClockIcon,
  MapPinIcon,
  CheckBadgeIcon,
  UserCircleIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";
import { FaFacebookF, FaTwitter, FaWhatsapp } from "react-icons/fa";
import toast from "react-hot-toast";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { reserve } from "../../features/rentals/reserve";
import { useAuth } from "../../hooks/useAuth";
import { resolveImage } from "../../utils";

import LazyImage from "./LazyImage";
import PaymentModal from "./PaymentModal";

// ### NEW: Imports para calendario
import { DayPicker } from 'react-day-picker';
import 'react-day-picker/dist/style.css';
import { format, isWithinInterval, parseISO, isBefore, isAfter } from 'date-fns';
import { api } from '../../api';  // Para fetch de availability

/* ------------------- helpers (Rating, Feature, Description) --------------- */

const Rating = ({ value }: { value: number }) => (
  <div className="flex items-center gap-1">
    {Array.from({ length: 5 }).map((_, i) => (
      <StarIcon
        key={i}
        className={clsx(
          "h-4 w-4",
          i < value ? "fill-amber-400 stroke-amber-400" : "stroke-gray-300"
        )}
      />
    ))}
    <span className="ml-1 text-xs text-gray-500">({value.toFixed(1)})</span>
  </div>
);

const Feature = ({
  icon: Icon,
  text,
}: {
  icon: (p: any) => JSX.Element;
  text: string;
}) => (
  <li className="flex items-center gap-2">
    <Icon className="h-4 w-4 shrink-0 text-brand" />
    {text}
  </li>
);

const Description = ({ text }: { text: string }) => {
  const bullets = text
    .split(/(?:\u2022|\n)/) // • o salto de línea
    .map(t => t.trim())
    .filter(Boolean);

  if (bullets.length > 1) {
    return (
      <ul className="list-disc space-y-1 pl-5 text-sm leading-relaxed text-gray-700">
        {bullets.map((b, i) => (
          <li key={i}>{b}</li>
        ))}
      </ul>
    );
  }
  return (
    <p className="whitespace-pre-line text-sm leading-relaxed text-gray-700">
      {text}
    </p>
  );
};

/* -------------------------------------------------------------------------- */

type Props = { open: boolean; onClose: () => void; item: Item | null };

export default function ItemDetailModal({ open, onClose, item }: Props) {
  if (!item) return null;

  /* ---------- galería ---------- */
  const gallery =
    item.image_urls?.length
      ? item.image_urls
      : [
          resolveImage(
            item.image_url,
            `https://source.unsplash.com/800x600/?${encodeURIComponent(
              item.name
            )}`
          ),
        ];
  const [active, setActive] = useState(0);

  /* ---------- specs demo ---------- */
  const SPECS: Record<string, string | number> = {
    Potencia: "600 W",
    Peso: "1,8 kg",
    Velocidad: "0-2 800 rpm",
  };

  /* ---------- ### NEW: Calendario y rangos ocupados ---------- */
  const [occupiedRanges, setOccupiedRanges] = useState<{ start_at: string; end_at: string }[]>([]);
  const [selectedRange, setSelectedRange] = useState<{ from: Date; to?: Date } | undefined>();
  const [loadingRanges, setLoadingRanges] = useState(true);

  useEffect(() => {
    if (open && item.id) {
      // Fetch rangos ocupados de rentals
      api.get(`/rentals/item/${item.id}/availability`)
        .then(res => {
          setOccupiedRanges(res.data);
          setLoadingRanges(false);
        })
        .catch(() => {
          toast.error('No se pudo cargar la disponibilidad');
          setLoadingRanges(false);
        });
    }
  }, [open, item.id]);

  // Convertir occupiedRanges a Date ranges para DayPicker
  const disabledIntervals = occupiedRanges.map(r => ({
    from: parseISO(r.start_at),
    to: parseISO(r.end_at),
  }));

  // Custom onSelect: Validar no overlap con disabled
  const handleSelect = (range: { from: Date; to?: Date } | undefined) => {
    if (!range || !range.to) {
      setSelectedRange(range);
      return;
    }

    // Chequeo de overlap
    const hasOverlap = disabledIntervals.some(interval => {
      return (
        isWithinInterval(range.from, interval) ||
        isWithinInterval(range.to, interval) ||
        (isBefore(range.from, interval.from) && isAfter(range.to, interval.to))
      );
    });

    if (hasOverlap) {
      toast.error('El rango seleccionado incluye fechas no disponibles. Por favor, elige otro.');
      setSelectedRange(undefined);  // Reset
    } else {
      setSelectedRange(range);
    }
  };

  /* ---------- reserva ---------- */
  const { token } = useAuth();
  const [loading, setLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState<string | null>(null);

  const handleReserve = async () => {
    if (!token) return toast.error("Debes iniciar sesión primero");
    if (!item.available)
      return toast.error("Este ítem no está disponible actualmente");
    if (!selectedRange?.from || !selectedRange.to)
      return toast.error("Selecciona un rango de fechas válido");

    try {
      setLoading(true);
      const { clientSecret } = await reserve(item.id, selectedRange.from, selectedRange.to); // ### UPDATED: Pasa fechas
      setLoading(false);
      setClientSecret(clientSecret); // abre modal de pago
    } catch (err: any) {
      setLoading(false);
      const msg =
        err?.response?.data?.detail ??
        "No se pudo reservar, inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* ---------------------------------------------------------------------- */
  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-50">
        {/* ---- backdrop ---- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---- wrapper ---- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-6xl max-h-[95vh] flex-col overflow-hidden rounded-xl bg-white shadow-xl">
              {/* ---------------- Header ---------------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  {item.name}
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </header>

              {/* ---------------- Body ---------------- */}
              <section className="flex flex-1 flex-col gap-8 overflow-y-auto p-6 lg:flex-row">
                {/* ---------- Galería ---------- */}
                <div className="lg:w-1/2">
                  <div className="aspect-video overflow-hidden rounded-lg border">
                    <LazyImage
                      src={gallery[active]}
                      alt={item.name}
                      className="h-full w-full object-contain"
                      sizes="(min-width:1024px) 50vw, 90vw"
                    />
                  </div>

                  {gallery.length > 1 && (
                    <div className="mt-3 flex gap-2 overflow-x-auto">
                      {gallery.map((src, i) => (
                        <button
                          key={i}
                          onClick={() => setActive(i)}
                          className={clsx(
                            "shrink-0 overflow-hidden rounded-md border",
                            active === i && "ring-2 ring-brand"
                          )}
                        >
                          <LazyImage
                            src={src}
                            alt=""
                            className="h-16 w-24 object-cover"
                            sizes="96px"
                          />
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* ---------- Ficha ---------- */}
                <div className="flex flex-1 flex-col gap-6">
                  <div className="flex flex-col gap-1 sm:flex-row sm:items-center sm:justify-between">
                    <p className="text-3xl font-bold text-brand">
                      {item.price_per_h.toFixed(2)} €/h
                    </p>
                    <Rating value={4} />
                  </div>

                  {item.description ? (
                    <Description text={item.description} />
                  ) : (
                    <p className="text-sm text-gray-500">Sin descripción.</p>
                  )}

                  <table className="mt-2 w-full max-w-sm text-sm">
                    <tbody>
                      {Object.entries(SPECS).map(([k, v]) => (
                        <tr key={k} className="border-b last:border-0">
                          <td className="py-1 pr-4 text-gray-600">{k}</td>
                          <td className="py-1 font-medium">{v}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>

                  {!!item.categories?.length && (
                    <div className="flex flex-wrap gap-2">
                      {item.categories.map(c => (
                        <span
                          key={c.id}
                          className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                        >
                          {c.name}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* vendedor (placeholder) */}
                  <div className="flex items-center gap-3 rounded-md bg-gray-50 p-4">
                    <UserCircleIcon className="h-10 w-10 text-gray-400" />
                    <div className="flex-1">
                      <p className="flex items-center gap-1 text-sm font-semibold">
                        Juan P.
                        <CheckBadgeIcon className="h-4 w-4 text-emerald-500" />
                      </p>
                      <p className="text-xs text-gray-500">
                        Propietario verificado
                      </p>
                    </div>
                  </div>

                  <p className="flex items-center gap-1 text-xs text-gray-500">
                    <MapPinIcon className="h-4 w-4" />
                    Recogida en Madrid 28010
                  </p>

                  <ul className="space-y-1 text-sm">
                    <Feature
                      icon={ShieldCheckIcon}
                      text="Pago seguro con fianza"
                    />
                    <Feature
                      icon={ClockIcon}
                      text="Cancelación gratis hasta 12 h antes"
                    />
                  </ul>

                  {/* ### NEW: Calendario de disponibilidad */}
                  <div className="mt-4">
                    <h3 className="text-lg font-medium mb-2">Selecciona fechas</h3>
                    {loadingRanges ? (
                      <p className="text-gray-500">Cargando disponibilidad...</p>
                    ) : (
                      <DayPicker
                        mode="range"
                        selected={selectedRange}
                        onSelect={handleSelect}  // Custom handler con validación
                        disabled={disabledIntervals}
                        numberOfMonths={2}
                        modifiers={{ booked: disabledIntervals }}
                        modifiersStyles={{ booked: { backgroundColor: 'rgba(255, 0, 0, 0.2)', color: 'red' } }}  // Estilo para ocupados
                        fromDate={new Date()}  // No permite fechas pasadas
                      />
                    )}
                    {selectedRange?.from && selectedRange.to && (
                      <p className="mt-2 text-sm text-gray-700">
                        Reservando desde {format(selectedRange.from, 'PPP')} hasta {format(selectedRange.to, 'PPP')}
                      </p>
                    )}
                  </div>

                  {/* redes */}
                  <div className="mt-3 flex gap-4">
                    <Social icon={FaFacebookF} label="Facebook" />
                    <Social icon={FaTwitter} label="Twitter" />
                    <Social icon={FaWhatsapp} label="WhatsApp" />
                  </div>

                  {/* --------- LOGOS de pago --------- */}
                  <div className="mt-6 flex justify-center gap-10 opacity-80">
                    <img
                      src="/src/assets/payments/visa.svg"
                      alt="Visa"
                      className="h-8 w-auto md:h-10"
                    />
                    <img
                      src="/src/assets/payments/mastercard.svg"
                      alt="Mastercard"
                      className="h-8 w-auto md:h-10"
                    />
                    <img
                      src="/src/assets/payments/paypal.svg"
                      alt="PayPal"
                      className="h-8 w-auto md:h-10"
                    />
                  </div>

                  {/* CTA – XL */}
                  <button
                    onClick={handleReserve}
                    disabled={loading || loadingRanges || !selectedRange?.to}
                    className="btn mt-4 w-full py-4 text-lg lg:max-w-xl"
                  >
                    {loading ? (
                      <>
                        <ArrowPathIcon className="mr-3 h-6 w-6 animate-spin" />
                        Reservando…
                      </>
                    ) : (
                      "Reservar ahora"
                    )}
                  </button>
                </div>
              </section>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>

      {/* ─────────── Modal de pago Stripe ─────────── */}
      <PaymentModal
        open={Boolean(clientSecret)}
        clientSecret={clientSecret ?? ""}
        onClose={() => setClientSecret(null)}
        onSuccess={() => {
          toast.success("Reserva confirmada y fianza retenida 🎉");
          onClose();
        }}
      />
    </Transition>
  );
}

/* --------------------------- Social button ------------------------------- */
function Social({
  icon: Icon,
  label,
}: {
  icon: (p: any) => JSX.Element;
  label: string;
}) {
  return (
    <a
      href="#share"
      aria-label={`Compartir en ${label}`}
      className="rounded-full bg-gray-100 p-2 text-gray-600 transition-colors hover:bg-gray-200"
    >
      <Icon className="h-4 w-4" />
    </a>
  );
}

--- frontend/src/components/ui/SocialButton.tsx ---
// src/components/ui/SocialButton.tsx
import { IconType } from 'react-icons';
import clsx from 'clsx';

type Props = {
  icon: IconType;
  label: string;
  provider: 'google' | 'github';
};

export default function SocialButton({ icon: Icon, label, provider }: Props) {
  return (
    <a
      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */
      className={clsx(
        'btn flex w-full items-center justify-center gap-2',
        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',
        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'
      )}
    >
      <Icon className="h-5 w-5" />
      {label}
    </a>
  );
}


--- frontend/src/components/ui/QuickViewModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/QuickViewModal.tsx                                      */
/*  – permite reservar el ítem vía micro-servicio **rentals** + Stripe        */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import {
  XMarkIcon,
  StarIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";
import toast from "react-hot-toast";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { reserve } from "../../features/rentals/reserve";
import { useAuth } from "../../hooks/useAuth";
import LazyImage from "./LazyImage";
import { resolveImage } from "../../utils";
import PaymentModal from "./PaymentModal";

type Props = {
  open: boolean;
  onClose: () => void;
  item: Item | null;
};

export default function QuickViewModal({ open, onClose, item }: Props) {
  /* ─────────── guard clause ─────────── */
  if (!item) return null;

  /* portada (1ª imagen o fallback) */
  const cover = item.image_urls?.[0] ?? item.image_url;
  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`
  );

  /* ─────────── auth + reserva ─────────── */
  const { token } = useAuth();
  const [loading, setLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState<string | null>(null);

  /* reserva de **1 h** a partir de “ya” (demo) */
  const handleReserve = async () => {
    if (!token) return toast.error("Debes iniciar sesión");
    if (!item.available)
      return toast.error("Este ítem no está disponible ahora mismo");

    try {
      setLoading(true);
      const { clientSecret } = await reserve(item.id);
      setLoading(false);
      setClientSecret(clientSecret); // abre modal Stripe
    } catch (err: any) {
      setLoading(false);
      const msg =
        err?.response?.data?.detail ??
        "No se pudo crear la reserva. Inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* ────────────────── UI ────────────────── */
  return (
    <>
      <Transition show={open} as={Fragment}>
        <Dialog onClose={onClose} className="relative z-50">
          {/* ---------- Backdrop ---------- */}
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-150"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
          </Transition.Child>

          {/* ---------- Panel ---------- */}
          <div className="fixed inset-0 grid place-items-center p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-200"
              enterFrom="scale-95 opacity-0"
              enterTo="scale-100 opacity-100"
              leave="ease-in duration-150"
              leaveFrom="scale-100 opacity-100"
              leaveTo="scale-95 opacity-0"
            >
              <Dialog.Panel className="flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden rounded-xl bg-white shadow-xl">
                {/* ───────── header ───────── */}
                <header className="flex items-center justify-between border-b p-4">
                  <Dialog.Title className="text-lg font-semibold">
                    {item.name}
                  </Dialog.Title>
                  <button
                    onClick={onClose}
                    className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  >
                    <XMarkIcon className="h-5 w-5" />
                  </button>
                </header>

                {/* ───────── body ───────── */}
                <section className="grid gap-6 overflow-y-auto p-6 md:grid-cols-2">
                  {/* imagen */}
                  <div className="flex items-center justify-center">
                    <LazyImage
                      src={imgSrc}
                      alt={item.name}
                      className="w-full max-h-[60vh] rounded-lg object-contain"
                    />
                  </div>

                  {/* info */}
                  <div className="flex flex-col gap-4">
                    <p className="text-2xl font-bold text-brand">
                      {item.price_per_h.toFixed(2)} €/h
                    </p>

                    {/* rating provisional */}
                    <div className="flex items-center gap-1">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <StarIcon
                          key={i}
                          className={clsx(
                            "h-5 w-5",
                            i < 4
                              ? "fill-amber-400 stroke-amber-400"
                              : "stroke-gray-300"
                          )}
                        />
                      ))}
                      <span className="ml-1 text-sm text-gray-500">(4,0)</span>
                    </div>

                    {item.description ? (
                      <p className="prose max-w-none text-sm leading-relaxed">
                        {item.description}
                      </p>
                    ) : (
                      <p className="text-sm text-gray-500">Sin descripción.</p>
                    )}

                    {!!item.categories?.length && (
                      <div className="flex flex-wrap gap-2">
                        {item.categories.map(c => (
                          <span
                            key={c.id}
                            className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                          >
                            {c.name}
                          </span>
                        ))}
                      </div>
                    )}

                    {/* ───────── CTA ───────── */}
                    <button
                      onClick={handleReserve}
                      disabled={loading}
                      className="btn mt-auto w-full"
                    >
                      {loading ? (
                        <>
                          <ArrowPathIcon className="mr-2 h-5 w-5 animate-spin" />
                          Reservando…
                        </>
                      ) : (
                        "Reservar ahora"
                      )}
                    </button>
                  </div>
                </section>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition>

      {/* ───── modal Stripe para introducir la tarjeta ───── */}
      <PaymentModal
        open={Boolean(clientSecret)}
        clientSecret={clientSecret ?? ""}
        onClose={() => setClientSecret(null)}
        onSuccess={() => {
          toast.success("Reserva confirmada y fianza retenida 🎉");
          onClose();
        }}
      />
    </>
  );
}


--- frontend/src/components/shared/Section.tsx ---
type Props = {
  title?: string;
  children: React.ReactNode;
  id?: string;
};

export default function Section({ title, children, id }: Props) {
  return (
    <section id={id} className="space-y-6 py-16">
      {title && (
        <h2 className="text-center text-3xl font-bold tracking-tight">{title}</h2>
      )}
      {children}
    </section>
  );
}


--- frontend/src/components/shared/Container.tsx ---
export default function Container({ children }: { children: React.ReactNode }) {
  return <div className="container">{children}</div>;
}


--- frontend/src/components/layout/Footer.tsx ---
export default function Footer() {
  return (
    <footer className="mt-24 border-t bg-white py-12 text-center text-sm text-gray-500">
      Rental‑MVP © {new Date().getFullYear()} · Hecho con ❤ en FastAPI + React
    </footer>
  );
}


--- frontend/src/components/layout/Header.tsx ---
// src/components/layout/Header.tsx
import { Link, NavLink } from 'react-router-dom';
import { Disclosure } from '@headlessui/react';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';
import logo from '../../assets/logo.png';
import { useAuth } from '../../hooks/useAuth';

export default function Header() {
  const { token, logout } = useAuth();

  const links = token
    ? [
        { to: '/dashboard', label: 'Dashboard' },
        { label: 'Salir', action: logout }
      ]
    : [{ to: '/login', label: 'Login' }];

  return (
    <Disclosure
      as="header"
      className="
        sticky top-0 z-40 w-full border-b bg-white/80
        backdrop-blur shadow-sm supports-backdrop-blur:bg-white/60
      "
    >
      {({ open }) => (
        <>
          {/* ----------------------- Barra principal ----------------------- */}
          <div className="container mx-auto flex items-center justify-between py-4 md:py-5">
            {/* ---------- Logo (aún más grande) ---------- */}
            <Link to="/" aria-label="Inicio" className="flex items-center gap-2">
              <img
                src={logo}
                alt="Logo Rental-MVP"
                className="h-16 w-auto select-none md:h-20 lg:h-26" /* antes: 12-16-20 */
                decoding="async"
              />
              <span className="sr-only">Rental-MVP</span>
            </Link>

            {/* ---------- Navegación desktop ---------- */}
            <nav className="hidden gap-10 text-base font-semibold text-gray-700 md:flex">
              {links.map(({ to, label, action }) =>
                action ? (
                  <button
                    key={label}
                    onClick={action}
                    className="transition-colors hover:text-brand"
                  >
                    {label}
                  </button>
                ) : (
                  <NavLink
                    key={label}
                    to={to!}
                    className={({ isActive }) =>
                      `transition-colors hover:text-brand ${
                        isActive ? 'text-brand' : ''
                      }`
                    }
                  >
                    {label}
                  </NavLink>
                )
              )}
            </nav>

            {/* ---------- Botón hamburguesa (más grande) ---------- */}
            <Disclosure.Button
              className="rounded-md p-2 text-gray-700 hover:bg-gray-100 focus:outline-none md:hidden"
              aria-label="Abrir menú"
            >
              {open ? (
                <XMarkIcon className="h-10 w-10" />   
              ) : (
                <Bars3Icon className="h-10 w-10" />  
              )}
            </Disclosure.Button>
          </div>

          {/* ----------------------- Panel móvil ------------------------- */}
          <Disclosure.Panel className="border-t bg-white/95 backdrop-blur md:hidden">
            <nav className="container mx-auto flex flex-col gap-5 py-5 text-base font-medium text-gray-700">
              {links.map(({ to, label, action }) =>
                action ? (
                  <button
                    key={label}
                    onClick={action}
                    className="text-left transition-colors hover:text-brand"
                  >
                    {label}
                  </button>
                ) : (
                  <NavLink
                    key={label}
                    to={to!}
                    className={({ isActive }) =>
                      `transition-colors hover:text-brand ${
                        isActive ? 'text-brand' : ''
                      }`
                    }
                  >
                    {label}
                  </NavLink>
                )
              )}
            </nav>
          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}


--- frontend/src/components/Home/FAQ.tsx ---
/* src/components/Home/FAQ.tsx */
import { Disclosure, Transition } from '@headlessui/react';  // +Transition
import { ChevronUpIcon } from '@heroicons/react/24/outline';
import Container from '../shared/Container';

const FAQS = [
  ['¿Cómo se gestionan los pagos?', 'Usamos Stripe Connect para retener la fianza y liberar el pago una vez devuelto el ítem.'],
  ['¿Qué pasa si mi herramienta se daña?', 'Dispones de un seguro opcional a todo riesgo y sistema de valoraciones para vetar a malos usuarios.'],
  ['¿Puedo cancelar una reserva?', 'Sí, hasta 12 h antes sin penalización.'],
  ['¿Hay comisión?', 'Solo cobramos un 8 % al propietario cuando se confirma el alquiler.']
];

export default function FAQ() {
  return (
    <section className="bg-gray-50 py-16">
      <Container>
        <h2 className="mb-8 text-center text-3xl font-bold">Preguntas frecuentes</h2>

        <div className="mx-auto max-w-3xl space-y-4">
          {FAQS.map(([q, a]) => (
            <Disclosure key={q}>
              {({ open }) => (
                <>
                  <Disclosure.Button className="flex w-full items-center justify-between rounded-md bg-white px-4 py-3 text-left text-sm font-medium shadow transition-colors hover:bg-gray-50">
                    {q}
                    <ChevronUpIcon
                      className={`h-5 w-5 transition-transform duration-300 ${open ? 'rotate-180' : ''}`}
                    />
                  </Disclosure.Button>
                  <Transition
                    show={open}
                    enter="transition duration-200 ease-out"
                    enterFrom="transform scale-y-95 opacity-0"
                    enterTo="transform scale-y-100 opacity-100"
                    leave="transition duration-150 ease-in"
                    leaveFrom="transform scale-y-100 opacity-100"
                    leaveTo="transform scale-y-95 opacity-0"
                  >
                    <Disclosure.Panel className="px-4 pt-2 pb-4 text-sm text-gray-600">
                      {a}
                    </Disclosure.Panel>
                  </Transition>
                </>
              )}
            </Disclosure>
          ))}
        </div>
      </Container>
    </section>
  );
}

--- frontend/src/components/Home/Stats.tsx ---
/* src/components/Home/Stats.tsx */
import { useEffect, useRef, useState } from 'react';
import Container from '../shared/Container';

const DATA = [
  { label: 'Ítems publicados', value: 3124 },
  { label: 'Usuarios registrados', value: 857 },
  { label: '€ ahorrados', value: 24367 }
];

export default function Stats() {
  const ref = useRef<HTMLDivElement>(null);
  const [visible, setVisible] = useState(false);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const io = new IntersectionObserver(
      ([e]) => e.isIntersecting && setVisible(true),
      { threshold: 0.4 }
    );
    io.observe(el);
    return () => io.disconnect();
  }, []);

  return (
    <section ref={ref} className="bg-white py-12">
      <Container>
        <div className="grid gap-8 sm:grid-cols-3">
          {DATA.map(({ label, value }) => (
            <div key={label} className="text-center">
              <p
                className="text-4xl font-extrabold text-brand"
                style={visible ? { '--target': value, animation: 'count 2s ease-out forwards' } as React.CSSProperties : {}}
              >
                {visible ? '' : '0'}
              </p>
              <p className="mt-2 text-sm font-medium text-gray-600">{label}</p>
            </div>
          ))}
        </div>
      </Container>
    </section>
  );
}

--- frontend/src/components/Home/LogoCloud.tsx ---
/* src/components/Home/LogoCloud.tsx */
import Container from '../shared/Container';

const LOGOS = [
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Bosch',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Makita',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Black+%26+Decker',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Dewalt',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=GoPro',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Xiaomi'
];

export default function LogoCloud() {
  return (
    <section className="bg-gray-50 py-12">
      <Container>
        <div className="grid grid-cols-2 items-center gap-8 opacity-70 sm:grid-cols-3 lg:grid-cols-6">
          {LOGOS.map(src => (
            <img
              key={src}
              src={src}
              alt=""
              className="mx-auto h-12 w-auto object-contain grayscale transition-all duration-300 hover:grayscale-0 hover:scale-105"
              loading="lazy"
            />
          ))}
        </div>
      </Container>
    </section>
  );
}

--- frontend/src/components/Home/Testimonials.tsx ---
/* src/components/Home/Testimonials.tsx */
import Container from '../shared/Container';

const TESTIMONIALS = [
  {
    name: 'Laura P.',
    text: 'Alquilé mi cámara reflex y pagué las vacaciones. ¡Súper fácil!',
    avatar: 'https://source.unsplash.com/48x48/?woman,face'
  },
  {
    name: 'Carlos G.',
    text: 'Encontré un taladro a 5 € y no tuve que comprar uno nuevo.',
    avatar: 'https://source.unsplash.com/48x48/?man,face'
  },
  {
    name: 'Marta S.',
    text: 'Me encanta la seguridad del pago con fianza. Repetiré.',
    avatar: 'https://source.unsplash.com/48x48/?lady,face'
  }
];

export default function Testimonials() {
  return (
    <section className="bg-white py-16">
      <Container>
        <h2 className="mb-10 text-center text-3xl font-bold">Historias reales</h2>

        <div className="grid gap-6 md:grid-cols-3">  {/* NEW: Grid en lugar de scroll */}
          {TESTIMONIALS.map(t => (
            <article
              key={t.name}
              className="rounded-xl bg-white p-6 shadow-card transition-shadow hover:shadow-md"
            >
              <div className="flex items-center gap-3">
                <img
                  src={t.avatar}
                  alt=""
                  className="h-10 w-10 rounded-full object-cover"
                  loading="lazy"
                />
                <p className="font-semibold">{t.name}</p>
              </div>
              <p className="mt-4 text-sm text-gray-600">“{t.text}”</p>
            </article>
          ))}
        </div>
      </Container>
    </section>
  );
}

--- frontend/src/components/filters/FiltersSidebar.tsx ---
import { Disclosure } from '@headlessui/react';
import useCategories, { Category } from '../../features/categories/useCategories';

type Filters = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

type Props = {
  value: Filters;
  onChange: (f: Filters) => void;
  onReset: () => void;
};

export default function FiltersSidebar({ value, onChange, onReset }: Props) {
  const { data: cats } = useCategories();

  const toggleCat = (id: number) => {
    const list = new Set(value.categories ?? []);
    list.has(id) ? list.delete(id) : list.add(id);
    onChange({ ...value, categories: [...list] });
  };

  return (
    <div className="space-y-6 w-full md:w-60 lg:w-72">
      {/* Search */}
      <input
        placeholder="Buscar…"
        className="form-input w-full"
        value={value.name ?? ''}
        onChange={e => onChange({ ...value, name: e.target.value || undefined })}
      />

      {/* Price */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Precio {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 space-y-2">
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="mín"
                className="form-input w-full"
                value={value.min_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    min_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="máx"
                className="form-input w-full"
                value={value.max_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    max_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Categories */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Categorías {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 flex flex-wrap gap-2">
              {cats.map((c: Category) => {
                const active = value.categories?.includes(c.id);
                return (
                  <button
                    key={c.id}
                    onClick={() => toggleCat(c.id)}
                    className={
                      active
                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'
                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                    }
                  >
                    {c.name}
                  </button>
                );
              })}
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Order */}
      <select
        className="form-select w-full"
        value={value.order ?? ''}
        onChange={e =>
          onChange({
            ...value,
            order: e.target.value ? (e.target.value as Filters['order']) : undefined
          })
        }
      >
        <option value="">Ordenar por…</option>
        <option value="price_asc">Precio ↑</option>
        <option value="price_desc">Precio ↓</option>
        <option value="name">Nombre</option>
      </select>

      <button onClick={onReset} className="btn--ghost w-full">
        Limpiar filtros
      </button>
    </div>
  );
}



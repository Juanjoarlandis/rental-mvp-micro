--- catalog/requirements.txt ---

fastapi==0.116.0
uvicorn==0.35.0
pydantic==2.11.7
pydantic-core==2.33.2
pydantic-settings==2.10.1
SQLAlchemy==2.0.41
python-jose[cryptography]==3.5.0
python-multipart==0.0.6
python-dotenv==1.1.1
alembic==1.16.4
email-validator==2.1.1     # (pydantic extra)
uvloop==0.21.0
httptools==0.6.4
psycopg2-binary==2.9.9 

--- catalog/.env ---

DATABASE_URL=postgresql+psycopg2://catalog_user:catalog_pass@catalog-db:5432/catalog
SECRET_KEY=SuperClaveUltraSecreta


--- catalog/Dockerfile ---
FROM python:3.12-slim

RUN apt-get update \
    && apt-get install -y --no-install-recommends libffi-dev build-essential libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
ENV PYTHONPATH=/app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# código + alembic + env
COPY app/         ./app
COPY alembic.ini  .
COPY migrations/  ./migrations
COPY .env         .

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]


--- catalog/test_endpoints.sh ---
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

AUTH=http://localhost:8001/api/auth
CAT=http://localhost:8002/api
USERNAME=demo; EMAIL=demo@example.com; PASSWORD=demo

j() { jq -C .; }            # pretty-json coloreado
auth() { curl -s "$@" "${AUTHZ[@]}"; }

echo "────────── 1) SIGN-UP ──────────"
curl -s -X POST "$AUTH/signup" \
     -H 'Content-Type: application/json' \
     -d "{\"username\":\"$USERNAME\",\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" \
  | j || echo "(usuario ya existe)"

echo "────────── 2) LOGIN ────────────"
TOKEN=$(curl -s -X POST "$AUTH/token" \
              -H 'Content-Type: application/x-www-form-urlencoded' \
              -d "username=$USERNAME&password=$PASSWORD" \
        | jq -r .access_token)
AUTHZ=(-H "Authorization: Bearer $TOKEN")
echo "JWT => $TOKEN"

echo "────────── 3) /me ──────────────"
# Detecta cuál de los dos paths expone el servicio
for ME in "$AUTH/me" "$AUTH/users/me"; do
  CODE=$(curl -s -o /dev/null -w '%{http_code}' "$ME" "${AUTHZ[@]}")
  [[ $CODE == 200 ]] && { curl -s "$ME" "${AUTHZ[@]}" | j; break; }
done

echo "────────── 4) CATEGORIES ───────"
declare -A CIDs
for NAME in "Herramientas" "Decoración"; do
  # ¿existe ya?
  CID=$(curl -s "$CAT/categories/" | jq ".[] | select(.name==\"$NAME\") | .id")
  if [[ -z $CID ]]; then
     CID=$(curl -s -X POST "$CAT/categories/" "${AUTHZ[@]}" \
                 -H 'Content-Type: application/json' \
                 -d "{\"name\":\"$NAME\"}" | jq -r .id)
  fi
  CIDs[$NAME]=$CID
  echo "• $NAME id=${CID}"
done

echo "────────── 5) ITEMS CRUD ───────"
DATA='{
  "name":"Taladro Bosch",
  "description":"800 W",
  "price_per_h":4.5,
  "image_urls":["https://picsum.photos/seed/taladro/800/600"]
}'
# Sólo enviamos categories si tenemos IDs válidos
[[ -n ${CIDs[Herramientas]} ]] && \
  DATA=$(jq --argjson cid ${CIDs[Herramientas]} '. + {categories:[$cid]}' <<<"$DATA")

ITEM=$(curl -s -X POST "$CAT/items/" "${AUTHZ[@]}" \
            -H 'Content-Type: application/json' \
            -d "$DATA")
echo "$ITEM" | j
IID=$(echo "$ITEM" | jq -r .id)

echo "── GET públicos /items?available=true"
curl -s "$CAT/items?available=true" | j

echo "── GET privados  /items/me"
auth "$CAT/items/me" | j

echo "── PATCH /items/$IID (añade Decoración, cambia precio)"
PATCH=$(jq --argjson cid ${CIDs[Decoración]} '{price_per_h:5.0,categories:[$cid]}' <<<"{}")
auth -X PATCH "$CAT/items/$IID" \
     -H 'Content-Type: application/json' \
     -d "$PATCH" | j

echo "── DELETE /items/$IID"
auth -X DELETE "$CAT/items/$IID" -w '\n(status %{http_code})\n'

echo "── /items/me debería estar vacío"
auth "$CAT/items/me" | j

echo "────────── 6) UPLOAD ───────────"
if [[ -f sample.jpg ]]; then
  auth -X POST "$CAT/upload/" -F "file=@sample.jpg" | j
else
  echo "(sin sample.jpg; omitiendo)"
fi

echo -e "\n✅  tests completados"


--- catalog/alembic.ini ---
[alembic]
script_location = migrations
prepend_sys_path = .
sqlalchemy.url = postgresql+psycopg2://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}

version_path_separator = os


# ────────────── Logging ──────────────
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic


[logger_root]
level    = WARN
handlers = console


[logger_sqlalchemy]
level     = WARN
qualname  = sqlalchemy.engine
handlers  = console


[logger_alembic]
level     = INFO
qualname  = alembic
handlers  = console


[handler_console]
class     = StreamHandler
args      = (sys.stderr,)
formatter = generic


[formatter_generic]
format   = %(levelname)-5.5s [%(name)s] %(message)s
datefmt  = %H:%M:%S


--- catalog/migrations/script.py.mako ---

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}
"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}


--- catalog/migrations/README ---


--- catalog/migrations/env.py ---

"""Alembic environment for Catalog service."""
from __future__ import annotations

from logging.config import fileConfig
from alembic import context
from sqlalchemy import engine_from_config, pool

# ─── configuración ────────────────────────────────────────────────────────
config = context.config
fileConfig(config.config_file_name)

# Metadata
from app.models.models import Base                                   # noqa: E402
target_metadata = Base.metadata
target_metadata.naming_convention = {
    "ix": "ix_%(column_0_label)s",
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(constraint_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s",
}

# URL de la BD → .env
from app.core.config import settings                                # noqa: E402
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)


def run_migrations_offline() -> None:
    context.configure(
        url=config.get_main_option("sqlalchemy.url"),
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


--- catalog/migrations/versions/20250713_0001_initial.py ---
"""Seed default categories

Revision ID: 20250714_0002
Revises: 20250713_0001
Create Date: 2025‑07‑14 12:00:00
"""
from alembic import op
import sqlalchemy as sa

# ──────────────────────────────────────────────────────────────────────────
revision: str = "20250714_0002"
down_revision: str | None = "20250713_0001"
branch_labels: tuple | None = None
depends_on: tuple | None = None
# ──────────────────────────────────────────────────────────────────────────

DEFAULT_CATEGORIES = [
    "Herramientas",
    "Electrónica",
    "Deportes",
    "Hogar",
    "Jardín",
    "Fotografía",
    "Camping",
    "Infantil",
]

# ------------------------------------------------------------------------
def upgrade() -> None:
    """Inserta las categorías si aún no existen."""
    categories = sa.table("item_categories", sa.column("name", sa.String))
    conn = op.get_bind()

    # nombres ya presentes
    existing = {
        row.name for row in conn.execute(sa.select(categories.c.name))
    }

    # solo las ausentes
    to_insert = [{"name": n} for n in DEFAULT_CATEGORIES if n not in existing]
    if to_insert:
        op.bulk_insert(categories, to_insert)


def downgrade() -> None:
    """Elimina únicamente las categorías sembradas por esta revisión."""
    conn = op.get_bind()
    conn.execute(
        sa.text(
            "DELETE FROM item_categories WHERE name = ANY(:names)"
        ),
        {"names": DEFAULT_CATEGORIES},
    )


--- catalog/app/main.py ---
# services/catalog/app/main.py
from fastapi import FastAPI

from app.api import categories, items
from app.models.database import Base, engine
import app.models.models                         #  noqa: F401

app = FastAPI(
    title="rental-mvp – Catalog Service",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

@app.on_event("startup")
def _init_db() -> None:
    Base.metadata.create_all(bind=engine)

app.include_router(categories.router, prefix="/api/categories", tags=["categories"])
app.include_router(items.router,      prefix="/api/items",      tags=["items"])


--- catalog/app/__init__.py ---


--- catalog/app/deps.py ---
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from sqlalchemy.orm import Session

from app.models.database import SessionLocal
from app.core.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="dummy")  # no lo usamos, solo valida header


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_current_username(token: str = Depends(oauth2_scheme)) -> str:
    """Devuelve `sub` del JWT emitido por Auth."""
    cred_exc = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciales no válidas",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str | None = payload.get("sub")
        if not username:
            raise cred_exc
        return username
    except JWTError:
        raise cred_exc

--- catalog/app/models/models.py ---
from __future__ import annotations

from typing import List
from sqlalchemy import (
    Boolean,
    Column,
    Float,
    ForeignKey,
    Integer,
    String,
    Table,
)
from sqlalchemy.orm import relationship

from .database import Base

# relación N:M items–categories
item_categories = Table(
    "item_categories",
    Base.metadata,
    Column("item_id", Integer, ForeignKey("items.id", ondelete="CASCADE"), primary_key=True),
    Column("category_id", Integer, ForeignKey("categories.id", ondelete="CASCADE"), primary_key=True),
)

class ItemImage(Base):
    __tablename__ = "item_images"

    id = Column(Integer, primary_key=True)
    item_id = Column(Integer, ForeignKey("items.id", ondelete="CASCADE"), nullable=False)
    url = Column(String, nullable=False)

    item = relationship("Item", back_populates="images")


class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, index=True, nullable=False)

    items = relationship("Item", secondary=item_categories, back_populates="categories")


class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True, nullable=False)
    description = Column(String)
    price_per_h = Column(Float, nullable=False)

    # destacado (legacy)
    image_url = Column(String)

    # ← vínculo al propietario (micro-servicio auth)
    owner_username = Column(String, index=True, nullable=False)

    available = Column(Boolean, default=True)

    # relaciones
    categories = relationship("Category", secondary=item_categories, back_populates="items")
    images = relationship(
        "ItemImage",
        back_populates="item",
        cascade="all, delete-orphan",
        order_by="ItemImage.id",
    )

    # helper
    @property
    def image_urls(self) -> List[str]:
        return [img.url for img in self.images]

--- catalog/app/models/__init__.py ---
# importa modelos para que Alembic los detecte
from .models import Category, Item, ItemImage  # noqa: F401

--- catalog/app/models/database.py ---
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

connect_args = {"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}
engine = create_engine(settings.DATABASE_URL, connect_args=connect_args, echo=True)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

--- catalog/app/schemas/category.py ---
from pydantic import BaseModel, Field


class CategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=50)


class CategoryCreate(CategoryBase):
    pass


class CategoryOut(CategoryBase):
    id: int

    class Config:
        from_attributes = True

--- catalog/app/schemas/__init__.py ---
from .category import CategoryCreate, CategoryOut
from .item import ItemCreate, ItemUpdate, ItemOut

__all__ = [
    "CategoryCreate",
    "CategoryOut",
    "ItemCreate",
    "ItemUpdate",
    "ItemOut",
]

--- catalog/app/schemas/item.py ---
# services/catalog/app/schemas/item.py
from __future__ import annotations

from typing import List, Optional

from pydantic import (
    BaseModel,
    Field,
    PositiveFloat,
    AfterValidator,      # 🆕 validador ligero en v2
)
from typing_extensions import Annotated   # Annotated en 3.12

from .category import CategoryOut


# ────────────────────────────────────────────────────────────────────
#  Tipo URL “relajado” → admite http(s)://…  o  rutas relativas “/…”
# ────────────────────────────────────────────────────────────────────
def _check_url(v: str) -> str:
    if v.startswith(("http://", "https://", "/")):
        return v
    raise ValueError("url debe ser http(s)://… o empezar por /uploads/…")


UrlStr = Annotated[str, AfterValidator(_check_url)]


# ─────────────────────────── SCHEMAS ────────────────────────────────
class ItemBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: PositiveFloat


class ItemCreate(ItemBase):
    image_urls: List[UrlStr] = Field(..., min_length=1, max_length=6)
    categories: Optional[List[int]] = Field(
        default=None, description="IDs de categorías asociadas"
    )


class ItemUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: Optional[PositiveFloat] = None
    image_urls: Optional[List[UrlStr]] = Field(None, min_length=1, max_length=6)
    categories: Optional[List[int]] = None

    model_config = {"extra": "forbid"}


class ItemOut(ItemBase):
    id: int
    available: bool
    owner_username: str
    categories: List[CategoryOut]
    image_urls: List[UrlStr]
    image_url: Optional[UrlStr] = None  # compat con versiones antiguas

    model_config = {"from_attributes": True}


--- catalog/app/crud/category.py ---
from typing import List, Optional

from sqlalchemy.orm import Session

from app.models.models import Category
from app.schemas.category import CategoryCreate


def get_category(db: Session, cat_id: int) -> Optional[Category]:
    return db.query(Category).filter(Category.id == cat_id).first()


def get_categories(db: Session) -> List[Category]:
    return db.query(Category).order_by(Category.name).all()


def create_category(db: Session, cat_in: CategoryCreate) -> Category:
    db_cat = Category(**cat_in.model_dump())
    db.add(db_cat)
    db.commit()
    db.refresh(db_cat)
    return db_cat

--- catalog/app/crud/__init__.py ---
from .category import get_category, get_categories, create_category           # noqa: F401
from .item import (                                                           # noqa: F401
    get_item,
    get_items,
    get_items_by_owner,
    create_item,
    update_item,
    delete_item,
)

__all__ = [
    "get_category",
    "get_categories",
    "create_category",
    "get_item",
    "get_items",
    "get_items_by_owner",
    "create_item",
    "update_item",
    "delete_item",
]

--- catalog/app/crud/item.py ---
from __future__ import annotations

from typing import List, Optional, Tuple

from sqlalchemy import asc, desc, or_
from sqlalchemy.orm import Session, joinedload

from app.models.models import Category, Item, ItemImage
from app.schemas.item import ItemCreate, ItemUpdate

# ───────── helpers internos ───────────────────────────────────────────────
def _get_categories_or_400(db: Session, ids: list[int]) -> list[Category]:
    cats = db.query(Category).filter(Category.id.in_(ids)).all()
    if len(cats) != len(ids):
        missing = set(ids) - {c.id for c in cats}
        raise ValueError(f"Categorías inexistentes: {', '.join(map(str, missing))}")
    return cats


def _apply_order(q, order_by: str | None, order_dir: str | None):
    mapping = {"price": Item.price_per_h, "name": Item.name, "id": Item.id}
    if not order_by:
        return q.order_by(Item.id)
    col = mapping.get(order_by, Item.id)
    return q.order_by(asc(col) if order_dir == "asc" else desc(col))


# ───────── lectura ────────────────────────────────────────────────────────
def get_item(db: Session, item_id: int) -> Optional[Item]:
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.id == item_id)
        .first()
    )


def _build_query(
    db: Session,
    *,
    name: Optional[str],
    min_price: Optional[float],
    max_price: Optional[float],
    available: Optional[bool],
    categories: Optional[List[int]],
    order_by: Optional[str],
    order_dir: Optional[str],
):
    q = db.query(Item).options(joinedload(Item.categories), joinedload(Item.images))

    if name:
        pattern = f"%{name}%"
        q = q.filter(or_(Item.name.ilike(pattern), Item.description.ilike(pattern)))
    if min_price is not None:
        q = q.filter(Item.price_per_h >= min_price)
    if max_price is not None:
        q = q.filter(Item.price_per_h <= max_price)
    if available is not None:
        q = q.filter(Item.available == available)
    if categories:
        q = q.filter(Item.categories.any(Category.id.in_(categories)))

    return _apply_order(q, order_by, order_dir)


def get_items(
    db: Session,
    skip: int,
    limit: int,
    *,
    name: Optional[str],
    min_price: Optional[float],
    max_price: Optional[float],
    available: Optional[bool],
    categories: Optional[List[int]],
    order_by: Optional[str],
    order_dir: Optional[str],
) -> Tuple[List[Item], int]:
    q = _build_query(
        db,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )
    total = q.count()
    items = q.offset(skip).limit(limit).all()
    return items, total


def get_items_by_owner(db: Session, owner: str) -> List[Item]:
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.owner_username == owner)
        .all()
    )


# ───────── escritura ──────────────────────────────────────────────────────
def create_item(db: Session, item_in: ItemCreate, owner_username: str) -> Item:
    main = str(item_in.image_urls[0])

    db_item = Item(
        name=item_in.name,
        description=item_in.description,
        price_per_h=item_in.price_per_h,
        image_url=main,
        owner_username=owner_username,
    )

    if item_in.categories:
        db_item.categories = _get_categories_or_400(db, item_in.categories)

    db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]

    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item


def update_item(db: Session, db_item: Item, item_in: ItemUpdate) -> Item:
    data = item_in.model_dump(exclude_unset=True, exclude={"categories", "image_urls"})
    for k, v in data.items():
        setattr(db_item, k, v)

    if item_in.categories is not None:
        db_item.categories = _get_categories_or_400(db, item_in.categories)

    if item_in.image_urls is not None:
        db_item.image_url = str(item_in.image_urls[0])
        db_item.images = [ItemImage(url=str(u)) for u in item_in.image_urls]

    db.commit()
    db.refresh(db_item)
    return db_item


def delete_item(db: Session, db_item: Item) -> None:
    db.delete(db_item)
    db.commit()

--- catalog/app/core/__init__.py ---


--- catalog/app/core/config.py ---
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    DATABASE_URL: str
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    model_config = SettingsConfigDict(env_file=".env", extra="ignore")


settings = Settings()

--- catalog/app/api/items.py ---
from typing import List, Optional
from urllib.parse import urlencode

from fastapi import (
    APIRouter,
    Depends,
    HTTPException,
    Query,
    Request,
    Response,
    status,
)
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_username

router = APIRouter()

# ───────── helpers paginación RFC-5988 ────────────────────────────────────
def _pagination_links(request: Request, skip: int, limit: int, total: int, **flt):
    links: list[str] = []
    base = request.url.remove_query_params("skip").remove_query_params("limit")

    def _url(new_skip: int):
        params = {k: v for k, v in flt.items() if v is not None}
        params.update({"skip": new_skip, "limit": limit})
        return f"<{base}?{urlencode(params, doseq=True)}>"

    if skip + limit < total:
        links.append(f'{_url(skip + limit)}; rel="next"')
    if skip > 0:
        links.append(f'{_url(max(skip - limit,0))}; rel="prev"')
    return ", ".join(links)


# ───────────── crear ─────────────────────────────────────────────────────
@router.post("/", response_model=schemas.ItemOut, status_code=status.HTTP_201_CREATED)
def create_item(
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    return crud.create_item(db, item_in, owner_username=username)


# ───────────── listar público ────────────────────────────────────────────
@router.get("/", response_model=List[schemas.ItemOut])
def list_items(
    request: Request,
    response: Response,
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    name: Optional[str] = None,
    min_price: Optional[float] = Query(None, ge=0),
    max_price: Optional[float] = Query(None, ge=0),
    available: Optional[bool] = None,
    categories: Optional[List[int]] = Query(None),
    order_by: Optional[str] = Query(None, pattern="^(price|name|id)$"),
    order_dir: Optional[str] = Query(None, pattern="^(asc|desc)$"),
    db: Session = Depends(get_db),
):
    items, total = crud.get_items(
        db,
        skip,
        limit,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )
    response.headers["X-Total-Count"] = str(total)
    if total:
        link = _pagination_links(
            request,
            skip,
            limit,
            total,
            name=name,
            min_price=min_price,
            max_price=max_price,
            available=available,
            categories=categories,
            order_by=order_by,
            order_dir=order_dir,
        )
        if link:
            response.headers["Link"] = link
    return items


# ───────────── mis ítems ────────────────────────────────────────────────
@router.get("/me", response_model=List[schemas.ItemOut])
def my_items(
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    return crud.get_items_by_owner(db, username)


# ───────────── actualizar ───────────────────────────────────────────────
@router.patch("/{item_id}", response_model=schemas.ItemOut)
def patch_item(
    item_id: int,
    item_in: schemas.ItemUpdate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    return crud.update_item(db, db_item, item_in)


@router.put("/{item_id}", response_model=schemas.ItemOut)
def put_item(
    item_id: int,
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    return crud.update_item(db, db_item, schemas.ItemUpdate(**item_in.model_dump()))

# ───────────── obtener 1 ítem ────────────────────────────────────────────
@router.get("/{item_id}", response_model=schemas.ItemOut)
def get_item(
    item_id: int,
    db: Session = Depends(get_db),
):
    """
    Devuelve un único ítem por *ID*.

    404 si no existe.
    """
    db_item = crud.get_item(db, item_id)
    if not db_item:
        raise HTTPException(404, "Item no encontrado")
    return db_item



# ───────────── eliminar ────────────────────────────────────────────────
@router.delete("/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_item(
    item_id: int,
    db: Session = Depends(get_db),
    username: str = Depends(get_current_username),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_username != username:
        raise HTTPException(404, "Item no encontrado")
    crud.delete_item(db, db_item)

--- catalog/app/api/categories.py ---
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_username

router = APIRouter()


@router.get("/", response_model=List[schemas.CategoryOut])
def list_categories(db: Session = Depends(get_db)):
    return crud.get_categories(db)


@router.post(
    "/", response_model=schemas.CategoryOut, status_code=status.HTTP_201_CREATED
)
def create_category(
    cat_in: schemas.CategoryCreate,
    db: Session = Depends(get_db),
    _user=Depends(get_current_username),        # solo autenticados
):
    return crud.create_category(db, cat_in)


@router.get("/{cat_id}", response_model=schemas.CategoryOut)
def get_category(cat_id: int, db: Session = Depends(get_db)):
    cat = crud.get_category(db, cat_id)
    if not cat:
        raise HTTPException(404, "Categoría no encontrada")
    return cat

--- catalog/app/api/__init__.py ---


--- catalog/app/api/upload.py ---
# services/catalog/app/api/upload.py
"""
Endpoint para subir imágenes desde el catálogo.
También devuelve la **ruta relativa** /uploads/…  para evitar problemas de host.
"""
from __future__ import annotations

import os
import shutil
import uuid
from pathlib import Path

from fastapi import (
    APIRouter,
    Depends,
    HTTPException,
    Request,
    UploadFile,
    status,
)

from app.deps import get_current_username

UPLOAD_DIR = Path(__file__).resolve().parent.parent / "uploads"
UPLOAD_DIR.mkdir(exist_ok=True)

router = APIRouter()


@router.post("/", status_code=status.HTTP_201_CREATED)
async def upload_image(
    file: UploadFile,
    request: Request,
    _user=Depends(get_current_username),
):
    if not file.content_type.startswith("image/"):
        raise HTTPException(400, "Solo imágenes")

    ext = Path(file.filename).suffix
    name = f"{uuid.uuid4()}{ext}"
    path = UPLOAD_DIR / name

    with path.open("wb") as buf:
        shutil.copyfileobj(file.file, buf)

    # ← ruta relativa
    return {"url": f"/uploads/{name}"}



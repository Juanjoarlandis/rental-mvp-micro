version: "3.9"

# ──────────────────────────────── NETWORKS (opcional) ───────────────────────────
# Si no declaras redes, Compose crea una por defecto que ya es suficiente.
# networks:
#   backend:

# ─────────────────────────────────── SERVICES ───────────────────────────────────
services:

  # ────────────── AUTH ──────────────────────────────────────────────────────────
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  auth-migrate:
    build: ./services/auth
    container_name: auth-migrate
    env_file: ./services/auth/.env
    command: alembic upgrade head
    depends_on:
      auth-db:
        condition: service_healthy
    restart: "no"                       # solo se ejecuta una vez
    # networks:
    #   - backend

  auth:
    build: ./services/auth
    container_name: auth-service
    env_file: ./services/auth/.env
    environment:
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8001:8000"                     # API Auth
    restart: unless-stopped
    depends_on:
      auth-migrate:
        condition: service_completed_successfully
    # networks:
    #   - backend

  # ────────────── CATALOG ───────────────────────────────────────────────────────
  catalog-db:
    image: postgres:15
    container_name: catalog-db
    environment:
      POSTGRES_DB: catalog
      POSTGRES_USER: catalog_user
      POSTGRES_PASSWORD: catalog_pass
    volumes:
      - catalog_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalog_user -d catalog"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  catalog-migrate:
    build: ./services/catalog
    container_name: catalog-migrate
    env_file: ./services/catalog/.env
    command: alembic upgrade head
    depends_on:
      catalog-db:
        condition: service_healthy
    restart: "no"
    # networks:
    #   - backend

  catalog:
    build: ./services/catalog
    container_name: catalog-service
    env_file: ./services/catalog/.env
    ports:
      - "8002:8000"                     # API Catalog
    restart: unless-stopped
    depends_on:
      catalog-migrate:
        condition: service_completed_successfully
    # networks:
    #   - backend

  # ────────────── RENTALS ───────────────────────────────────────────────────────
  rentals-db:
    image: postgres:15
    container_name: rentals-db
    environment:
      POSTGRES_DB: rentals
      POSTGRES_USER: rentals_user
      POSTGRES_PASSWORD: rentals_pass
    volumes:
      - rentals_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rentals_user -d rentals"]
      interval: 5s
      timeout: 5s
      retries: 5
    # networks:
    #   - backend

  rentals-migrate:
    build: ./services/rentals
    container_name: rentals-migrate
    env_file: ./services/rentals/.env
    command: alembic upgrade head
    depends_on:
      rentals-db:
        condition: service_healthy
    restart: "no"
    # networks:
    #   - backend

  rentals:
    build: ./services/rentals
    container_name: rentals-service
    env_file: ./services/rentals/.env
    ports:
      - "8003:8000"                     # API Rentals
    restart: unless-stopped
    depends_on:
      rentals-migrate:
        condition: service_completed_successfully
      catalog:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── UPLOAD ────────────────────────────────────────────────────────
  upload:
    build: ./services/upload
    container_name: upload-service
    env_file: ./services/upload/.env
    environment:
      - JWT_SECRET=${JWT_SECRET}        # misma clave que Auth
    volumes:
      - uploads_data:/app/uploads       # carpeta de imágenes
    ports:
      - "8004:8000"                     # API Upload
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── PAYMENTS (Stripe) ─────────────────────────────────────────────
  payments:
    build: ./services/payments
    container_name: payments-service
    env_file: ./services/payments/.env
    ports:
      - "8005:8000"                     # API Payments
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_started
    # networks:
    #   - backend

  # ────────────── FRONTEND SPA ──────────────────────────────────────────────────
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: frontend-service
    ports:
      - "80:80"                         # UI pública
    restart: unless-stopped
    depends_on:
      - auth
      - catalog
      - rentals
      - upload
      - payments
    # networks:
    #   - backend

# ─────────────────────────────────── VOLUMES ────────────────────────────────────
volumes:
  auth_db_data:
  catalog_db_data:
  rentals_db_data:
  uploads_data:

# ────────────────────────────────── (opt) NETWORKS ──────────────────────────────
# networks:
#   backend:
#     driver: bridge

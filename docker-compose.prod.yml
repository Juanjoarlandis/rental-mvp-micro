services:
  # ──────────────── AUTH ───────────────────────────────
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_pass
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rental-net

  auth-migrate:
    build: ./services/auth
    container_name: auth-migrate
    env_file: ./services/auth/.env
    command: alembic upgrade head
    depends_on:
      auth-db:
        condition: service_healthy
    restart: "no"
    networks:
      - rental-net

  auth:
    build: ./services/auth
    container_name: auth-service
    env_file: ./services/auth/.env
    restart: unless-stopped
    depends_on:
      auth-migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request as r; exit(0 if r.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rental-net

  # ──────────────── CATALOG ────────────────────────────
  catalog-db:
    image: postgres:15
    container_name: catalog-db
    environment:
      POSTGRES_DB: catalog
      POSTGRES_USER: catalog_user
      POSTGRES_PASSWORD: catalog_pass
    volumes:
      - catalog_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalog_user -d catalog"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rental-net

  catalog-migrate:
    build: ./services/catalog
    container_name: catalog-migrate
    env_file: ./services/catalog/.env
    command: alembic upgrade head
    depends_on:
      catalog-db:
        condition: service_healthy
    restart: "no"
    networks:
      - rental-net

  catalog:
    build: ./services/catalog
    container_name: catalog-service
    env_file: ./services/catalog/.env
    restart: unless-stopped
    depends_on:
      catalog-migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request as r; exit(0 if r.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rental-net

  # ──────────────── RENTALS ────────────────────────────
  rentals-db:
    image: postgres:15
    container_name: rentals-db
    environment:
      POSTGRES_DB: rentals
      POSTGRES_USER: rentals_user
      POSTGRES_PASSWORD: rentals_pass
    volumes:
      - rentals_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rentals_user -d rentals"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - rental-net

  rentals-migrate:
    build: ./services/rentals
    container_name: rentals-migrate
    env_file: ./services/rentals/.env
    command: alembic upgrade head
    depends_on:
      rentals-db:
        condition: service_healthy
    restart: "no"
    networks:
      - rental-net

  rentals:
    build: ./services/rentals
    container_name: rentals-service
    env_file: ./services/rentals/.env
    restart: unless-stopped
    depends_on:
      rentals-migrate:
        condition: service_completed_successfully
      catalog:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request as r; exit(0 if r.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rental-net

  # ──────────────── UPLOAD ─────────────────────────────
  upload:
    build: ./services/upload
    container_name: upload-service
    env_file: ./services/upload/.env
    volumes:
      - uploads_data:/app/app/uploads
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request as r; exit(0 if r.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rental-net

  # ──────────────── PAYMENTS ───────────────────────────
  payments:
    build: ./services/payments
    container_name: payments-service
    env_file: ./services/payments/.env
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request as r; exit(0 if r.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rental-net

  # ──────────────── FRONTEND (Nginx) ───────────────────
  frontend:
    build: ./services/frontend
    container_name: frontend-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro  # Monta self-signed certs
    restart: unless-stopped
    depends_on:
      - auth
      - catalog
      - rentals
      - upload
      - payments
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - rental-net

volumes:
  auth_db_data:
  catalog_db_data:
  rentals_db_data:
  uploads_data:

networks:
  rental-net: